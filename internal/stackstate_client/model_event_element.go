/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
	"fmt"
)

// EventElement - struct for EventElement
type EventElement struct {
	EventComponent *EventComponent
	EventRelation *EventRelation
}

// EventComponentAsEventElement is a convenience function that returns EventComponent wrapped in EventElement
func EventComponentAsEventElement(v *EventComponent) EventElement {
	return EventElement{ EventComponent: v}
}

// EventRelationAsEventElement is a convenience function that returns EventRelation wrapped in EventElement
func EventRelationAsEventElement(v *EventRelation) EventElement {
	return EventElement{ EventRelation: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventElement) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into EventComponent
	err = json.Unmarshal(data, &dst.EventComponent)
	if err == nil {
		jsonEventComponent, _ := json.Marshal(dst.EventComponent)
		if string(jsonEventComponent) == "{}" { // empty struct
			dst.EventComponent = nil
		} else {
			match++
		}
	} else {
		dst.EventComponent = nil
	}

	// try to unmarshal data into EventRelation
	err = json.Unmarshal(data, &dst.EventRelation)
	if err == nil {
		jsonEventRelation, _ := json.Marshal(dst.EventRelation)
		if string(jsonEventRelation) == "{}" { // empty struct
			dst.EventRelation = nil
		} else {
			match++
		}
	} else {
		dst.EventRelation = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.EventComponent = nil
		dst.EventRelation = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EventElement)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EventElement)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventElement) MarshalJSON() ([]byte, error) {
	if src.EventComponent != nil {
		return json.Marshal(&src.EventComponent)
	}

	if src.EventRelation != nil {
		return json.Marshal(&src.EventRelation)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventElement) GetActualInstance() (interface{}) {
	if obj.EventComponent != nil {
		return obj.EventComponent
	}

	if obj.EventRelation != nil {
		return obj.EventRelation
	}

	// all schemas are nil
	return nil
}

type NullableEventElement struct {
	value *EventElement
	isSet bool
}

func (v NullableEventElement) Get() *EventElement {
	return v.value
}

func (v *NullableEventElement) Set(val *EventElement) {
	v.value = val
	v.isSet = true
}

func (v NullableEventElement) IsSet() bool {
	return v.isSet
}

func (v *NullableEventElement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventElement(val *EventElement) *NullableEventElement {
	return &NullableEventElement{value: val, isSet: true}
}

func (v NullableEventElement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventElement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


