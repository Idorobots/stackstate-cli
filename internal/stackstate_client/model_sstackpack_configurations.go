/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// SstackpackConfigurations struct for SstackpackConfigurations
type SstackpackConfigurations struct {
	StackPackVersion *string `json:"stackPackVersion,omitempty"`
}

// NewSstackpackConfigurations instantiates a new SstackpackConfigurations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSstackpackConfigurations() *SstackpackConfigurations {
	this := SstackpackConfigurations{}
	return &this
}

// NewSstackpackConfigurationsWithDefaults instantiates a new SstackpackConfigurations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSstackpackConfigurationsWithDefaults() *SstackpackConfigurations {
	this := SstackpackConfigurations{}
	return &this
}

// GetStackPackVersion returns the StackPackVersion field value if set, zero value otherwise.
func (o *SstackpackConfigurations) GetStackPackVersion() string {
	if o == nil || o.StackPackVersion == nil {
		var ret string
		return ret
	}
	return *o.StackPackVersion
}

// GetStackPackVersionOk returns a tuple with the StackPackVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SstackpackConfigurations) GetStackPackVersionOk() (*string, bool) {
	if o == nil || o.StackPackVersion == nil {
		return nil, false
	}
	return o.StackPackVersion, true
}

// HasStackPackVersion returns a boolean if a field has been set.
func (o *SstackpackConfigurations) HasStackPackVersion() bool {
	if o != nil && o.StackPackVersion != nil {
		return true
	}

	return false
}

// SetStackPackVersion gets a reference to the given string and assigns it to the StackPackVersion field.
func (o *SstackpackConfigurations) SetStackPackVersion(v string) {
	o.StackPackVersion = &v
}

func (o SstackpackConfigurations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StackPackVersion != nil {
		toSerialize["stackPackVersion"] = o.StackPackVersion
	}
	return json.Marshal(toSerialize)
}

type NullableSstackpackConfigurations struct {
	value *SstackpackConfigurations
	isSet bool
}

func (v NullableSstackpackConfigurations) Get() *SstackpackConfigurations {
	return v.value
}

func (v *NullableSstackpackConfigurations) Set(val *SstackpackConfigurations) {
	v.value = val
	v.isSet = true
}

func (v NullableSstackpackConfigurations) IsSet() bool {
	return v.isSet
}

func (v *NullableSstackpackConfigurations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSstackpackConfigurations(val *SstackpackConfigurations) *NullableSstackpackConfigurations {
	return &NullableSstackpackConfigurations{value: val, isSet: true}
}

func (v NullableSstackpackConfigurations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSstackpackConfigurations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
