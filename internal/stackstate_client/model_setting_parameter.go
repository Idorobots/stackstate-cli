/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// SettingParameter struct for SettingParameter
type SettingParameter struct {
	Id       *int64  `json:"id,omitempty"`
	Multiple *bool   `json:"multiple,omitempty"`
	Name     *string `json:"name,omitempty"`
	Required *bool   `json:"required,omitempty"`
	Type     *string `json:"type,omitempty"`
}

// NewSettingParameter instantiates a new SettingParameter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSettingParameter() *SettingParameter {
	this := SettingParameter{}
	return &this
}

// NewSettingParameterWithDefaults instantiates a new SettingParameter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSettingParameterWithDefaults() *SettingParameter {
	this := SettingParameter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SettingParameter) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingParameter) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SettingParameter) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *SettingParameter) SetId(v int64) {
	o.Id = &v
}

// GetMultiple returns the Multiple field value if set, zero value otherwise.
func (o *SettingParameter) GetMultiple() bool {
	if o == nil || o.Multiple == nil {
		var ret bool
		return ret
	}
	return *o.Multiple
}

// GetMultipleOk returns a tuple with the Multiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingParameter) GetMultipleOk() (*bool, bool) {
	if o == nil || o.Multiple == nil {
		return nil, false
	}
	return o.Multiple, true
}

// HasMultiple returns a boolean if a field has been set.
func (o *SettingParameter) HasMultiple() bool {
	if o != nil && o.Multiple != nil {
		return true
	}

	return false
}

// SetMultiple gets a reference to the given bool and assigns it to the Multiple field.
func (o *SettingParameter) SetMultiple(v bool) {
	o.Multiple = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SettingParameter) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingParameter) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SettingParameter) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SettingParameter) SetName(v string) {
	o.Name = &v
}

// GetRequired returns the Required field value if set, zero value otherwise.
func (o *SettingParameter) GetRequired() bool {
	if o == nil || o.Required == nil {
		var ret bool
		return ret
	}
	return *o.Required
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingParameter) GetRequiredOk() (*bool, bool) {
	if o == nil || o.Required == nil {
		return nil, false
	}
	return o.Required, true
}

// HasRequired returns a boolean if a field has been set.
func (o *SettingParameter) HasRequired() bool {
	if o != nil && o.Required != nil {
		return true
	}

	return false
}

// SetRequired gets a reference to the given bool and assigns it to the Required field.
func (o *SettingParameter) SetRequired(v bool) {
	o.Required = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SettingParameter) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SettingParameter) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SettingParameter) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SettingParameter) SetType(v string) {
	o.Type = &v
}

func (o SettingParameter) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Multiple != nil {
		toSerialize["multiple"] = o.Multiple
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Required != nil {
		toSerialize["required"] = o.Required
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableSettingParameter struct {
	value *SettingParameter
	isSet bool
}

func (v NullableSettingParameter) Get() *SettingParameter {
	return v.value
}

func (v *NullableSettingParameter) Set(val *SettingParameter) {
	v.value = val
	v.isSet = true
}

func (v NullableSettingParameter) IsSet() bool {
	return v.isSet
}

func (v *NullableSettingParameter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSettingParameter(val *SettingParameter) *NullableSettingParameter {
	return &NullableSettingParameter{value: val, isSet: true}
}

func (v NullableSettingParameter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSettingParameter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
