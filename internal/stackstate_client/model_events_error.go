/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
	"fmt"
)

// EventsError - struct for EventsError
type EventsError struct {
	ElasticSearchError *ElasticSearchError
	EventNotFoundError *EventNotFoundError
	RootCauseParsingError *RootCauseParsingError
	StqlParsingError *StqlParsingError
}

// ElasticSearchErrorAsEventsError is a convenience function that returns ElasticSearchError wrapped in EventsError
func ElasticSearchErrorAsEventsError(v *ElasticSearchError) EventsError {
	return EventsError{ ElasticSearchError: v}
}

// EventNotFoundErrorAsEventsError is a convenience function that returns EventNotFoundError wrapped in EventsError
func EventNotFoundErrorAsEventsError(v *EventNotFoundError) EventsError {
	return EventsError{ EventNotFoundError: v}
}

// RootCauseParsingErrorAsEventsError is a convenience function that returns RootCauseParsingError wrapped in EventsError
func RootCauseParsingErrorAsEventsError(v *RootCauseParsingError) EventsError {
	return EventsError{ RootCauseParsingError: v}
}

// StqlParsingErrorAsEventsError is a convenience function that returns StqlParsingError wrapped in EventsError
func StqlParsingErrorAsEventsError(v *StqlParsingError) EventsError {
	return EventsError{ StqlParsingError: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventsError) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ElasticSearchError
	err = json.Unmarshal(data, &dst.ElasticSearchError)
	if err == nil {
		jsonElasticSearchError, _ := json.Marshal(dst.ElasticSearchError)
		if string(jsonElasticSearchError) == "{}" { // empty struct
			dst.ElasticSearchError = nil
		} else {
			match++
		}
	} else {
		dst.ElasticSearchError = nil
	}

	// try to unmarshal data into EventNotFoundError
	err = json.Unmarshal(data, &dst.EventNotFoundError)
	if err == nil {
		jsonEventNotFoundError, _ := json.Marshal(dst.EventNotFoundError)
		if string(jsonEventNotFoundError) == "{}" { // empty struct
			dst.EventNotFoundError = nil
		} else {
			match++
		}
	} else {
		dst.EventNotFoundError = nil
	}

	// try to unmarshal data into RootCauseParsingError
	err = json.Unmarshal(data, &dst.RootCauseParsingError)
	if err == nil {
		jsonRootCauseParsingError, _ := json.Marshal(dst.RootCauseParsingError)
		if string(jsonRootCauseParsingError) == "{}" { // empty struct
			dst.RootCauseParsingError = nil
		} else {
			match++
		}
	} else {
		dst.RootCauseParsingError = nil
	}

	// try to unmarshal data into StqlParsingError
	err = json.Unmarshal(data, &dst.StqlParsingError)
	if err == nil {
		jsonStqlParsingError, _ := json.Marshal(dst.StqlParsingError)
		if string(jsonStqlParsingError) == "{}" { // empty struct
			dst.StqlParsingError = nil
		} else {
			match++
		}
	} else {
		dst.StqlParsingError = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ElasticSearchError = nil
		dst.EventNotFoundError = nil
		dst.RootCauseParsingError = nil
		dst.StqlParsingError = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(EventsError)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(EventsError)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventsError) MarshalJSON() ([]byte, error) {
	if src.ElasticSearchError != nil {
		return json.Marshal(&src.ElasticSearchError)
	}

	if src.EventNotFoundError != nil {
		return json.Marshal(&src.EventNotFoundError)
	}

	if src.RootCauseParsingError != nil {
		return json.Marshal(&src.RootCauseParsingError)
	}

	if src.StqlParsingError != nil {
		return json.Marshal(&src.StqlParsingError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventsError) GetActualInstance() (interface{}) {
	if obj.ElasticSearchError != nil {
		return obj.ElasticSearchError
	}

	if obj.EventNotFoundError != nil {
		return obj.EventNotFoundError
	}

	if obj.RootCauseParsingError != nil {
		return obj.RootCauseParsingError
	}

	if obj.StqlParsingError != nil {
		return obj.StqlParsingError
	}

	// all schemas are nil
	return nil
}

type NullableEventsError struct {
	value *EventsError
	isSet bool
}

func (v NullableEventsError) Get() *EventsError {
	return v.value
}

func (v *NullableEventsError) Set(val *EventsError) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsError) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsError(val *EventsError) *NullableEventsError {
	return &NullableEventsError{value: val, isSet: true}
}

func (v NullableEventsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


