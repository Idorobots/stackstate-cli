/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
	"fmt"
)

// EventsError - struct for EventsError
type EventsError struct {
	ElasticSearchError *ElasticSearchError
	EventNotFoundError *EventNotFoundError
	RootCauseParsingError *RootCauseParsingError
	StqlParsingError *StqlParsingError
}

// ElasticSearchErrorAsEventsError is a convenience function that returns ElasticSearchError wrapped in EventsError
func ElasticSearchErrorAsEventsError(v *ElasticSearchError) EventsError {
	return EventsError{ ElasticSearchError: v}
}

// EventNotFoundErrorAsEventsError is a convenience function that returns EventNotFoundError wrapped in EventsError
func EventNotFoundErrorAsEventsError(v *EventNotFoundError) EventsError {
	return EventsError{ EventNotFoundError: v}
}

// RootCauseParsingErrorAsEventsError is a convenience function that returns RootCauseParsingError wrapped in EventsError
func RootCauseParsingErrorAsEventsError(v *RootCauseParsingError) EventsError {
	return EventsError{ RootCauseParsingError: v}
}

// StqlParsingErrorAsEventsError is a convenience function that returns StqlParsingError wrapped in EventsError
func StqlParsingErrorAsEventsError(v *StqlParsingError) EventsError {
	return EventsError{ StqlParsingError: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *EventsError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ElasticSearchError'
	if jsonDict["_type"] == "ElasticSearchError" {
		// try to unmarshal JSON data into ElasticSearchError
		err = json.Unmarshal(data, &dst.ElasticSearchError)
		if err == nil {
			return nil // data stored in dst.ElasticSearchError, return on the first match
		} else {
			dst.ElasticSearchError = nil
			return fmt.Errorf("Failed to unmarshal EventsError as ElasticSearchError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'EventNotFoundError'
	if jsonDict["_type"] == "EventNotFoundError" {
		// try to unmarshal JSON data into EventNotFoundError
		err = json.Unmarshal(data, &dst.EventNotFoundError)
		if err == nil {
			return nil // data stored in dst.EventNotFoundError, return on the first match
		} else {
			dst.EventNotFoundError = nil
			return fmt.Errorf("Failed to unmarshal EventsError as EventNotFoundError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'RootCauseParsingError'
	if jsonDict["_type"] == "RootCauseParsingError" {
		// try to unmarshal JSON data into RootCauseParsingError
		err = json.Unmarshal(data, &dst.RootCauseParsingError)
		if err == nil {
			return nil // data stored in dst.RootCauseParsingError, return on the first match
		} else {
			dst.RootCauseParsingError = nil
			return fmt.Errorf("Failed to unmarshal EventsError as RootCauseParsingError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'StqlParsingError'
	if jsonDict["_type"] == "StqlParsingError" {
		// try to unmarshal JSON data into StqlParsingError
		err = json.Unmarshal(data, &dst.StqlParsingError)
		if err == nil {
			return nil // data stored in dst.StqlParsingError, return on the first match
		} else {
			dst.StqlParsingError = nil
			return fmt.Errorf("Failed to unmarshal EventsError as StqlParsingError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src EventsError) MarshalJSON() ([]byte, error) {
	if src.ElasticSearchError != nil {
		return json.Marshal(&src.ElasticSearchError)
	}

	if src.EventNotFoundError != nil {
		return json.Marshal(&src.EventNotFoundError)
	}

	if src.RootCauseParsingError != nil {
		return json.Marshal(&src.RootCauseParsingError)
	}

	if src.StqlParsingError != nil {
		return json.Marshal(&src.StqlParsingError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *EventsError) GetActualInstance() (interface{}) {
	if obj.ElasticSearchError != nil {
		return obj.ElasticSearchError
	}

	if obj.EventNotFoundError != nil {
		return obj.EventNotFoundError
	}

	if obj.RootCauseParsingError != nil {
		return obj.RootCauseParsingError
	}

	if obj.StqlParsingError != nil {
		return obj.StqlParsingError
	}

	// all schemas are nil
	return nil
}

type NullableEventsError struct {
	value *EventsError
	isSet bool
}

func (v NullableEventsError) Get() *EventsError {
	return v.value
}

func (v *NullableEventsError) Set(val *EventsError) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsError) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsError(val *EventsError) *NullableEventsError {
	return &NullableEventsError{value: val, isSet: true}
}

func (v NullableEventsError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


