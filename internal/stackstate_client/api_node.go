/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type NodeApi interface {

	/*
	NodeListTypes Node API

	list all node types

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiNodeListTypesRequest
	*/
	NodeListTypes(ctx _context.Context) ApiNodeListTypesRequest

	// NodeListTypesExecute executes the request
	//  @return NodeTypes
	NodeListTypesExecute(r ApiNodeListTypesRequest) (NodeTypes, *_nethttp.Response, error)
}


// NodeApiService NodeApi service
type NodeApiService service

type ApiNodeListTypesRequest struct {
	ctx _context.Context
	ApiService NodeApi
}


func (r ApiNodeListTypesRequest) Execute() (NodeTypes, *_nethttp.Response, error) {
	return r.ApiService.NodeListTypesExecute(r)
}

/*
NodeListTypes Node API

list all node types

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNodeListTypesRequest
*/
func (a *NodeApiService) NodeListTypes(ctx _context.Context) ApiNodeListTypesRequest {
	return ApiNodeListTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NodeTypes
func (a *NodeApiService) NodeListTypesExecute(r ApiNodeListTypesRequest) (NodeTypes, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  NodeTypes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NodeApiService.NodeListTypes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/node"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type NodeApiMock struct {
	NodeListTypesCalls *[]NodeListTypesCall
	NodeListTypesResponse NodeListTypesMockResponse
}	

func NewNodeApiMock() NodeApiMock {
	xNodeListTypesCalls := make([]NodeListTypesCall, 0)
	return NodeApiMock {
		NodeListTypesCalls: &xNodeListTypesCalls,
	}
}

type NodeListTypesMockResponse struct {
	Result NodeTypes
	Response *_nethttp.Response
	Error error
}

type NodeListTypesCall struct {
}


func (mock NodeApiMock) NodeListTypes(ctx _context.Context) ApiNodeListTypesRequest {
	return ApiNodeListTypesRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock NodeApiMock) NodeListTypesExecute(r ApiNodeListTypesRequest) (NodeTypes, *_nethttp.Response, error) {
	p := NodeListTypesCall {
	}
	*mock.NodeListTypesCalls = append(*mock.NodeListTypesCalls, p)
	return mock.NodeListTypesResponse.Result, mock.NodeListTypesResponse.Response, mock.NodeListTypesResponse.Error
}


