/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
)


type AnomalyFeedbackApi interface {

	/*
	CollectAnomalyFeedback Collect feedback on anomalies

	

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCollectAnomalyFeedbackRequest
	*/
	CollectAnomalyFeedback(ctx context.Context) ApiCollectAnomalyFeedbackRequest

	// CollectAnomalyFeedbackExecute executes the request
	//  @return []FeedbackWithContext
	CollectAnomalyFeedbackExecute(r ApiCollectAnomalyFeedbackRequest) ([]FeedbackWithContext, *http.Response, error)
}

// AnomalyFeedbackApiService AnomalyFeedbackApi service
type AnomalyFeedbackApiService service

type ApiCollectAnomalyFeedbackRequest struct {
	ctx context.Context
	ApiService AnomalyFeedbackApi
	startTime *int64
	endTime *int64
	history *int64
}

func (r ApiCollectAnomalyFeedbackRequest) StartTime(startTime int64) ApiCollectAnomalyFeedbackRequest {
	r.startTime = &startTime
	return r
}

func (r ApiCollectAnomalyFeedbackRequest) EndTime(endTime int64) ApiCollectAnomalyFeedbackRequest {
	r.endTime = &endTime
	return r
}

func (r ApiCollectAnomalyFeedbackRequest) History(history int64) ApiCollectAnomalyFeedbackRequest {
	r.history = &history
	return r
}

func (r ApiCollectAnomalyFeedbackRequest) Execute() ([]FeedbackWithContext, *http.Response, error) {
	return r.ApiService.CollectAnomalyFeedbackExecute(r)
}

/*
CollectAnomalyFeedback Collect feedback on anomalies



 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCollectAnomalyFeedbackRequest
*/
func (a *AnomalyFeedbackApiService) CollectAnomalyFeedback(ctx context.Context) ApiCollectAnomalyFeedbackRequest {
	return ApiCollectAnomalyFeedbackRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []FeedbackWithContext
func (a *AnomalyFeedbackApiService) CollectAnomalyFeedbackExecute(r ApiCollectAnomalyFeedbackRequest) ([]FeedbackWithContext, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []FeedbackWithContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnomalyFeedbackApiService.CollectAnomalyFeedback")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/anomaly-feedback"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}

	localVarQueryParams.Add("startTime", parameterToString(*r.startTime, ""))
	if r.endTime != nil {
		localVarQueryParams.Add("endTime", parameterToString(*r.endTime, ""))
	}
	if r.history != nil {
		localVarQueryParams.Add("history", parameterToString(*r.history, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type AnomalyFeedbackApiMock struct {
	CollectAnomalyFeedbackCalls *[]CollectAnomalyFeedbackCall
	CollectAnomalyFeedbackResponse CollectAnomalyFeedbackMockResponse
}	

func NewAnomalyFeedbackApiMock() AnomalyFeedbackApiMock {
	xCollectAnomalyFeedbackCalls := make([]CollectAnomalyFeedbackCall, 0)
	return AnomalyFeedbackApiMock {
		CollectAnomalyFeedbackCalls: &xCollectAnomalyFeedbackCalls,
	}
}

type CollectAnomalyFeedbackMockResponse struct {
	Result []FeedbackWithContext
	Response *http.Response
	Error error
}

type CollectAnomalyFeedbackCall struct {
	PstartTime *int64
	PendTime *int64
	Phistory *int64
}


func (mock AnomalyFeedbackApiMock) CollectAnomalyFeedback(ctx context.Context) ApiCollectAnomalyFeedbackRequest {
	return ApiCollectAnomalyFeedbackRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock AnomalyFeedbackApiMock) CollectAnomalyFeedbackExecute(r ApiCollectAnomalyFeedbackRequest) ([]FeedbackWithContext, *http.Response, error) {
	p := CollectAnomalyFeedbackCall {
			PstartTime: r.startTime,
			PendTime: r.endTime,
			Phistory: r.history,
	}
	*mock.CollectAnomalyFeedbackCalls = append(*mock.CollectAnomalyFeedbackCalls, p)
	return mock.CollectAnomalyFeedbackResponse.Result, mock.CollectAnomalyFeedbackResponse.Response, mock.CollectAnomalyFeedbackResponse.Error
}


