/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
)

// Linger please
var (
	_ _context.Context
)

type AnomalyFeedbackApi interface {

	/*
	AnomalyFeedbackGet 

	

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @return ApiAnomalyFeedbackGetRequest
	*/
	AnomalyFeedbackGet(ctx _context.Context) ApiAnomalyFeedbackGetRequest

	// AnomalyFeedbackGetExecute executes the request
	//  @return FeedbackWithContext
	AnomalyFeedbackGetExecute(r ApiAnomalyFeedbackGetRequest) (FeedbackWithContext, *_nethttp.Response, error)
}


// AnomalyFeedbackApiService AnomalyFeedbackApi service
type AnomalyFeedbackApiService service

type ApiAnomalyFeedbackGetRequest struct {
	ctx _context.Context
	ApiService AnomalyFeedbackApi
	startTime *int32
	endTime *int32
	history *int32
}

func (r ApiAnomalyFeedbackGetRequest) StartTime(startTime int32) ApiAnomalyFeedbackGetRequest {
	r.startTime = &startTime
	return r
}
func (r ApiAnomalyFeedbackGetRequest) EndTime(endTime int32) ApiAnomalyFeedbackGetRequest {
	r.endTime = &endTime
	return r
}
func (r ApiAnomalyFeedbackGetRequest) History(history int32) ApiAnomalyFeedbackGetRequest {
	r.history = &history
	return r
}

func (r ApiAnomalyFeedbackGetRequest) Execute() (FeedbackWithContext, *_nethttp.Response, error) {
	return r.ApiService.AnomalyFeedbackGetExecute(r)
}

/*
AnomalyFeedbackGet 



 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiAnomalyFeedbackGetRequest
*/
func (a *AnomalyFeedbackApiService) AnomalyFeedbackGet(ctx _context.Context) ApiAnomalyFeedbackGetRequest {
	return ApiAnomalyFeedbackGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return FeedbackWithContext
func (a *AnomalyFeedbackApiService) AnomalyFeedbackGetExecute(r ApiAnomalyFeedbackGetRequest) (FeedbackWithContext, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FeedbackWithContext
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AnomalyFeedbackApiService.AnomalyFeedbackGet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/anomaly-feedback"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.startTime == nil {
		return localVarReturnValue, nil, reportError("startTime is required and must be specified")
	}

	localVarQueryParams.Add("startTime", parameterToString(*r.startTime, ""))
	if r.endTime != nil {
		localVarQueryParams.Add("endTime", parameterToString(*r.endTime, ""))
	}
	if r.history != nil {
		localVarQueryParams.Add("history", parameterToString(*r.history, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v GenericErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type AnomalyFeedbackApiMock struct {
	AnomalyFeedbackGetCalls *[]AnomalyFeedbackGetCall
	AnomalyFeedbackGetResponse AnomalyFeedbackGetMockResponse
}	

func NewAnomalyFeedbackApiMock() AnomalyFeedbackApiMock {
	xAnomalyFeedbackGetCalls := make([]AnomalyFeedbackGetCall, 0)
	return AnomalyFeedbackApiMock {
		AnomalyFeedbackGetCalls: &xAnomalyFeedbackGetCalls,
	}
}

type AnomalyFeedbackGetMockResponse struct {
	Result FeedbackWithContext
	Response *_nethttp.Response
	Error error
}

type AnomalyFeedbackGetCall struct {
	PstartTime *int32
	PendTime *int32
	Phistory *int32
}


func (mock AnomalyFeedbackApiMock) AnomalyFeedbackGet(ctx _context.Context) ApiAnomalyFeedbackGetRequest {
	return ApiAnomalyFeedbackGetRequest{
		ApiService: mock,
		ctx: ctx,
	}
}

func (mock AnomalyFeedbackApiMock) AnomalyFeedbackGetExecute(r ApiAnomalyFeedbackGetRequest) (FeedbackWithContext, *_nethttp.Response, error) {
	p := AnomalyFeedbackGetCall {
			PstartTime: r.startTime,
			PendTime: r.endTime,
			Phistory: r.history,
	}
	*mock.AnomalyFeedbackGetCalls = append(*mock.AnomalyFeedbackGetCalls, p)
	return mock.AnomalyFeedbackGetResponse.Result, mock.AnomalyFeedbackGetResponse.Response, mock.AnomalyFeedbackGetResponse.Error
}


