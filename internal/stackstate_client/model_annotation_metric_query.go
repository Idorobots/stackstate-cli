/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// AnnotationMetricQuery struct for AnnotationMetricQuery
type AnnotationMetricQuery struct {
	Type string `json:"_type"`
	AggregationMethod DownsamplingMethod `json:"aggregationMethod"`
	BucketSize int64 `json:"bucketSize"`
	Conditions []TelemetryQueryCondition `json:"conditions"`
	DataSourceId int64 `json:"dataSourceId"`
	MetricField *string `json:"metricField,omitempty"`
	QueryHash string `json:"queryHash"`
}

// NewAnnotationMetricQuery instantiates a new AnnotationMetricQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnotationMetricQuery(type_ string, aggregationMethod DownsamplingMethod, bucketSize int64, conditions []TelemetryQueryCondition, dataSourceId int64, queryHash string) *AnnotationMetricQuery {
	this := AnnotationMetricQuery{}
	this.Type = type_
	this.AggregationMethod = aggregationMethod
	this.BucketSize = bucketSize
	this.Conditions = conditions
	this.DataSourceId = dataSourceId
	this.QueryHash = queryHash
	return &this
}

// NewAnnotationMetricQueryWithDefaults instantiates a new AnnotationMetricQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnotationMetricQueryWithDefaults() *AnnotationMetricQuery {
	this := AnnotationMetricQuery{}
	return &this
}

// GetType returns the Type field value
func (o *AnnotationMetricQuery) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *AnnotationMetricQuery) SetType(v string) {
	o.Type = v
}

// GetAggregationMethod returns the AggregationMethod field value
func (o *AnnotationMetricQuery) GetAggregationMethod() DownsamplingMethod {
	if o == nil {
		var ret DownsamplingMethod
		return ret
	}

	return o.AggregationMethod
}

// GetAggregationMethodOk returns a tuple with the AggregationMethod field value
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetAggregationMethodOk() (*DownsamplingMethod, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AggregationMethod, true
}

// SetAggregationMethod sets field value
func (o *AnnotationMetricQuery) SetAggregationMethod(v DownsamplingMethod) {
	o.AggregationMethod = v
}

// GetBucketSize returns the BucketSize field value
func (o *AnnotationMetricQuery) GetBucketSize() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.BucketSize
}

// GetBucketSizeOk returns a tuple with the BucketSize field value
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetBucketSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BucketSize, true
}

// SetBucketSize sets field value
func (o *AnnotationMetricQuery) SetBucketSize(v int64) {
	o.BucketSize = v
}

// GetConditions returns the Conditions field value
func (o *AnnotationMetricQuery) GetConditions() []TelemetryQueryCondition {
	if o == nil {
		var ret []TelemetryQueryCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetConditionsOk() (*[]TelemetryQueryCondition, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Conditions, true
}

// SetConditions sets field value
func (o *AnnotationMetricQuery) SetConditions(v []TelemetryQueryCondition) {
	o.Conditions = v
}

// GetDataSourceId returns the DataSourceId field value
func (o *AnnotationMetricQuery) GetDataSourceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DataSourceId
}

// GetDataSourceIdOk returns a tuple with the DataSourceId field value
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetDataSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.DataSourceId, true
}

// SetDataSourceId sets field value
func (o *AnnotationMetricQuery) SetDataSourceId(v int64) {
	o.DataSourceId = v
}

// GetMetricField returns the MetricField field value if set, zero value otherwise.
func (o *AnnotationMetricQuery) GetMetricField() string {
	if o == nil || o.MetricField == nil {
		var ret string
		return ret
	}
	return *o.MetricField
}

// GetMetricFieldOk returns a tuple with the MetricField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetMetricFieldOk() (*string, bool) {
	if o == nil || o.MetricField == nil {
		return nil, false
	}
	return o.MetricField, true
}

// HasMetricField returns a boolean if a field has been set.
func (o *AnnotationMetricQuery) HasMetricField() bool {
	if o != nil && o.MetricField != nil {
		return true
	}

	return false
}

// SetMetricField gets a reference to the given string and assigns it to the MetricField field.
func (o *AnnotationMetricQuery) SetMetricField(v string) {
	o.MetricField = &v
}

// GetQueryHash returns the QueryHash field value
func (o *AnnotationMetricQuery) GetQueryHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.QueryHash
}

// GetQueryHashOk returns a tuple with the QueryHash field value
// and a boolean to check if the value has been set.
func (o *AnnotationMetricQuery) GetQueryHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.QueryHash, true
}

// SetQueryHash sets field value
func (o *AnnotationMetricQuery) SetQueryHash(v string) {
	o.QueryHash = v
}

func (o AnnotationMetricQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["aggregationMethod"] = o.AggregationMethod
	}
	if true {
		toSerialize["bucketSize"] = o.BucketSize
	}
	if true {
		toSerialize["conditions"] = o.Conditions
	}
	if true {
		toSerialize["dataSourceId"] = o.DataSourceId
	}
	if o.MetricField != nil {
		toSerialize["metricField"] = o.MetricField
	}
	if true {
		toSerialize["queryHash"] = o.QueryHash
	}
	return json.Marshal(toSerialize)
}

type NullableAnnotationMetricQuery struct {
	value *AnnotationMetricQuery
	isSet bool
}

func (v NullableAnnotationMetricQuery) Get() *AnnotationMetricQuery {
	return v.value
}

func (v *NullableAnnotationMetricQuery) Set(val *AnnotationMetricQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationMetricQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationMetricQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationMetricQuery(val *AnnotationMetricQuery) *NullableAnnotationMetricQuery {
	return &NullableAnnotationMetricQuery{value: val, isSet: true}
}

func (v NullableAnnotationMetricQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationMetricQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


