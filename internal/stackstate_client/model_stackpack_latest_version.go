/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// StackpackLatestVersion struct for StackpackLatestVersion
type StackpackLatestVersion struct {
	Version *string `json:"version,omitempty"`
}

// NewStackpackLatestVersion instantiates a new StackpackLatestVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackpackLatestVersion() *StackpackLatestVersion {
	this := StackpackLatestVersion{}
	return &this
}

// NewStackpackLatestVersionWithDefaults instantiates a new StackpackLatestVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackpackLatestVersionWithDefaults() *StackpackLatestVersion {
	this := StackpackLatestVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *StackpackLatestVersion) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackpackLatestVersion) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *StackpackLatestVersion) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *StackpackLatestVersion) SetVersion(v string) {
	o.Version = &v
}

func (o StackpackLatestVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableStackpackLatestVersion struct {
	value *StackpackLatestVersion
	isSet bool
}

func (v NullableStackpackLatestVersion) Get() *StackpackLatestVersion {
	return v.value
}

func (v *NullableStackpackLatestVersion) Set(val *StackpackLatestVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableStackpackLatestVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableStackpackLatestVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackpackLatestVersion(val *StackpackLatestVersion) *NullableStackpackLatestVersion {
	return &NullableStackpackLatestVersion{value: val, isSet: true}
}

func (v NullableStackpackLatestVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackpackLatestVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


