/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// EventComponent struct for EventComponent
type EventComponent struct {
	Type string `json:"_type"`
	Id int64 `json:"id"`
	EventType *int64 `json:"eventType,omitempty"`
	Name string `json:"name"`
}

// NewEventComponent instantiates a new EventComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventComponent(type_ string, id int64, name string) *EventComponent {
	this := EventComponent{}
	this.Type = type_
	this.Id = id
	this.Name = name
	return &this
}

// NewEventComponentWithDefaults instantiates a new EventComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventComponentWithDefaults() *EventComponent {
	this := EventComponent{}
	return &this
}

// GetType returns the Type field value
func (o *EventComponent) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventComponent) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventComponent) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value
func (o *EventComponent) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EventComponent) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EventComponent) SetId(v int64) {
	o.Id = v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventComponent) GetEventType() int64 {
	if o == nil || o.EventType == nil {
		var ret int64
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventComponent) GetEventTypeOk() (*int64, bool) {
	if o == nil || o.EventType == nil {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventComponent) HasEventType() bool {
	if o != nil && o.EventType != nil {
		return true
	}

	return false
}

// SetEventType gets a reference to the given int64 and assigns it to the EventType field.
func (o *EventComponent) SetEventType(v int64) {
	o.EventType = &v
}

// GetName returns the Name field value
func (o *EventComponent) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventComponent) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventComponent) SetName(v string) {
	o.Name = v
}

func (o EventComponent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.EventType != nil {
		toSerialize["eventType"] = o.EventType
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableEventComponent struct {
	value *EventComponent
	isSet bool
}

func (v NullableEventComponent) Get() *EventComponent {
	return v.value
}

func (v *NullableEventComponent) Set(val *EventComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableEventComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableEventComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventComponent(val *EventComponent) *NullableEventComponent {
	return &NullableEventComponent{value: val, isSet: true}
}

func (v NullableEventComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


