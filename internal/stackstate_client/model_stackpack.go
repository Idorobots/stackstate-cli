/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// Stackpack struct for Stackpack
type Stackpack struct {
	Name *string `json:"name,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Version *string `json:"version,omitempty"`
	Configurations []StackpackConfigurationsInner `json:"configurations,omitempty"`
	LatestVersion *StackpackLatestVersion `json:"latestVersion,omitempty"`
	NextVersion *StackpackLatestVersion `json:"nextVersion,omitempty"`
}

// NewStackpack instantiates a new Stackpack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackpack() *Stackpack {
	this := Stackpack{}
	return &this
}

// NewStackpackWithDefaults instantiates a new Stackpack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackpackWithDefaults() *Stackpack {
	this := Stackpack{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Stackpack) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stackpack) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Stackpack) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Stackpack) SetName(v string) {
	o.Name = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Stackpack) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stackpack) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Stackpack) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Stackpack) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Stackpack) GetVersion() string {
	if o == nil || o.Version == nil {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stackpack) GetVersionOk() (*string, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Stackpack) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Stackpack) SetVersion(v string) {
	o.Version = &v
}

// GetConfigurations returns the Configurations field value if set, zero value otherwise.
func (o *Stackpack) GetConfigurations() []StackpackConfigurationsInner {
	if o == nil || o.Configurations == nil {
		var ret []StackpackConfigurationsInner
		return ret
	}
	return o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stackpack) GetConfigurationsOk() ([]StackpackConfigurationsInner, bool) {
	if o == nil || o.Configurations == nil {
		return nil, false
	}
	return o.Configurations, true
}

// HasConfigurations returns a boolean if a field has been set.
func (o *Stackpack) HasConfigurations() bool {
	if o != nil && o.Configurations != nil {
		return true
	}

	return false
}

// SetConfigurations gets a reference to the given []StackpackConfigurationsInner and assigns it to the Configurations field.
func (o *Stackpack) SetConfigurations(v []StackpackConfigurationsInner) {
	o.Configurations = v
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise.
func (o *Stackpack) GetLatestVersion() StackpackLatestVersion {
	if o == nil || o.LatestVersion == nil {
		var ret StackpackLatestVersion
		return ret
	}
	return *o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stackpack) GetLatestVersionOk() (*StackpackLatestVersion, bool) {
	if o == nil || o.LatestVersion == nil {
		return nil, false
	}
	return o.LatestVersion, true
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *Stackpack) HasLatestVersion() bool {
	if o != nil && o.LatestVersion != nil {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given StackpackLatestVersion and assigns it to the LatestVersion field.
func (o *Stackpack) SetLatestVersion(v StackpackLatestVersion) {
	o.LatestVersion = &v
}

// GetNextVersion returns the NextVersion field value if set, zero value otherwise.
func (o *Stackpack) GetNextVersion() StackpackLatestVersion {
	if o == nil || o.NextVersion == nil {
		var ret StackpackLatestVersion
		return ret
	}
	return *o.NextVersion
}

// GetNextVersionOk returns a tuple with the NextVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stackpack) GetNextVersionOk() (*StackpackLatestVersion, bool) {
	if o == nil || o.NextVersion == nil {
		return nil, false
	}
	return o.NextVersion, true
}

// HasNextVersion returns a boolean if a field has been set.
func (o *Stackpack) HasNextVersion() bool {
	if o != nil && o.NextVersion != nil {
		return true
	}

	return false
}

// SetNextVersion gets a reference to the given StackpackLatestVersion and assigns it to the NextVersion field.
func (o *Stackpack) SetNextVersion(v StackpackLatestVersion) {
	o.NextVersion = &v
}

func (o Stackpack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Configurations != nil {
		toSerialize["configurations"] = o.Configurations
	}
	if o.LatestVersion != nil {
		toSerialize["latestVersion"] = o.LatestVersion
	}
	if o.NextVersion != nil {
		toSerialize["nextVersion"] = o.NextVersion
	}
	return json.Marshal(toSerialize)
}

type NullableStackpack struct {
	value *Stackpack
	isSet bool
}

func (v NullableStackpack) Get() *Stackpack {
	return v.value
}

func (v *NullableStackpack) Set(val *Stackpack) {
	v.value = val
	v.isSet = true
}

func (v NullableStackpack) IsSet() bool {
	return v.isSet
}

func (v *NullableStackpack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackpack(val *Stackpack) *NullableStackpack {
	return &NullableStackpack{value: val, isSet: true}
}

func (v NullableStackpack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackpack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


