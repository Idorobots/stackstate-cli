/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
	"fmt"
)

// GenericServerError - struct for GenericServerError
type GenericServerError struct {
	InternalServerError *InternalServerError
}

// InternalServerErrorAsGenericServerError is a convenience function that returns InternalServerError wrapped in GenericServerError
func InternalServerErrorAsGenericServerError(v *InternalServerError) GenericServerError {
	return GenericServerError{ InternalServerError: v}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GenericServerError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'InternalServerError'
	if jsonDict["_type"] == "InternalServerError" {
		// try to unmarshal JSON data into InternalServerError
		err = json.Unmarshal(data, &dst.InternalServerError)
		if err == nil {
			return nil // data stored in dst.InternalServerError, return on the first match
		} else {
			dst.InternalServerError = nil
			return fmt.Errorf("Failed to unmarshal GenericServerError as InternalServerError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GenericServerError) MarshalJSON() ([]byte, error) {
	if src.InternalServerError != nil {
		return json.Marshal(&src.InternalServerError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GenericServerError) GetActualInstance() (interface{}) {
	if obj.InternalServerError != nil {
		return obj.InternalServerError
	}

	// all schemas are nil
	return nil
}

type NullableGenericServerError struct {
	value *GenericServerError
	isSet bool
}

func (v NullableGenericServerError) Get() *GenericServerError {
	return v.value
}

func (v *NullableGenericServerError) Set(val *GenericServerError) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericServerError) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericServerError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericServerError(val *GenericServerError) *NullableGenericServerError {
	return &NullableGenericServerError{value: val, isSet: true}
}

func (v NullableGenericServerError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericServerError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


