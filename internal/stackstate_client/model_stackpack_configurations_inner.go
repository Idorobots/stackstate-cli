/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// StackpackConfigurationsInner struct for StackpackConfigurationsInner
type StackpackConfigurationsInner struct {
	StackPackVersion *string `json:"stackPackVersion,omitempty"`
}

// NewStackpackConfigurationsInner instantiates a new StackpackConfigurationsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackpackConfigurationsInner() *StackpackConfigurationsInner {
	this := StackpackConfigurationsInner{}
	return &this
}

// NewStackpackConfigurationsInnerWithDefaults instantiates a new StackpackConfigurationsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackpackConfigurationsInnerWithDefaults() *StackpackConfigurationsInner {
	this := StackpackConfigurationsInner{}
	return &this
}

// GetStackPackVersion returns the StackPackVersion field value if set, zero value otherwise.
func (o *StackpackConfigurationsInner) GetStackPackVersion() string {
	if o == nil || o.StackPackVersion == nil {
		var ret string
		return ret
	}
	return *o.StackPackVersion
}

// GetStackPackVersionOk returns a tuple with the StackPackVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackpackConfigurationsInner) GetStackPackVersionOk() (*string, bool) {
	if o == nil || o.StackPackVersion == nil {
		return nil, false
	}
	return o.StackPackVersion, true
}

// HasStackPackVersion returns a boolean if a field has been set.
func (o *StackpackConfigurationsInner) HasStackPackVersion() bool {
	if o != nil && o.StackPackVersion != nil {
		return true
	}

	return false
}

// SetStackPackVersion gets a reference to the given string and assigns it to the StackPackVersion field.
func (o *StackpackConfigurationsInner) SetStackPackVersion(v string) {
	o.StackPackVersion = &v
}

func (o StackpackConfigurationsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StackPackVersion != nil {
		toSerialize["stackPackVersion"] = o.StackPackVersion
	}
	return json.Marshal(toSerialize)
}

type NullableStackpackConfigurationsInner struct {
	value *StackpackConfigurationsInner
	isSet bool
}

func (v NullableStackpackConfigurationsInner) Get() *StackpackConfigurationsInner {
	return v.value
}

func (v *NullableStackpackConfigurationsInner) Set(val *StackpackConfigurationsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableStackpackConfigurationsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableStackpackConfigurationsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackpackConfigurationsInner(val *StackpackConfigurationsInner) *NullableStackpackConfigurationsInner {
	return &NullableStackpackConfigurationsInner{value: val, isSet: true}
}

func (v NullableStackpackConfigurationsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackpackConfigurationsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


