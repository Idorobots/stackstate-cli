openapi: 3.0.3
info:
  contact:
    email: info@stackstate.com
    name: StackState
    url: https://stackstate.com
  description: StackState's API specification
  license:
    name: Proprietary
    url: https://stackstate.com
  title: StackState API
  version: 0.0.1
externalDocs:
  description: Documentation
  url: https://docs.stackstate.com/
servers:
- url: /
security:
- ApiToken: []
paths:
  /import:
    post:
      description: Import StackState Templated JSON (STJ) setting nodes.
      operationId: importSettings
      requestBody:
        content:
          plain/text:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: object
                type: array
          description: The full description of all imported nodes.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Failure to parse the STJ.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Import settings
      tags:
      - import
  /node:
    get:
      description: list all node types
      operationId: nodeListTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeTypes'
          description: listing of all node types
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node API
      tags:
      - node
  /node/{nodeType}:
    get:
      description: list all nodes of that type
      operationId: typeList
      parameters:
      - allowReserved: true
        in: path
        name: nodeType
        required: true
        schema:
          type: string
      - allowReserved: true
        in: query
        name: namespace
        required: false
        schema:
          type: string
      - allowReserved: true
        in: query
        name: ownedBy
        required: false
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeListTypes'
          description: list of mentioned type nodes
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Node type API
      tags:
      - node
  /monitors:
    get:
      description: List all available monitor in the system
      operationId: getAllMonitors
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorList'
          description: List of all available monitors
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: List monitors
      tags:
      - monitor
    post:
      description: Creates monitor
      operationId: createMonitor
      requestBody:
        $ref: '#/components/requestBodies/create'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorInvalidIntervalError'
          description: Error response if an unsupported monitor interval was provided
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Create a monitor
      tags:
      - monitor
  /monitor/{monitorId}:
    delete:
      description: Deletes existing monitor
      operationId: deleteMonitor
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorId'
      responses:
        "200":
          description: Return ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Delete a monitor
      tags:
      - monitor
    get:
      description: Returns a monitor full representation
      operationId: getMonitor
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get a monitor
      tags:
      - monitor
    put:
      description: Updates monitor using optional attributes
      operationId: updateMonitor
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorId'
      requestBody:
        $ref: '#/components/requestBodies/update'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorInvalidIntervalError'
          description: Error response if an unsupported monitor interval was provided
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Update a monitor
      tags:
      - monitor
  /monitor/{monitorId}/run:
    post:
      description: Runs a monitor once
      operationId: runMonitor
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRunResult'
          description: Full representation of the result of a monitor run
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Run a monitor
      tags:
      - monitor
  /monitor/{monitorId}/dryRun:
    post:
      description: Performs a dry run of a monitor without topology state modification
      operationId: dryRunMonitor
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRunResult'
          description: Full representation of the result of a monitor run
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Dry run a monitor and show a result
      tags:
      - monitor
  /monitorUrn/{monitorUrnId}:
    delete:
      description: Deletes existing monitor
      operationId: deleteMonitorByURN
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorUrnId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorUrnId'
      responses:
        "200":
          description: Return ok
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorIdentifierNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Delete a monitor
      tags:
      - monitorUrn
    get:
      description: Returns a monitor full representation
      operationId: getMonitorByURN
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorUrnId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorUrnId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorIdentifierNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Get a monitor
      tags:
      - monitorUrn
    put:
      description: Updates monitor using optional attributes
      operationId: updateMonitorByURN
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorUrnId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorUrnId'
      requestBody:
        $ref: '#/components/requestBodies/update'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Monitor'
          description: Full representation of a monitor
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorInvalidIntervalError'
          description: Error response if an unsupported monitor interval was provided
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorIdentifierNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Update a monitor
      tags:
      - monitorUrn
  /monitorUrn/{monitorUrnId}/run:
    post:
      description: Runs a monitor once
      operationId: runMonitorByURN
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorUrnId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorUrnId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRunResult'
          description: Full representation of the result of a monitor run
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorIdentifierNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Run a monitor
      tags:
      - monitorUrn
  /monitorUrn/{monitorUrnId}/dryRun:
    post:
      description: Performs a dry run of a monitor without topology state modification
      operationId: dryRunMonitorByURN
      parameters:
      - description: The identifier of a monitor
        in: path
        name: monitorUrnId
        required: true
        schema:
          $ref: '#/components/schemas/MonitorUrnId'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorRunResult'
          description: Full representation of the result of a monitor run
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorIdentifierNotFoundError'
          description: monitor was not found in the database
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MonitorApiError'
          description: container for all error response
      summary: Dry run a monitor and show a result
      tags:
      - monitorUrn
  /user/profile:
    get:
      description: Get current user profile.
      operationId: getCurrentUserProfile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User Profile
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
          description: Get User Profile Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get current user profile
      tags:
      - userProfile
    put:
      description: Save current user profile.
      operationId: saveCurrentUserProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfile'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
          description: User Profile
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileSaveError'
          description: Save User Profile Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Save current user profile
      tags:
      - userProfile
  /user/profile/tokens:
    get:
      description: Get all API token of the logged-in user.
      operationId: getCurrentUserApiTokens
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ApiToken'
                type: array
          description: Api Token
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotFoundError'
          description: ""
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get current user's API tokens
      tags:
      - apiToken
  /events:
    post:
      description: Gets you a list of events that exist for topology and time selections.
      operationId: getEvents
      requestBody:
        $ref: '#/components/requestBodies/EventListBody'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventItemsWithTotal'
          description: Event API
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get Events Topology Overflow Error Validation Error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get events
      tags:
      - event
  /events/{eventId}:
    get:
      description: Retrieves a specific event by its identifier.
      operationId: getEvent
      parameters:
      - description: The Identifier of an event.
        in: path
        name: eventId
        required: true
        schema:
          $ref: '#/components/schemas/EventId'
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyEvent'
          description: Event
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get Event Validation Error
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventNotFoundError'
          description: Error when retrieving an event
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get single event
      tags:
      - event
  /eventTypes:
    get:
      description: Get a list of event types for a certain STQL query.
      operationId: getEventTypes
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: rootCauseMode
        schema:
          $ref: '#/components/schemas/RootCauseMode'
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - explode: false
        in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        explode: false
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: match
        required: false
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get events topology overflow error, validation error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event types
      tags:
      - event
  /eventSources:
    get:
      description: Get a list of event sources.
      operationId: getEventSources
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: rootCauseMode
        schema:
          $ref: '#/components/schemas/RootCauseMode'
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - explode: false
        in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        explode: false
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: match
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get events topology overflow error, validation error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event sources
      tags:
      - event
  /eventTags:
    get:
      description: Gets a list of tags that exist in a list of events.
      operationId: getEventTags
      parameters:
      - in: query
        name: startTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: endTimestampMs
        required: true
        schema:
          format: instant
          type: integer
      - in: query
        name: topologyQuery
        required: true
        schema:
          type: string
      - in: query
        name: rootCauseMode
        schema:
          $ref: '#/components/schemas/RootCauseMode'
      - in: query
        name: playHeadTimestampMs
        schema:
          format: instant
          type: integer
      - explode: false
        in: query
        name: eventTypes
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: limit
        required: true
        schema:
          type: integer
      - description: The category labels of an event.
        explode: false
        in: query
        name: eventCategories
        required: false
        schema:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventSources
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - explode: false
        in: query
        name: eventTags
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - in: query
        name: match
        schema:
          default: ""
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StringItemsWithTotal'
          description: Event field suggestions
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestError'
          description: Get events topology overflow error, validation error
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get event tags
      tags:
      - event
  /synchronization/health/streams:
    get:
      description: Status overview of the health synchronization streams.
      operationId: getHealthSynchronizationStreamsOverview
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StreamList'
          description: List of existing health streams
      summary: List health sync streams
      tags:
      - healthSynchronization
  /synchronization/health/stream/{healthStreamUrn}/status:
    get:
      description: Status overview of a single health synchronization stream
      operationId: getHealthSynchronizationStreamStatus
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamStatus'
          description: Status data
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Get health sync stream status
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/stream/{healthStreamUrn}/clearErrors:
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    post:
      description: Clear all errors for a stream and its sub-streams.
      operationId: postHealthSynchronizationStreamClearErrors
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Clear health sync stream errors
      tags:
      - healthSynchronization
  /synchronization/health/stream/{healthStreamUrn}:
    delete:
      description: Delete a health synchronization stream. Deletion will not be immediate.
      operationId: deleteHealthSynchronizationStream
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: Delete health sync stream
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/stream/{healthStreamUrn}/substreams:
    get:
      description: Overview of all sub-streams in a certain health stream.
      operationId: getHealthSynchronizationSubStreamOverview
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubStreamList'
          description: List of substreams
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStreamNotFound'
          description: Error when retrieving health stream
      summary: List health sync sub-streams
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/stream/{healthStreamUrn}/topologyMatches:
    get:
      description: Overview of check-states matched to topology on the main stream.
      operationId: getHealthSynchronizationStreamTopologyMatches
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyMatchResult'
          description: Topology matches
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: List health sync stream check-states
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
  /synchronization/health/stream/{healthStreamUrn}/substream/{healthSyncSubStreamId}/status:
    get:
      description: Status overview of a single health synchronization sub stream
      operationId: getHealthSynchronizationSubStreamStatus
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      - description: Health synchronization sub stream id.
        in: path
        name: healthSyncSubStreamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamStatus'
          description: Sub stream status
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: Get health sync sub-stream status
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    - description: Health synchronization sub stream id.
      in: path
      name: healthSyncSubStreamId
      required: true
      schema:
        type: string
  /synchronization/health/stream/{healthStreamUrn}/substream/{healthSyncSubStreamId}/topologyMatches:
    get:
      description: Overview of check-states matched to topology on the main stream.
      operationId: getHealthSynchronizationSubStreamTopologyMatches
      parameters:
      - description: Urn of the health stream.
        in: path
        name: healthStreamUrn
        required: true
        schema:
          type: string
      - description: Health synchronization sub stream id.
        in: path
        name: healthSyncSubStreamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyMatchResult'
          description: Topology matches for a specified sub stream
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidUrn'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthSubStreamError'
          description: Error when retrieving health sub stream
      summary: List health sync sub-stream check-states
      tags:
      - healthSynchronization
    parameters:
    - description: Urn of the health stream.
      in: path
      name: healthStreamUrn
      required: true
      schema:
        type: string
    - description: Health synchronization sub stream id.
      in: path
      name: healthSyncSubStreamId
      required: true
      schema:
        type: string
  /synchronization/topology/streams:
    get:
      description: Overview of the topology synchronization streams
      operationId: getTopologySynchronizationStreams
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamList'
          description: List of existing topology streams
      summary: Overview of the topology synchronization streams
      tags:
      - topologySynchronization
  /synchronization/topology/streams/sync:
    get:
      description: Overview of a specific Topology Stream, queried by node id or sync
        identifier
      operationId: getTopologySynchronizationStreamById
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      - allowReserved: false
        in: query
        name: identifierType
        required: true
        schema:
          $ref: '#/components/schemas/IdentifierType'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamListItemWithErrorDetails'
          description: A specific topology stream
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: Overview of a specific Topology Stream, queried by node id or sync
        identifier
      tags:
      - topologySynchronization
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
    - allowReserved: false
      in: query
      name: identifierType
      required: true
      schema:
        $ref: '#/components/schemas/IdentifierType'
  /synchronization/topology/streams/status:
    get:
      description: Metrics of a specific Topology Stream, queried by node id
      operationId: getTopologySynchronizationStreamStatusById
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologyStreamMetrics'
          description: A specific topology stream metrics
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: Metrics of a specific Topology Stream, queried by node id
      tags:
      - topologySynchronization
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
  /synchronization/topology/streams/clearErrors:
    parameters:
    - allowReserved: true
      in: query
      name: identifier
      required: true
      schema:
        type: string
    - allowReserved: false
      in: query
      name: identifierType
      required: true
      schema:
        $ref: '#/components/schemas/IdentifierType'
    post:
      description: Clear all the errors related to a specific sync
      operationId: postTopologySynchronizationStreamClearErrors
      parameters:
      - allowReserved: true
        in: query
        name: identifier
        required: true
        schema:
          type: string
      - allowReserved: false
        in: query
        name: identifierType
        required: true
        schema:
          $ref: '#/components/schemas/IdentifierType'
      responses:
        "204":
          description: Return ok (but no content)
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidSyncIdentifier'
          description: Bad request when specifying an invalid identifier
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopologySyncError'
          description: Sync with given identifier not found
      summary: Clear all the errors related to a specific sync
      tags:
      - topologySynchronization
  /script/execute:
    post:
      description: Execute a StackState Scripting Language or Template Language script
        with arbitrary arguments.
      operationId: scriptExecute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecuteScriptRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptResponse'
          description: Result of executing the script.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptError'
          description: Error occurred while executing script.
        "408":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecuteScriptTimeoutError'
          description: Script timed out.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Execute script
      tags:
      - scripting
  /server/info:
    get:
      description: Get information of the StackState information, such as version,
        deployment mode, etc.
      operationId: serverInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServerInfo'
          description: Server information
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericErrorsResponse'
          description: Error when handling the request on the server side.
      summary: Get server info
      tags:
      - server
components:
  requestBodies:
    create:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateMonitor'
      required: true
    update:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UpdateMonitor'
      required: true
    EventListBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EventListRequest'
      required: true
  schemas:
    GenericErrorsResponse:
      properties:
        _type:
          enum:
          - ErrorsResponse
          type: string
        trackingKey:
          type: string
        serverTimestamp:
          format: int64
          type: integer
        errors:
          items:
            $ref: '#/components/schemas/GenericApiError'
          type: array
      required:
      - errors
      - serverTimestamp
      - trackingKey
      type: object
    GenericApiError:
      properties:
        _type:
          enum:
          - InternalError
          type: string
        message:
          type: string
        errorCode:
          format: int64
          type: integer
      required:
      - _type
      - message
      type: object
    NodeTypes:
      example:
        nodeTypes:
        - typeName: typeName
          description: description
        - typeName: typeName
          description: description
      properties:
        nodeTypes:
          items:
            $ref: '#/components/schemas/NodeTypes_nodeTypes'
          type: array
      required:
      - nodeTypes
      type: object
    NodeListTypes:
      items:
        $ref: '#/components/schemas/NodeListType'
      type: array
    NodeListType:
      example:
        identifier: identifier
        lastUpdateTimestamp: 0
        typeName: typeName
        name: name
        description: description
        isSettingsNode: true
        id: ""
        manual: true
        ownedBy: ownedBy
      properties:
        typeName:
          type: string
        id:
          type: int64
        lastUpdateTimestamp:
          format: int64
          type: integer
        identifier:
          type: string
        name:
          type: string
        description:
          type: string
        ownedBy:
          type: string
        manual:
          type: boolean
        isSettingsNode:
          type: boolean
      required:
      - description
      - id
      - identifier
      - isSettingsNode
      - lastUpdateTimestamp
      - manual
      - name
      - ownedBy
      - typeName
      type: object
    MonitorList:
      example:
        monitors:
        - topologyMapping: topologyMapping
          identifier: identifier
          functionId: 6
          remediationHint: remediationHint
          name: name
          description: description
          id: 0
          parameters: '{}'
          intervalSeconds: 1
        - topologyMapping: topologyMapping
          identifier: identifier
          functionId: 6
          remediationHint: remediationHint
          name: name
          description: description
          id: 0
          parameters: '{}'
          intervalSeconds: 1
      properties:
        monitors:
          items:
            $ref: '#/components/schemas/Monitor'
          type: array
      required:
      - monitors
      type: object
    Monitor:
      example:
        topologyMapping: topologyMapping
        identifier: identifier
        functionId: 6
        remediationHint: remediationHint
        name: name
        description: description
        id: 0
        parameters: '{}'
        intervalSeconds: 1
      properties:
        id:
          format: int64
          type: integer
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        functionId:
          format: int64
          type: integer
        parameters:
          type: object
        remediationHint:
          type: string
        topologyMapping:
          type: string
        intervalSeconds:
          type: integer
      required:
      - functionId
      - id
      - intervalSeconds
      - name
      - parameters
      - topologyMapping
      type: object
    MonitorId:
      format: int64
      type: integer
    MonitorApiError:
      properties:
        statusCode:
          type: string
        message:
          type: string
        monitorId:
          type: string
        monitorIdType:
          enum:
          - id
          - urn
          type: string
      required:
      - message
      - statusCode
      type: object
    CreateMonitor:
      example:
        topologyMapping: topologyMapping
        identifier: identifier
        functionId: 0
        remediationHint: remediationHint
        name: name
        description: description
        parameters: '{}'
        intervalSeconds: 6
      properties:
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        functionId:
          format: int64
          type: integer
        parameters:
          type: object
        remediationHint:
          type: string
        topologyMapping:
          description: Placeholder for the topology element identifier
          type: string
        intervalSeconds:
          type: integer
      required:
      - functionId
      - identifier
      - intervalSeconds
      - name
      - parameters
      - topologyMapping
      type: object
    MonitorInterval:
      type: integer
    MonitorInvalidIntervalError:
      properties:
        _type:
          enum:
          - MonitorInvalidIntervalError
          type: string
        intervalSeconds:
          type: integer
      required:
      - _type
      - intervalSeconds
      type: object
    MonitorNotFoundError:
      properties:
        _type:
          enum:
          - MonitorNotFoundError
          type: string
        monitorId:
          format: int64
          type: integer
      required:
      - _type
      - monitorId
      type: object
    UpdateMonitor:
      example:
        topologyMapping: topologyMapping
        identifier: identifier
        functionId: 0
        remediationHint: remediationHint
        name: name
        description: description
        parameters: '{}'
        intervalSeconds: 6
      properties:
        name:
          type: string
        identifier:
          type: string
        description:
          type: string
        functionId:
          format: int64
          type: integer
        parameters:
          type: object
        remediationHint:
          type: string
        topologyMapping:
          type: string
        intervalSeconds:
          type: integer
      type: object
    MonitorRunResult:
      example:
        result: '{}'
      properties:
        result:
          type: object
      required:
      - result
      type: object
    MonitorUrnId:
      type: string
    MonitorIdentifierNotFoundError:
      properties:
        _type:
          enum:
          - MonitorIdentifierNotFoundError
          type: string
        monitorIdentifier:
          type: string
      required:
      - _type
      - monitorIdentifier
      type: object
    UserNotFoundError:
      properties:
        _type:
          enum:
          - UserNotFoundError
          type: string
        name:
          type: string
      required:
      - _type
      - name
      type: object
    UserProfileSaveError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/UserNameMismatchError'
      - $ref: '#/components/schemas/UserNotFoundError'
      - $ref: '#/components/schemas/UserNotLoggedInError'
      required:
      - _type
    UserNameMismatchError:
      properties:
        _type:
          enum:
          - UserNameMismatchError
          type: string
        name:
          type: string
      required:
      - _type
      - name
      type: object
    UserNotLoggedInError:
      properties:
        _type:
          enum:
          - UserNotLoggedInError
          type: string
      required:
      - _type
      type: object
    UserProfile:
      example:
        identifier: identifier
        lastUpdateTimestamp: 6
        starredViews:
        - 1
        - 1
        name: name
        description: description
        id: 0
        ownedBy: ownedBy
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        identifier:
          type: string
        starredViews:
          items:
            format: int64
            type: integer
          type: array
        ownedBy:
          type: string
      required:
      - name
      type: object
    ApiToken:
      example:
        lastUpdateTimestamp: 6
        name: name
        description: description
        id: 0
        token: token
      properties:
        id:
          format: int64
          readOnly: true
          type: integer
        lastUpdateTimestamp:
          format: int64
          readOnly: true
          type: integer
        name:
          type: string
        description:
          type: string
        token:
          type: string
      required:
      - name
      - token
      type: object
    RequestError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/TopologyOverflowError'
      - $ref: '#/components/schemas/RequestValidationError'
      required:
      - _type
    TopologyOverflowError:
      properties:
        _type:
          enum:
          - TopologyOverflowError
          type: string
        maxSize:
          type: integer
      required:
      - _type
      - maxSize
      type: object
    RequestValidationError:
      properties:
        _type:
          enum:
          - RequestValidationError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    EventListRequest:
      example:
        cursor:
          lastEventTimestampMs: 5
          lastEventId: lastEventId
        eventSources:
        - eventSources
        - eventSources
        limit: 1
        startTimestampMs: 0
        playHeadTimestampMs: 5
        eventCategories:
        - null
        - null
        topologyQuery: topologyQuery
        eventTypes:
        - eventTypes
        - eventTypes
        eventTags:
        - eventTags
        - eventTags
        endTimestampMs: 6
      properties:
        startTimestampMs:
          format: instant
          type: integer
        endTimestampMs:
          format: instant
          type: integer
        topologyQuery:
          type: string
        limit:
          type: integer
        playHeadTimestampMs:
          format: instant
          type: integer
        rootCauseMode:
          $ref: '#/components/schemas/RootCauseMode'
        eventTypes:
          items:
            type: string
          type: array
        eventTags:
          items:
            type: string
          type: array
        eventCategories:
          items:
            $ref: '#/components/schemas/EventCategory'
          type: array
        eventSources:
          items:
            type: string
          type: array
        cursor:
          $ref: '#/components/schemas/EventCursor'
      required:
      - endTimestampMs
      - limit
      - startTimestampMs
      - topologyQuery
      type: object
    RootCauseMode:
      enum:
      - no-cause
      - cause-only
      - full-cause-tree
      type: string
    EventCategory:
      enum:
      - Changes
      - Alerts
      - Anomalies
      - Activities
      - Others
      type: string
    EventCursor:
      example:
        lastEventTimestampMs: 5
        lastEventId: lastEventId
      properties:
        lastEventTimestampMs:
          format: int64
          type: integer
        lastEventId:
          type: string
      required:
      - lastEventId
      - lastEventTimestampMs
      type: object
    EventItemsWithTotal:
      example:
        total: 5
        items:
        - identifier: identifier
          sourceIdentifier: sourceIdentifier
          data: '{}'
          description: description
          source: source
          eventType: eventType
          processedTime: 1
          tags:
          - value: value
            key: key
          - value: value
            key: key
          elements:
          - null
          - null
          name: name
          eventTime: 6
          elementIdentifiers:
          - elementIdentifiers
          - elementIdentifiers
          sourceLinks:
          - title: title
            url: url
          - title: title
            url: url
          causingEvents:
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 0
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 0
        - identifier: identifier
          sourceIdentifier: sourceIdentifier
          data: '{}'
          description: description
          source: source
          eventType: eventType
          processedTime: 1
          tags:
          - value: value
            key: key
          - value: value
            key: key
          elements:
          - null
          - null
          name: name
          eventTime: 6
          elementIdentifiers:
          - elementIdentifiers
          - elementIdentifiers
          sourceLinks:
          - title: title
            url: url
          - title: title
            url: url
          causingEvents:
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 0
          - eventId: eventId
            eventType: eventType
            title: title
            eventTimestamp: 0
      properties:
        items:
          items:
            $ref: '#/components/schemas/TopologyEvent'
          type: array
        total:
          format: int64
          type: integer
      required:
      - items
      - total
      type: object
    TopologyEvent:
      example:
        identifier: identifier
        sourceIdentifier: sourceIdentifier
        data: '{}'
        description: description
        source: source
        eventType: eventType
        processedTime: 1
        tags:
        - value: value
          key: key
        - value: value
          key: key
        elements:
        - null
        - null
        name: name
        eventTime: 6
        elementIdentifiers:
        - elementIdentifiers
        - elementIdentifiers
        sourceLinks:
        - title: title
          url: url
        - title: title
          url: url
        causingEvents:
        - eventId: eventId
          eventType: eventType
          title: title
          eventTimestamp: 0
        - eventId: eventId
          eventType: eventType
          title: title
          eventTimestamp: 0
      properties:
        identifier:
          type: string
        sourceIdentifier:
          type: string
        elementIdentifiers:
          items:
            type: string
          type: array
        elements:
          items:
            $ref: '#/components/schemas/EventElement'
          type: array
        causingEvents:
          items:
            $ref: '#/components/schemas/EventRef'
          type: array
        source:
          type: string
        category:
          $ref: '#/components/schemas/EventCategory'
        description:
          type: string
        name:
          type: string
        sourceLinks:
          items:
            $ref: '#/components/schemas/SourceLink'
          type: array
        data:
          type: object
        eventType:
          type: string
        eventTime:
          format: int64
          type: integer
        processedTime:
          format: int64
          type: integer
        tags:
          items:
            $ref: '#/components/schemas/EventTag'
          type: array
      required:
      - category
      - causingEvents
      - data
      - elementIdentifiers
      - elements
      - eventTime
      - eventType
      - identifier
      - name
      - processedTime
      - source
      - sourceLinks
      - tags
      type: object
    EventElement:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/EventComponent'
      - $ref: '#/components/schemas/EventRelation'
    EventComponent:
      properties:
        _type:
          enum:
          - EventComponent
          type: string
        id:
          format: int64
          type: integer
        componentTypeId:
          format: int64
          type: integer
        name:
          type: string
      required:
      - _type
      - componentTypeId
      - id
      - name
      type: object
    EventRelation:
      properties:
        _type:
          enum:
          - EventRelation
          type: string
        id:
          format: int64
          type: integer
        relationTypeId:
          format: int64
          type: integer
        name:
          type: string
        source:
          $ref: '#/components/schemas/EventComponent'
        target:
          $ref: '#/components/schemas/EventComponent'
        dependencyDirection:
          $ref: '#/components/schemas/DependencyDirection'
      required:
      - _type
      - dependencyDirection
      - id
      - relationTypeId
      - source
      - target
      type: object
    DependencyDirection:
      enum:
      - one-way
      - none
      - both
      type: string
    EventRef:
      example:
        eventId: eventId
        eventType: eventType
        title: title
        eventTimestamp: 0
      properties:
        title:
          type: string
        eventId:
          type: string
        eventTimestamp:
          format: int64
          type: integer
        eventType:
          type: string
      required:
      - _type
      - eventId
      - eventTimestamp
      - eventType
      - title
      type: object
    SourceLink:
      example:
        title: title
        url: url
      properties:
        title:
          type: string
        url:
          type: string
      required:
      - title
      - url
      type: object
    EventTag:
      example:
        value: value
        key: key
      properties:
        key:
          type: string
        value:
          type: string
      required:
      - key
      - value
      type: object
    EventId:
      type: string
    EventNotFoundError:
      discriminator:
        propertyName: _type
      properties:
        _type:
          enum:
          - EventNotFoundError
          type: string
        eventId:
          type: string
      required:
      - _type
      - eventId
      type: object
    StringItemsWithTotal:
      example:
        total: 0
        items:
        - items
        - items
      properties:
        items:
          items:
            type: string
          type: array
        total:
          format: int64
          type: integer
      required:
      - items
      - total
      type: object
    StreamList:
      example:
        items:
        - urn: urn
          subStreams: 0
          consistencyModel: consistencyModel
        - urn: urn
          subStreams: 0
          consistencyModel: consistencyModel
      properties:
        items:
          items:
            $ref: '#/components/schemas/StreamListItem'
          type: array
      required:
      - items
      type: object
    StreamListItem:
      example:
        urn: urn
        subStreams: 0
        consistencyModel: consistencyModel
      properties:
        urn:
          type: string
        consistencyModel:
          type: string
        subStreams:
          type: integer
      required:
      - consistencyModel
      - subStreams
      - urn
      type: object
    HealthStreamStatus:
      example:
        globalErrors:
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        partition: 0
        recoverMessage: recoverMessage
        mainStreamStatus:
          checkStateCount: 5
          metrics:
            createsPerSecond:
            - value: 5.962133916683182
            - value: 5.962133916683182
            latencySeconds:
            - value: 5.962133916683182
            - value: 5.962133916683182
            bucketSizeSeconds: 1
            deletesPerSecond:
            - value: 5.962133916683182
            - value: 5.962133916683182
            messagePerSecond:
            - value: 5.962133916683182
            - value: 5.962133916683182
            updatesPerSecond:
            - value: 5.962133916683182
            - value: 5.962133916683182
          errors:
          - level: level
            count: 6
            errorCode: errorCode
            error: error
          - level: level
            count: 6
            errorCode: errorCode
            error: error
        consistencyModel: consistencyModel
        aggregateMetrics:
          createsPerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
          latencySeconds:
          - value: 5.962133916683182
          - value: 5.962133916683182
          bucketSizeSeconds: 1
          deletesPerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
          messagePerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
          updatesPerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
      properties:
        partition:
          type: integer
        consistencyModel:
          type: string
        recoverMessage:
          type: string
        globalErrors:
          items:
            $ref: '#/components/schemas/HealthStreamError'
          type: array
        aggregateMetrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        mainStreamStatus:
          $ref: '#/components/schemas/HealthSubStreamStatus'
      required:
      - aggregateMetrics
      - consistencyModel
      - partition
      type: object
    HealthStreamErrors:
      items:
        $ref: '#/components/schemas/HealthStreamError'
      type: array
    HealthStreamError:
      example:
        level: level
        count: 6
        errorCode: errorCode
        error: error
      properties:
        errorCode:
          type: string
        level:
          type: string
        error:
          type: string
        count:
          type: integer
      required:
      - count
      - error
      - errorCode
      - level
      type: object
    HealthStreamMetrics:
      example:
        createsPerSecond:
        - value: 5.962133916683182
        - value: 5.962133916683182
        latencySeconds:
        - value: 5.962133916683182
        - value: 5.962133916683182
        bucketSizeSeconds: 1
        deletesPerSecond:
        - value: 5.962133916683182
        - value: 5.962133916683182
        messagePerSecond:
        - value: 5.962133916683182
        - value: 5.962133916683182
        updatesPerSecond:
        - value: 5.962133916683182
        - value: 5.962133916683182
      properties:
        bucketSizeSeconds:
          type: integer
        latencySeconds:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        messagePerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        createsPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        updatesPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
        deletesPerSecond:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
      required:
      - bucketSizeSeconds
      type: object
    MetricBucketValues:
      items:
        $ref: '#/components/schemas/MetricBucketValue'
      type: array
    MetricBucketValue:
      example:
        value: 5.962133916683182
      properties:
        value:
          format: double
          type: number
      type: object
    HealthSubStreamStatus:
      example:
        checkStateCount: 5
        metrics:
          createsPerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
          latencySeconds:
          - value: 5.962133916683182
          - value: 5.962133916683182
          bucketSizeSeconds: 1
          deletesPerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
          messagePerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
          updatesPerSecond:
          - value: 5.962133916683182
          - value: 5.962133916683182
        errors:
        - level: level
          count: 6
          errorCode: errorCode
          error: error
        - level: level
          count: 6
          errorCode: errorCode
          error: error
      properties:
        errors:
          items:
            $ref: '#/components/schemas/HealthStreamError'
          type: array
        metrics:
          $ref: '#/components/schemas/HealthStreamMetrics'
        subStreamState:
          $ref: '#/components/schemas/HealthSubStreamConsistencyState'
        checkStateCount:
          type: integer
      required:
      - checkStateCount
      - metrics
      - subStreamState
      type: object
    HealthSubStreamConsistencyState:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/HealthSubStreamSnapshot'
      - $ref: '#/components/schemas/HealthSubStreamExpiry'
      - $ref: '#/components/schemas/HealthSubStreamTransactionalIncrements'
      required:
      - _type
    HealthSubStreamSnapshot:
      properties:
        _type:
          enum:
          - HealthSubStreamSnapshot
          type: string
        expiryIntervalMs:
          type: integer
        repeatIntervalMs:
          type: integer
      required:
      - _type
      - repeatIntervalMs
      type: object
    HealthSubStreamExpiry:
      properties:
        _type:
          enum:
          - HealthSubStreamExpiry
          type: string
        expiryIntervalMs:
          type: integer
        repeatIntervalMs:
          type: integer
      required:
      - _type
      - expiryIntervalMs
      - repeatIntervalMs
      type: object
    HealthSubStreamTransactionalIncrements:
      properties:
        _type:
          enum:
          - HealthSubStreamTransactionalIncrements
          type: string
        offset:
          format: int64
          type: integer
        batchIndex:
          format: int64
          type: integer
      required:
      - _type
      - offset
      type: object
    InvalidUrn:
      properties:
        urn:
          type: string
        message:
          type: string
      required:
      - message
      - urn
      type: object
    HealthStreamNotFound:
      properties:
        _type:
          enum:
          - HealthStreamNotFound
          type: string
        urn:
          type: string
      required:
      - _type
      - urn
      type: object
    SubStreamList:
      example:
        subStreams:
        - subStreamId: subStreamId
          checkStateCount: 0
        - subStreamId: subStreamId
          checkStateCount: 0
      properties:
        subStreams:
          items:
            $ref: '#/components/schemas/SubStreamListItem'
          type: array
      required:
      - subStreams
      type: object
    SubStreamListItem:
      example:
        subStreamId: subStreamId
        checkStateCount: 0
      properties:
        subStreamId:
          type: string
        subStreamState:
          $ref: '#/components/schemas/HealthSubStreamConsistencyState'
        checkStateCount:
          type: integer
      required:
      - checkStateCount
      - subStreamId
      - subStreamState
      type: object
    TopologyMatchResult:
      example:
        unmatchedCheckStates:
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
        matchedCheckStates: 0
        multipleMatchesCheckStates:
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
          matchCount: 6
        - topologyElementIdentifier: topologyElementIdentifier
          checkStateId: checkStateId
          matchCount: 6
      properties:
        matchedCheckStates:
          type: integer
        unmatchedCheckStates:
          items:
            $ref: '#/components/schemas/UnmatchedCheckState'
          type: array
        multipleMatchesCheckStates:
          items:
            $ref: '#/components/schemas/MultipleMatchesCheckState'
          type: array
      required:
      - matchedCheckStates
      - multipleMatchesCheckStates
      - unmatchedCheckStates
      type: object
    UnmatchedCheckState:
      example:
        topologyElementIdentifier: topologyElementIdentifier
        checkStateId: checkStateId
      properties:
        checkStateId:
          type: string
        topologyElementIdentifier:
          type: string
      required:
      - checkStateId
      - topologyElementIdentifier
      type: object
    MultipleMatchesCheckState:
      example:
        topologyElementIdentifier: topologyElementIdentifier
        checkStateId: checkStateId
        matchCount: 6
      properties:
        checkStateId:
          type: string
        topologyElementIdentifier:
          type: string
        matchCount:
          type: integer
      required:
      - checkStateId
      - matchCount
      - topologyElementIdentifier
      type: object
    HealthSubStreamError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/HealthStreamNotFound'
      - $ref: '#/components/schemas/HealthSubStreamNotFound'
      required:
      - _type
    HealthSubStreamNotFound:
      properties:
        _type:
          enum:
          - HealthSubStreamNotFound
          type: string
        urn:
          type: string
        subStreamId:
          type: string
      required:
      - _type
      - urn
      type: object
    TopologyStreamList:
      example:
        streams:
        - syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
        - syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
      properties:
        streams:
          items:
            $ref: '#/components/schemas/TopologyStreamListItem'
          type: array
      required:
      - streams
      type: object
    TopologyStreamListItem:
      example:
        syncIdentifier: syncIdentifier
        createdRelations: 6
        deletedComponents: 5
        name: name
        deletedRelations: 1
        nodeId: 0
        errors: 2
        createdComponents: 5
      properties:
        syncIdentifier:
          nullable: true
          type: string
        nodeId:
          format: int64
          type: integer
        name:
          type: string
        createdRelations:
          format: int64
          type: integer
        deletedRelations:
          format: int64
          type: integer
        createdComponents:
          format: int64
          type: integer
        deletedComponents:
          format: int64
          type: integer
        errors:
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/TopologySyncStatus'
      required:
      - createdComponents
      - createdRelations
      - deletedComponents
      - deletedRelations
      - errors
      - name
      - nodeId
      - status
      type: object
    TopologySyncStatus:
      enum:
      - Running
      - Resetting
      - Deleting
      - DeleteFailed
      type: string
    TopologyStreamListItemWithErrorDetails:
      example:
        item:
          syncIdentifier: syncIdentifier
          createdRelations: 6
          deletedComponents: 5
          name: name
          deletedRelations: 1
          nodeId: 0
          errors: 2
          createdComponents: 5
        errorDetails:
        - externalId: externalId
          message: message
        - externalId: externalId
          message: message
      properties:
        item:
          $ref: '#/components/schemas/TopologyStreamListItem'
        errorDetails:
          items:
            $ref: '#/components/schemas/TopologyStreamError'
          type: array
      required:
      - errorDetails
      - item
      type: object
    TopologyStreamErrors:
      items:
        $ref: '#/components/schemas/TopologyStreamError'
      type: array
    TopologyStreamError:
      example:
        externalId: externalId
        message: message
      properties:
        level:
          $ref: '#/components/schemas/MessageLevel'
        message:
          type: string
        externalId:
          type: string
      required:
      - level
      - message
      type: object
    MessageLevel:
      enum:
      - Warn
      - Error
      - Info
      type: string
    IdentifierType:
      enum:
      - NodeId
      - Identifier
      type: string
    InvalidSyncIdentifier:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TopologySyncError:
      properties:
        message:
          type: string
      required:
      - message
      type: object
    TopologyStreamMetrics:
      example:
        latencySeconds:
        - value: 5.962133916683182
        - value: 5.962133916683182
        bucketSizeSeconds: 0
      properties:
        bucketSizeSeconds:
          type: integer
        latencySeconds:
          items:
            $ref: '#/components/schemas/MetricBucketValue'
          type: array
      required:
      - bucketSizeSeconds
      type: object
    ExecuteScriptResponse:
      example:
        result: '{}'
      properties:
        result:
          description: |
            Contains a `value` and `_type` property. This is described this way, because `value` can hold any
            JSON type and most open api generators (but not all) have problems with such types or are inconsistent with the OpenAPI spec.
            The `_type` property describes the original type of the result value during script execution.
            The `value` property holds the resulting value serialized to JSON.
            The `value` property can be of any JSON type, i.e. null, undefined, boolean, number, string, array or object.
          nullable: true
          type: object
      required:
      - result
      type: object
    ExecuteScriptError:
      discriminator:
        propertyName: _type
      oneOf:
      - $ref: '#/components/schemas/ExecuteScriptSyntaxErrors'
      - $ref: '#/components/schemas/ExecuteScriptGroovyRuntimeError'
      - $ref: '#/components/schemas/ExecuteScriptExecutionError'
      - $ref: '#/components/schemas/ExecuteScriptSecurityError'
      - $ref: '#/components/schemas/ExecuteScriptExceptionError'
      - $ref: '#/components/schemas/ExecuteScriptWrongReturnTypeError'
      - $ref: '#/components/schemas/ExecuteScriptTimeoutError'
      - $ref: '#/components/schemas/ExecuteScriptArgumentsScriptError'
      type: object
    ExecuteScriptSyntaxErrors:
      properties:
        _type:
          enum:
          - ExecuteScriptSyntaxErrors
          type: string
        message:
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ExecuteScriptSyntaxErrors_errors'
          type: array
      required:
      - _type
      - errors
      - message
      type: object
    ScriptLocation:
      properties:
        line:
          type: integer
        column:
          type: integer
      required:
      - column
      - line
      type: object
    ExecuteScriptGroovyRuntimeError:
      properties:
        _type:
          enum:
          - ExecuteScriptGroovyRuntimeError
          type: string
        message:
          type: string
        location:
          $ref: '#/components/schemas/ScriptLocation'
      required:
      - _type
      - message
      type: object
    ExecuteScriptExecutionError:
      properties:
        _type:
          enum:
          - ExecuteScriptExecutionError
          type: string
        reason:
          type: string
        message:
          type: string
      required:
      - _type
      - message
      - reason
      type: object
    ExecuteScriptSecurityError:
      properties:
        _type:
          enum:
          - ExecuteScriptSecurityError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    ExecuteScriptExceptionError:
      properties:
        _type:
          enum:
          - ExecuteScriptExceptionError
          type: string
        message:
          type: string
      required:
      - _type
      - message
      type: object
    ExecuteScriptWrongReturnTypeError:
      properties:
        _type:
          enum:
          - ExecuteScriptWrongReturnTypeError
          type: string
        message:
          type: string
        actualReturnType:
          type: string
        expectedReturnType:
          type: string
      required:
      - _type
      - actualReturnType
      - expectedReturnType
      - message
      type: object
    ExecuteScriptTimeoutError:
      properties:
        _type:
          enum:
          - ExecuteScriptTimeoutError
          type: string
        message:
          type: string
        timeoutMs:
          type: integer
      required:
      - _type
      - message
      - timeoutMs
      type: object
    ExecuteScriptArgumentsScriptError:
      properties:
        _type:
          enum:
          - ExecuteScriptArgumentsScriptError
          type: string
        message:
          type: string
        error:
          $ref: '#/components/schemas/ExecuteScriptError'
      required:
      - _type
      - error
      - message
      type: object
    ExecuteScriptRequest:
      example:
        argumentsScript: argumentsScript
        timeoutMs: 0
        script: script
      properties:
        timeoutMs:
          type: integer
        script:
          type: string
        argumentsScript:
          type: string
      required:
      - script
      type: object
    ServerInfo:
      example:
        deploymentMode: Saas
        version:
          patch: 1
          major: 0
          minor: 6
          isDev: true
          commit: commit
          diff: diff
      properties:
        version:
          $ref: '#/components/schemas/ServerVersion'
        deploymentMode:
          enum:
          - Saas
          - SelfHosted
          type: string
      required:
      - deploymentMode
      - version
      type: object
    ServerVersion:
      example:
        patch: 1
        major: 0
        minor: 6
        isDev: true
        commit: commit
        diff: diff
      properties:
        major:
          type: integer
        minor:
          type: integer
        patch:
          type: integer
        diff:
          type: string
        commit:
          type: string
        isDev:
          type: boolean
      required:
      - commit
      - diff
      - isDev
      - major
      - minor
      - patch
      type: object
    NodeTypes_nodeTypes:
      example:
        typeName: typeName
        description: description
      properties:
        typeName:
          type: string
        description:
          type: string
      required:
      - description
      - typeName
      type: object
    ExecuteScriptSyntaxErrors_errors:
      properties:
        message:
          type: string
        location:
          $ref: '#/components/schemas/ScriptLocation'
      required:
      - location
      - message
      type: object
  securitySchemes:
    ApiToken:
      in: header
      name: X-API-Token
      type: apiKey
