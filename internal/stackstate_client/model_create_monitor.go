/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// CreateMonitor struct for CreateMonitor
type CreateMonitor struct {
	Name string `json:"name"`
	Identifier string `json:"identifier"`
	Description *string `json:"description,omitempty"`
	FunctionId int64 `json:"functionId"`
	Parameters map[string]interface{} `json:"parameters"`
	RemediationHint *string `json:"remediationHint,omitempty"`
	// Placeholder for the topology element identifier
	TopologyMapping string `json:"topologyMapping"`
	IntervalSeconds int32 `json:"intervalSeconds"`
}

// NewCreateMonitor instantiates a new CreateMonitor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMonitor(name string, identifier string, functionId int64, parameters map[string]interface{}, topologyMapping string, intervalSeconds int32) *CreateMonitor {
	this := CreateMonitor{}
	this.Name = name
	this.Identifier = identifier
	this.FunctionId = functionId
	this.Parameters = parameters
	this.TopologyMapping = topologyMapping
	this.IntervalSeconds = intervalSeconds
	return &this
}

// NewCreateMonitorWithDefaults instantiates a new CreateMonitor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMonitorWithDefaults() *CreateMonitor {
	this := CreateMonitor{}
	return &this
}

// GetName returns the Name field value
func (o *CreateMonitor) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateMonitor) SetName(v string) {
	o.Name = v
}

// GetIdentifier returns the Identifier field value
func (o *CreateMonitor) GetIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Identifier, true
}

// SetIdentifier sets field value
func (o *CreateMonitor) SetIdentifier(v string) {
	o.Identifier = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *CreateMonitor) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateMonitor) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *CreateMonitor) SetDescription(v string) {
	o.Description = &v
}

// GetFunctionId returns the FunctionId field value
func (o *CreateMonitor) GetFunctionId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.FunctionId
}

// GetFunctionIdOk returns a tuple with the FunctionId field value
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetFunctionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FunctionId, true
}

// SetFunctionId sets field value
func (o *CreateMonitor) SetFunctionId(v int64) {
	o.FunctionId = v
}

// GetParameters returns the Parameters field value
func (o *CreateMonitor) GetParameters() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetParametersOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Parameters, true
}

// SetParameters sets field value
func (o *CreateMonitor) SetParameters(v map[string]interface{}) {
	o.Parameters = v
}

// GetRemediationHint returns the RemediationHint field value if set, zero value otherwise.
func (o *CreateMonitor) GetRemediationHint() string {
	if o == nil || o.RemediationHint == nil {
		var ret string
		return ret
	}
	return *o.RemediationHint
}

// GetRemediationHintOk returns a tuple with the RemediationHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetRemediationHintOk() (*string, bool) {
	if o == nil || o.RemediationHint == nil {
		return nil, false
	}
	return o.RemediationHint, true
}

// HasRemediationHint returns a boolean if a field has been set.
func (o *CreateMonitor) HasRemediationHint() bool {
	if o != nil && o.RemediationHint != nil {
		return true
	}

	return false
}

// SetRemediationHint gets a reference to the given string and assigns it to the RemediationHint field.
func (o *CreateMonitor) SetRemediationHint(v string) {
	o.RemediationHint = &v
}

// GetTopologyMapping returns the TopologyMapping field value
func (o *CreateMonitor) GetTopologyMapping() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TopologyMapping
}

// GetTopologyMappingOk returns a tuple with the TopologyMapping field value
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetTopologyMappingOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TopologyMapping, true
}

// SetTopologyMapping sets field value
func (o *CreateMonitor) SetTopologyMapping(v string) {
	o.TopologyMapping = v
}

// GetIntervalSeconds returns the IntervalSeconds field value
func (o *CreateMonitor) GetIntervalSeconds() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IntervalSeconds
}

// GetIntervalSecondsOk returns a tuple with the IntervalSeconds field value
// and a boolean to check if the value has been set.
func (o *CreateMonitor) GetIntervalSecondsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IntervalSeconds, true
}

// SetIntervalSeconds sets field value
func (o *CreateMonitor) SetIntervalSeconds(v int32) {
	o.IntervalSeconds = v
}

func (o CreateMonitor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["identifier"] = o.Identifier
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["functionId"] = o.FunctionId
	}
	if true {
		toSerialize["parameters"] = o.Parameters
	}
	if o.RemediationHint != nil {
		toSerialize["remediationHint"] = o.RemediationHint
	}
	if true {
		toSerialize["topologyMapping"] = o.TopologyMapping
	}
	if true {
		toSerialize["intervalSeconds"] = o.IntervalSeconds
	}
	return json.Marshal(toSerialize)
}

type NullableCreateMonitor struct {
	value *CreateMonitor
	isSet bool
}

func (v NullableCreateMonitor) Get() *CreateMonitor {
	return v.value
}

func (v *NullableCreateMonitor) Set(val *CreateMonitor) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMonitor) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMonitor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMonitor(val *CreateMonitor) *NullableCreateMonitor {
	return &NullableCreateMonitor{value: val, isSet: true}
}

func (v NullableCreateMonitor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMonitor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


