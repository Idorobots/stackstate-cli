/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

type MonitorUrnApi interface {

	/*
	DeleteMonitorByURN Delete a monitor

	Deletes existing monitor

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param monitorUrnId The identifier of a monitor
	 @return ApiDeleteMonitorByURNRequest
	*/
	DeleteMonitorByURN(ctx _context.Context, monitorUrnId string) ApiDeleteMonitorByURNRequest

	// DeleteMonitorByURNExecute executes the request
	DeleteMonitorByURNExecute(r ApiDeleteMonitorByURNRequest) (*_nethttp.Response, error)

	/*
	DryRunMonitorByURN Dry run a monitor and show a result

	Performs a dry run of a monitor without topology state modification

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param monitorUrnId The identifier of a monitor
	 @return ApiDryRunMonitorByURNRequest
	*/
	DryRunMonitorByURN(ctx _context.Context, monitorUrnId string) ApiDryRunMonitorByURNRequest

	// DryRunMonitorByURNExecute executes the request
	//  @return MonitorRunResult
	DryRunMonitorByURNExecute(r ApiDryRunMonitorByURNRequest) (MonitorRunResult, *_nethttp.Response, error)

	/*
	GetMonitorByURN Get a monitor

	Returns a monitor full representation

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param monitorUrnId The identifier of a monitor
	 @return ApiGetMonitorByURNRequest
	*/
	GetMonitorByURN(ctx _context.Context, monitorUrnId string) ApiGetMonitorByURNRequest

	// GetMonitorByURNExecute executes the request
	//  @return Monitor
	GetMonitorByURNExecute(r ApiGetMonitorByURNRequest) (Monitor, *_nethttp.Response, error)

	/*
	RunMonitorByURN Run a monitor

	Runs a monitor once

	 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	 @param monitorUrnId The identifier of a monitor
	 @return ApiRunMonitorByURNRequest
	*/
	RunMonitorByURN(ctx _context.Context, monitorUrnId string) ApiRunMonitorByURNRequest

	// RunMonitorByURNExecute executes the request
	//  @return MonitorRunResult
	RunMonitorByURNExecute(r ApiRunMonitorByURNRequest) (MonitorRunResult, *_nethttp.Response, error)
}


// MonitorUrnApiService MonitorUrnApi service
type MonitorUrnApiService service

type ApiDeleteMonitorByURNRequest struct {
	ctx _context.Context
	ApiService MonitorUrnApi
	monitorUrnId string
}


func (r ApiDeleteMonitorByURNRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteMonitorByURNExecute(r)
}

/*
DeleteMonitorByURN Delete a monitor

Deletes existing monitor

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param monitorUrnId The identifier of a monitor
 @return ApiDeleteMonitorByURNRequest
*/
func (a *MonitorUrnApiService) DeleteMonitorByURN(ctx _context.Context, monitorUrnId string) ApiDeleteMonitorByURNRequest {
	return ApiDeleteMonitorByURNRequest{
		ApiService: a,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

// Execute executes the request
func (a *MonitorUrnApiService) DeleteMonitorByURNExecute(r ApiDeleteMonitorByURNRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorUrnApiService.DeleteMonitorByURN")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitorUrn/{monitorUrnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitorUrnId"+"}", _neturl.PathEscape(parameterToString(r.monitorUrnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MonitorIdentifierNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MonitorApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDryRunMonitorByURNRequest struct {
	ctx _context.Context
	ApiService MonitorUrnApi
	monitorUrnId string
}


func (r ApiDryRunMonitorByURNRequest) Execute() (MonitorRunResult, *_nethttp.Response, error) {
	return r.ApiService.DryRunMonitorByURNExecute(r)
}

/*
DryRunMonitorByURN Dry run a monitor and show a result

Performs a dry run of a monitor without topology state modification

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param monitorUrnId The identifier of a monitor
 @return ApiDryRunMonitorByURNRequest
*/
func (a *MonitorUrnApiService) DryRunMonitorByURN(ctx _context.Context, monitorUrnId string) ApiDryRunMonitorByURNRequest {
	return ApiDryRunMonitorByURNRequest{
		ApiService: a,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

// Execute executes the request
//  @return MonitorRunResult
func (a *MonitorUrnApiService) DryRunMonitorByURNExecute(r ApiDryRunMonitorByURNRequest) (MonitorRunResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitorRunResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorUrnApiService.DryRunMonitorByURN")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitorUrn/{monitorUrnId}/dryRun"
	localVarPath = strings.Replace(localVarPath, "{"+"monitorUrnId"+"}", _neturl.PathEscape(parameterToString(r.monitorUrnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MonitorIdentifierNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MonitorApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetMonitorByURNRequest struct {
	ctx _context.Context
	ApiService MonitorUrnApi
	monitorUrnId string
}


func (r ApiGetMonitorByURNRequest) Execute() (Monitor, *_nethttp.Response, error) {
	return r.ApiService.GetMonitorByURNExecute(r)
}

/*
GetMonitorByURN Get a monitor

Returns a monitor full representation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param monitorUrnId The identifier of a monitor
 @return ApiGetMonitorByURNRequest
*/
func (a *MonitorUrnApiService) GetMonitorByURN(ctx _context.Context, monitorUrnId string) ApiGetMonitorByURNRequest {
	return ApiGetMonitorByURNRequest{
		ApiService: a,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

// Execute executes the request
//  @return Monitor
func (a *MonitorUrnApiService) GetMonitorByURNExecute(r ApiGetMonitorByURNRequest) (Monitor, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Monitor
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorUrnApiService.GetMonitorByURN")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitorUrn/{monitorUrnId}"
	localVarPath = strings.Replace(localVarPath, "{"+"monitorUrnId"+"}", _neturl.PathEscape(parameterToString(r.monitorUrnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MonitorIdentifierNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MonitorApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRunMonitorByURNRequest struct {
	ctx _context.Context
	ApiService MonitorUrnApi
	monitorUrnId string
}


func (r ApiRunMonitorByURNRequest) Execute() (MonitorRunResult, *_nethttp.Response, error) {
	return r.ApiService.RunMonitorByURNExecute(r)
}

/*
RunMonitorByURN Run a monitor

Runs a monitor once

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param monitorUrnId The identifier of a monitor
 @return ApiRunMonitorByURNRequest
*/
func (a *MonitorUrnApiService) RunMonitorByURN(ctx _context.Context, monitorUrnId string) ApiRunMonitorByURNRequest {
	return ApiRunMonitorByURNRequest{
		ApiService: a,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

// Execute executes the request
//  @return MonitorRunResult
func (a *MonitorUrnApiService) RunMonitorByURNExecute(r ApiRunMonitorByURNRequest) (MonitorRunResult, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MonitorRunResult
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MonitorUrnApiService.RunMonitorByURN")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/monitorUrn/{monitorUrnId}/run"
	localVarPath = strings.Replace(localVarPath, "{"+"monitorUrnId"+"}", _neturl.PathEscape(parameterToString(r.monitorUrnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiToken"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v MonitorIdentifierNotFoundError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v MonitorApiError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}


// ---------------------------------------------
// ------------------ MOCKS --------------------
// ---------------------------------------------


type MonitorUrnApiMock struct {
	DeleteMonitorByURNCalls *[]DeleteMonitorByURNCall
	DeleteMonitorByURNResponse DeleteMonitorByURNMockResponse
	DryRunMonitorByURNCalls *[]DryRunMonitorByURNCall
	DryRunMonitorByURNResponse DryRunMonitorByURNMockResponse
	GetMonitorByURNCalls *[]GetMonitorByURNCall
	GetMonitorByURNResponse GetMonitorByURNMockResponse
	RunMonitorByURNCalls *[]RunMonitorByURNCall
	RunMonitorByURNResponse RunMonitorByURNMockResponse
}	

func NewMonitorUrnApiMock() MonitorUrnApiMock {
	xDeleteMonitorByURNCalls := make([]DeleteMonitorByURNCall, 0)
	xDryRunMonitorByURNCalls := make([]DryRunMonitorByURNCall, 0)
	xGetMonitorByURNCalls := make([]GetMonitorByURNCall, 0)
	xRunMonitorByURNCalls := make([]RunMonitorByURNCall, 0)
	return MonitorUrnApiMock {
		DeleteMonitorByURNCalls: &xDeleteMonitorByURNCalls,
		DryRunMonitorByURNCalls: &xDryRunMonitorByURNCalls,
		GetMonitorByURNCalls: &xGetMonitorByURNCalls,
		RunMonitorByURNCalls: &xRunMonitorByURNCalls,
	}
}

type DeleteMonitorByURNMockResponse struct {
	
	Response *_nethttp.Response
	Error error
}

type DeleteMonitorByURNCall struct {
	PmonitorUrnId string
}


func (mock MonitorUrnApiMock) DeleteMonitorByURN(ctx _context.Context, monitorUrnId string) ApiDeleteMonitorByURNRequest {
	return ApiDeleteMonitorByURNRequest{
		ApiService: mock,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

func (mock MonitorUrnApiMock) DeleteMonitorByURNExecute(r ApiDeleteMonitorByURNRequest) (*_nethttp.Response, error) {
	p := DeleteMonitorByURNCall {
			PmonitorUrnId: r.monitorUrnId,
	}
	*mock.DeleteMonitorByURNCalls = append(*mock.DeleteMonitorByURNCalls, p)
	return mock.DeleteMonitorByURNResponse.Response, mock.DeleteMonitorByURNResponse.Error
}

type DryRunMonitorByURNMockResponse struct {
	Result MonitorRunResult
	Response *_nethttp.Response
	Error error
}

type DryRunMonitorByURNCall struct {
	PmonitorUrnId string
}


func (mock MonitorUrnApiMock) DryRunMonitorByURN(ctx _context.Context, monitorUrnId string) ApiDryRunMonitorByURNRequest {
	return ApiDryRunMonitorByURNRequest{
		ApiService: mock,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

func (mock MonitorUrnApiMock) DryRunMonitorByURNExecute(r ApiDryRunMonitorByURNRequest) (MonitorRunResult, *_nethttp.Response, error) {
	p := DryRunMonitorByURNCall {
			PmonitorUrnId: r.monitorUrnId,
	}
	*mock.DryRunMonitorByURNCalls = append(*mock.DryRunMonitorByURNCalls, p)
	return mock.DryRunMonitorByURNResponse.Result, mock.DryRunMonitorByURNResponse.Response, mock.DryRunMonitorByURNResponse.Error
}

type GetMonitorByURNMockResponse struct {
	Result Monitor
	Response *_nethttp.Response
	Error error
}

type GetMonitorByURNCall struct {
	PmonitorUrnId string
}


func (mock MonitorUrnApiMock) GetMonitorByURN(ctx _context.Context, monitorUrnId string) ApiGetMonitorByURNRequest {
	return ApiGetMonitorByURNRequest{
		ApiService: mock,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

func (mock MonitorUrnApiMock) GetMonitorByURNExecute(r ApiGetMonitorByURNRequest) (Monitor, *_nethttp.Response, error) {
	p := GetMonitorByURNCall {
			PmonitorUrnId: r.monitorUrnId,
	}
	*mock.GetMonitorByURNCalls = append(*mock.GetMonitorByURNCalls, p)
	return mock.GetMonitorByURNResponse.Result, mock.GetMonitorByURNResponse.Response, mock.GetMonitorByURNResponse.Error
}

type RunMonitorByURNMockResponse struct {
	Result MonitorRunResult
	Response *_nethttp.Response
	Error error
}

type RunMonitorByURNCall struct {
	PmonitorUrnId string
}


func (mock MonitorUrnApiMock) RunMonitorByURN(ctx _context.Context, monitorUrnId string) ApiRunMonitorByURNRequest {
	return ApiRunMonitorByURNRequest{
		ApiService: mock,
		ctx: ctx,
		monitorUrnId: monitorUrnId,
	}
}

func (mock MonitorUrnApiMock) RunMonitorByURNExecute(r ApiRunMonitorByURNRequest) (MonitorRunResult, *_nethttp.Response, error) {
	p := RunMonitorByURNCall {
			PmonitorUrnId: r.monitorUrnId,
	}
	*mock.RunMonitorByURNCalls = append(*mock.RunMonitorByURNCalls, p)
	return mock.RunMonitorByURNResponse.Result, mock.RunMonitorByURNResponse.Response, mock.RunMonitorByURNResponse.Error
}


