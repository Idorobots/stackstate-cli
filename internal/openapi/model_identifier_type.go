/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// IdentifierType the model 'IdentifierType'
type IdentifierType string

// List of IdentifierType
const (
	NODE_ID IdentifierType = "NodeId"
	IDENTIFIER IdentifierType = "Identifier"
)

// All allowed values of IdentifierType enum
var AllowedIdentifierTypeEnumValues = []IdentifierType{
	"NodeId",
	"Identifier",
}

func (v *IdentifierType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := IdentifierType(value)
	for _, existing := range AllowedIdentifierTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid IdentifierType", value)
}

// NewIdentifierTypeFromValue returns a pointer to a valid IdentifierType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIdentifierTypeFromValue(v string) (*IdentifierType, error) {
	ev := IdentifierType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for IdentifierType: valid values are %v", v, AllowedIdentifierTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IdentifierType) IsValid() bool {
	for _, existing := range AllowedIdentifierTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to IdentifierType value
func (v IdentifierType) Ptr() *IdentifierType {
	return &v
}

type NullableIdentifierType struct {
	value *IdentifierType
	isSet bool
}

func (v NullableIdentifierType) Get() *IdentifierType {
	return v.value
}

func (v *NullableIdentifierType) Set(val *IdentifierType) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentifierType) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentifierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentifierType(val *IdentifierType) *NullableIdentifierType {
	return &NullableIdentifierType{value: val, isSet: true}
}

func (v NullableIdentifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentifierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

