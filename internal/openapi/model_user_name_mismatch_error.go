/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserNameMismatchError struct for UserNameMismatchError
type UserNameMismatchError struct {
	Type string `json:"_type"`
	Name string `json:"name"`
}

// NewUserNameMismatchError instantiates a new UserNameMismatchError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserNameMismatchError(type_ string, name string) *UserNameMismatchError {
	this := UserNameMismatchError{}
	this.Type = type_
	this.Name = name
	return &this
}

// NewUserNameMismatchErrorWithDefaults instantiates a new UserNameMismatchError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserNameMismatchErrorWithDefaults() *UserNameMismatchError {
	this := UserNameMismatchError{}
	return &this
}

// GetType returns the Type field value
func (o *UserNameMismatchError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *UserNameMismatchError) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *UserNameMismatchError) SetType(v string) {
	o.Type = v
}

// GetName returns the Name field value
func (o *UserNameMismatchError) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserNameMismatchError) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserNameMismatchError) SetName(v string) {
	o.Name = v
}

func (o UserNameMismatchError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableUserNameMismatchError struct {
	value *UserNameMismatchError
	isSet bool
}

func (v NullableUserNameMismatchError) Get() *UserNameMismatchError {
	return v.value
}

func (v *NullableUserNameMismatchError) Set(val *UserNameMismatchError) {
	v.value = val
	v.isSet = true
}

func (v NullableUserNameMismatchError) IsSet() bool {
	return v.isSet
}

func (v *NullableUserNameMismatchError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserNameMismatchError(val *UserNameMismatchError) *NullableUserNameMismatchError {
	return &NullableUserNameMismatchError{value: val, isSet: true}
}

func (v NullableUserNameMismatchError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserNameMismatchError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


