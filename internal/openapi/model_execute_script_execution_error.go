/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ExecuteScriptExecutionError struct for ExecuteScriptExecutionError
type ExecuteScriptExecutionError struct {
	Type string `json:"_type"`
	Reason string `json:"reason"`
	Message string `json:"message"`
}

// NewExecuteScriptExecutionError instantiates a new ExecuteScriptExecutionError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteScriptExecutionError(type_ string, reason string, message string) *ExecuteScriptExecutionError {
	this := ExecuteScriptExecutionError{}
	this.Type = type_
	this.Reason = reason
	this.Message = message
	return &this
}

// NewExecuteScriptExecutionErrorWithDefaults instantiates a new ExecuteScriptExecutionError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteScriptExecutionErrorWithDefaults() *ExecuteScriptExecutionError {
	this := ExecuteScriptExecutionError{}
	return &this
}

// GetType returns the Type field value
func (o *ExecuteScriptExecutionError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptExecutionError) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExecuteScriptExecutionError) SetType(v string) {
	o.Type = v
}

// GetReason returns the Reason field value
func (o *ExecuteScriptExecutionError) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptExecutionError) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *ExecuteScriptExecutionError) SetReason(v string) {
	o.Reason = v
}

// GetMessage returns the Message field value
func (o *ExecuteScriptExecutionError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptExecutionError) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ExecuteScriptExecutionError) SetMessage(v string) {
	o.Message = v
}

func (o ExecuteScriptExecutionError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["reason"] = o.Reason
	}
	if true {
		toSerialize["message"] = o.Message
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteScriptExecutionError struct {
	value *ExecuteScriptExecutionError
	isSet bool
}

func (v NullableExecuteScriptExecutionError) Get() *ExecuteScriptExecutionError {
	return v.value
}

func (v *NullableExecuteScriptExecutionError) Set(val *ExecuteScriptExecutionError) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteScriptExecutionError) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteScriptExecutionError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteScriptExecutionError(val *ExecuteScriptExecutionError) *NullableExecuteScriptExecutionError {
	return &NullableExecuteScriptExecutionError{value: val, isSet: true}
}

func (v NullableExecuteScriptExecutionError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteScriptExecutionError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


