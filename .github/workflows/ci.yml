name: CI
on:
  pull_request:
    branches:
      - main

  # Allows to run this via the Actions tab
  workflow_dispatch:

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Compute Image Checksum
        run: echo "NIX_CHECKSUM=$(cat flake.* | md5sum | awk '{print $1}')" >> $GITHUB_ENV

      - name: Cache Image
        id: cache-image
        uses: actions/cache@v3
        with:
          path: result
          key: cli-ci-image-${{ env.NIX_CHECKSUM }}

      - name: Install Nix
        if: steps.cache-image.outputs.cache-hit != 'true'
        uses: nixbuild/nix-quick-install-action@v17
        with:
          nix_conf:
            experimental-features = nix-command flakes

      - name: Run Nix
        if: steps.cache-image.outputs.cache-hit != 'true'
        run: |
          nix profile install nixpkgs#docker
          nix build .#ci-image

      - name: Publish base image
        if: steps.cache-image.outputs.cache-hit != 'true'
        env:
          DOCKER_TLS_CERTDIR: ""
          CI_BASE_IMAGE_PUSH: quay.io/stackstate/sts-ci-images:stackstate-cli2-${{ env.NIX_CHECKSUM }}
        run: |
          echo "${{ secrets.QUAY_PASSWORD }}" | docker login --username=${{ secrets.QUAY_USER }} --password-stdin quay.io
          docker load < result
          docker tag stackstate-cli2-ci:latest $CI_BASE_IMAGE_PUSH
          docker push $CI_BASE_IMAGE_PUSH

    outputs:
      nixChecksum: ${{ env.NIX_CHECKSUM }}
      ciImageName: quay.io/stackstate/sts-ci-images:stackstate-cli2-${{ env.NIX_CHECKSUM }}

  lint:
    name: Linter
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      QUAY_USER: ${{ secrets.QUAY_USER }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Lint
        uses: ./.github/actions/gobase
        with:
          image: ${{ needs.setup.outputs.ciImageName }}
          run: ./scripts/lint.sh

  check-open-api:
    name: OpenAPI check
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      QUAY_USER: ${{ secrets.QUAY_USER }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      # TODO Needs the open-api repo to be available.
      - name: Check StackState API up to date
        if: false
        uses: ./.github/actions/gobase
        with:
          image: ${{ needs.setup.outputs.ciImageName }}
          run: ./scripts/check_stackstate_api_up-to-date.sh

  check-license:
    name: License scan
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - name: License scanning
        uses: addnab/docker-run-action@v3
        with:
          registry: registry.gitlab.com
          image: registry.gitlab.com/gitlab-org/security-products/analyzers/license-finder:3
          options: -v ${{ github.workspace }}:/workspace -e LM_REPORT_VERSION=2.1 -e CI_PROJECT_DIR=/workspace
          run: |
            git config --global --add safe.directory ${CI_PROJECT_DIR}
            /run.sh analyze && echo 'GENERATED_LICENSE_SCAN=true' >> $GITHUB_ENV

      - name: Save license scan report
        if: ${{ env.GENERATED_LICENSE_SCAN == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: license_scanning
          path: gl-license-scanning-report.json

  check-dependencies:
    name: Dependency scan
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v3

      - name: Dependency scanning
        uses: addnab/docker-run-action@v3
        with:
          registry: registry.gitlab.com
          image: registry.gitlab.com/gitlab-org/security-products/analyzers/gemnasium:2
          options: -v ${{ github.workspace }}:/workspace  -e CI_PROJECT_DIR=/workspace
          run: |
            git config --global --add safe.directory ${CI_PROJECT_DIR}
            /analyzer run && echo 'GENERATED_DEPENDENCY_SCAN=true' >> $GITHUB_ENV

      - name: Save dependency scan report
        if: ${{ env.GENERATED_DEPENDENCY_SCAN == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: dependency_scanning
          path: gl-dependency-scanning-report.json

  check-go-releaser:
    name: Go releaser check
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      QUAY_USER: ${{ secrets.QUAY_USER }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Go releaser check
        uses: ./.github/actions/gobase
        with:
          image: ${{ needs.setup.outputs.ciImageName }}
          run: goreleaser check

  test:
    name: Tests
    needs:
      - lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    env:
      QUAY_USER: ${{ secrets.QUAY_USER }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}

    steps:
      - uses: actions/checkout@v3

      - name: Compile test
        uses: ./.github/actions/gobase
        with:
          image: ${{ needs.setup.outputs.ciImageName }}
          run: go test ./... -v

  deploy:
    needs:
      - test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Generate release notes
        run: echo "TODO"

      - name: Publish
        run: echo "TODO"

