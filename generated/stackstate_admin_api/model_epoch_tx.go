/*
StackState Admin API

StackState's Admin API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// EpochTx struct for EpochTx
type EpochTx struct {
	EpochTx *int64 `json:"epochTx,omitempty"`
}

// NewEpochTx instantiates a new EpochTx object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEpochTx() *EpochTx {
	this := EpochTx{}
	return &this
}

// NewEpochTxWithDefaults instantiates a new EpochTx object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEpochTxWithDefaults() *EpochTx {
	this := EpochTx{}
	return &this
}

// GetEpochTx returns the EpochTx field value if set, zero value otherwise.
func (o *EpochTx) GetEpochTx() int64 {
	if o == nil || o.EpochTx == nil {
		var ret int64
		return ret
	}
	return *o.EpochTx
}

// GetEpochTxOk returns a tuple with the EpochTx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EpochTx) GetEpochTxOk() (*int64, bool) {
	if o == nil || o.EpochTx == nil {
		return nil, false
	}
	return o.EpochTx, true
}

// HasEpochTx returns a boolean if a field has been set.
func (o *EpochTx) HasEpochTx() bool {
	if o != nil && o.EpochTx != nil {
		return true
	}

	return false
}

// SetEpochTx gets a reference to the given int64 and assigns it to the EpochTx field.
func (o *EpochTx) SetEpochTx(v int64) {
	o.EpochTx = &v
}

func (o EpochTx) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EpochTx != nil {
		toSerialize["epochTx"] = o.EpochTx
	}
	return json.Marshal(toSerialize)
}

type NullableEpochTx struct {
	value *EpochTx
	isSet bool
}

func (v NullableEpochTx) Get() *EpochTx {
	return v.value
}

func (v *NullableEpochTx) Set(val *EpochTx) {
	v.value = val
	v.isSet = true
}

func (v NullableEpochTx) IsSet() bool {
	return v.isSet
}

func (v *NullableEpochTx) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEpochTx(val *EpochTx) *NullableEpochTx {
	return &NullableEpochTx{value: val, isSet: true}
}

func (v NullableEpochTx) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEpochTx) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


