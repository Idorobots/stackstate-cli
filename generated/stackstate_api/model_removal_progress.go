/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// RemovalProgress struct for RemovalProgress
type RemovalProgress struct {
	Progress *RemovalProgressProgress `json:"progress,omitempty"`
}

// NewRemovalProgress instantiates a new RemovalProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemovalProgress() *RemovalProgress {
	this := RemovalProgress{}
	return &this
}

// NewRemovalProgressWithDefaults instantiates a new RemovalProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemovalProgressWithDefaults() *RemovalProgress {
	this := RemovalProgress{}
	return &this
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *RemovalProgress) GetProgress() RemovalProgressProgress {
	if o == nil || o.Progress == nil {
		var ret RemovalProgressProgress
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemovalProgress) GetProgressOk() (*RemovalProgressProgress, bool) {
	if o == nil || o.Progress == nil {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *RemovalProgress) HasProgress() bool {
	if o != nil && o.Progress != nil {
		return true
	}

	return false
}

// SetProgress gets a reference to the given RemovalProgressProgress and assigns it to the Progress field.
func (o *RemovalProgress) SetProgress(v RemovalProgressProgress) {
	o.Progress = &v
}

func (o RemovalProgress) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Progress != nil {
		toSerialize["progress"] = o.Progress
	}
	return json.Marshal(toSerialize)
}

type NullableRemovalProgress struct {
	value *RemovalProgress
	isSet bool
}

func (v NullableRemovalProgress) Get() *RemovalProgress {
	return v.value
}

func (v *NullableRemovalProgress) Set(val *RemovalProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableRemovalProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableRemovalProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemovalProgress(val *RemovalProgress) *NullableRemovalProgress {
	return &NullableRemovalProgress{value: val, isSet: true}
}

func (v NullableRemovalProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemovalProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


