/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// MetricValuation the model 'MetricValuation'
type MetricValuation string

// List of MetricValuation
const (
	METRICVALUATION_HIGHER_IS_BETTER MetricValuation = "higher-is-better"
	METRICVALUATION_LOWER_IS_BETTER  MetricValuation = "lower-is-better"
)

// All allowed values of MetricValuation enum
var AllowedMetricValuationEnumValues = []MetricValuation{
	"higher-is-better",
	"lower-is-better",
}

func (v *MetricValuation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetricValuation(value)
	for _, existing := range AllowedMetricValuationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetricValuation", value)
}

// NewMetricValuationFromValue returns a pointer to a valid MetricValuation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetricValuationFromValue(v string) (*MetricValuation, error) {
	ev := MetricValuation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetricValuation: valid values are %v", v, AllowedMetricValuationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetricValuation) IsValid() bool {
	for _, existing := range AllowedMetricValuationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetricValuation value
func (v MetricValuation) Ptr() *MetricValuation {
	return &v
}

type NullableMetricValuation struct {
	value *MetricValuation
	isSet bool
}

func (v NullableMetricValuation) Get() *MetricValuation {
	return v.value
}

func (v *NullableMetricValuation) Set(val *MetricValuation) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricValuation) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricValuation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricValuation(val *MetricValuation) *NullableMetricValuation {
	return &NullableMetricValuation{value: val, isSet: true}
}

func (v NullableMetricValuation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricValuation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
