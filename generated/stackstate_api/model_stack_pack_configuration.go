/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// StackPackConfiguration struct for StackPackConfiguration
type StackPackConfiguration struct {
	Id                  *int64                 `json:"id,omitempty"`
	LastUpdateTimestamp *int64                 `json:"lastUpdateTimestamp,omitempty"`
	Status              string                 `json:"status"`
	Error               *StackPackError        `json:"error,omitempty"`
	StackPackVersion    string                 `json:"stackPackVersion"`
	Config              map[string]interface{} `json:"config"`
}

// NewStackPackConfiguration instantiates a new StackPackConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackPackConfiguration(status string, stackPackVersion string, config map[string]interface{}) *StackPackConfiguration {
	this := StackPackConfiguration{}
	this.Status = status
	this.StackPackVersion = stackPackVersion
	this.Config = config
	return &this
}

// NewStackPackConfigurationWithDefaults instantiates a new StackPackConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackPackConfigurationWithDefaults() *StackPackConfiguration {
	this := StackPackConfiguration{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *StackPackConfiguration) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackPackConfiguration) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *StackPackConfiguration) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *StackPackConfiguration) SetId(v int64) {
	o.Id = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise.
func (o *StackPackConfiguration) GetLastUpdateTimestamp() int64 {
	if o == nil || o.LastUpdateTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackPackConfiguration) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimestamp == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp, true
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *StackPackConfiguration) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given int64 and assigns it to the LastUpdateTimestamp field.
func (o *StackPackConfiguration) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = &v
}

// GetStatus returns the Status field value
func (o *StackPackConfiguration) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *StackPackConfiguration) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *StackPackConfiguration) SetStatus(v string) {
	o.Status = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *StackPackConfiguration) GetError() StackPackError {
	if o == nil || o.Error == nil {
		var ret StackPackError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackPackConfiguration) GetErrorOk() (*StackPackError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *StackPackConfiguration) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given StackPackError and assigns it to the Error field.
func (o *StackPackConfiguration) SetError(v StackPackError) {
	o.Error = &v
}

// GetStackPackVersion returns the StackPackVersion field value
func (o *StackPackConfiguration) GetStackPackVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StackPackVersion
}

// GetStackPackVersionOk returns a tuple with the StackPackVersion field value
// and a boolean to check if the value has been set.
func (o *StackPackConfiguration) GetStackPackVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StackPackVersion, true
}

// SetStackPackVersion sets field value
func (o *StackPackConfiguration) SetStackPackVersion(v string) {
	o.StackPackVersion = v
}

// GetConfig returns the Config field value
func (o *StackPackConfiguration) GetConfig() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *StackPackConfiguration) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Config, true
}

// SetConfig sets field value
func (o *StackPackConfiguration) SetConfig(v map[string]interface{}) {
	o.Config = v
}

func (o StackPackConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTimestamp != nil {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["stackPackVersion"] = o.StackPackVersion
	}
	if true {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableStackPackConfiguration struct {
	value *StackPackConfiguration
	isSet bool
}

func (v NullableStackPackConfiguration) Get() *StackPackConfiguration {
	return v.value
}

func (v *NullableStackPackConfiguration) Set(val *StackPackConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableStackPackConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableStackPackConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackPackConfiguration(val *StackPackConfiguration) *NullableStackPackConfiguration {
	return &NullableStackPackConfiguration{value: val, isSet: true}
}

func (v NullableStackPackConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackPackConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
