/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// CheckState struct for CheckState
type CheckState struct {
	Type string `json:"_type"`
	Id *int64 `json:"id,omitempty"`
	LastUpdateTimestamp *int64 `json:"lastUpdateTimestamp,omitempty"`
	State HealthStateValue `json:"state"`
	LastHealthStateChangeTimestamp int64 `json:"lastHealthStateChangeTimestamp"`
	ActiveErrors []CheckError `json:"activeErrors"`
	Source int64 `json:"source"`
	StateAcknowledgement *CheckStateAcknowledgement `json:"stateAcknowledgement,omitempty"`
	DetailedMessage *string `json:"detailedMessage,omitempty"`
	ShortMessage *string `json:"shortMessage,omitempty"`
	CausingEvents []EventRef `json:"causingEvents"`
	Data map[string]interface{} `json:"data,omitempty"`
}

// NewCheckState instantiates a new CheckState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckState(type_ string, state HealthStateValue, lastHealthStateChangeTimestamp int64, activeErrors []CheckError, source int64, causingEvents []EventRef) *CheckState {
	this := CheckState{}
	this.Type = type_
	this.State = state
	this.LastHealthStateChangeTimestamp = lastHealthStateChangeTimestamp
	this.ActiveErrors = activeErrors
	this.Source = source
	this.CausingEvents = causingEvents
	return &this
}

// NewCheckStateWithDefaults instantiates a new CheckState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckStateWithDefaults() *CheckState {
	this := CheckState{}
	return &this
}

// GetType returns the Type field value
func (o *CheckState) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CheckState) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CheckState) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CheckState) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckState) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CheckState) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CheckState) SetId(v int64) {
	o.Id = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise.
func (o *CheckState) GetLastUpdateTimestamp() int64 {
	if o == nil || o.LastUpdateTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckState) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimestamp == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp, true
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *CheckState) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given int64 and assigns it to the LastUpdateTimestamp field.
func (o *CheckState) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = &v
}

// GetState returns the State field value
func (o *CheckState) GetState() HealthStateValue {
	if o == nil {
		var ret HealthStateValue
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CheckState) GetStateOk() (*HealthStateValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CheckState) SetState(v HealthStateValue) {
	o.State = v
}

// GetLastHealthStateChangeTimestamp returns the LastHealthStateChangeTimestamp field value
func (o *CheckState) GetLastHealthStateChangeTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.LastHealthStateChangeTimestamp
}

// GetLastHealthStateChangeTimestampOk returns a tuple with the LastHealthStateChangeTimestamp field value
// and a boolean to check if the value has been set.
func (o *CheckState) GetLastHealthStateChangeTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastHealthStateChangeTimestamp, true
}

// SetLastHealthStateChangeTimestamp sets field value
func (o *CheckState) SetLastHealthStateChangeTimestamp(v int64) {
	o.LastHealthStateChangeTimestamp = v
}

// GetActiveErrors returns the ActiveErrors field value
func (o *CheckState) GetActiveErrors() []CheckError {
	if o == nil {
		var ret []CheckError
		return ret
	}

	return o.ActiveErrors
}

// GetActiveErrorsOk returns a tuple with the ActiveErrors field value
// and a boolean to check if the value has been set.
func (o *CheckState) GetActiveErrorsOk() ([]CheckError, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveErrors, true
}

// SetActiveErrors sets field value
func (o *CheckState) SetActiveErrors(v []CheckError) {
	o.ActiveErrors = v
}

// GetSource returns the Source field value
func (o *CheckState) GetSource() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *CheckState) GetSourceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *CheckState) SetSource(v int64) {
	o.Source = v
}

// GetStateAcknowledgement returns the StateAcknowledgement field value if set, zero value otherwise.
func (o *CheckState) GetStateAcknowledgement() CheckStateAcknowledgement {
	if o == nil || o.StateAcknowledgement == nil {
		var ret CheckStateAcknowledgement
		return ret
	}
	return *o.StateAcknowledgement
}

// GetStateAcknowledgementOk returns a tuple with the StateAcknowledgement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckState) GetStateAcknowledgementOk() (*CheckStateAcknowledgement, bool) {
	if o == nil || o.StateAcknowledgement == nil {
		return nil, false
	}
	return o.StateAcknowledgement, true
}

// HasStateAcknowledgement returns a boolean if a field has been set.
func (o *CheckState) HasStateAcknowledgement() bool {
	if o != nil && o.StateAcknowledgement != nil {
		return true
	}

	return false
}

// SetStateAcknowledgement gets a reference to the given CheckStateAcknowledgement and assigns it to the StateAcknowledgement field.
func (o *CheckState) SetStateAcknowledgement(v CheckStateAcknowledgement) {
	o.StateAcknowledgement = &v
}

// GetDetailedMessage returns the DetailedMessage field value if set, zero value otherwise.
func (o *CheckState) GetDetailedMessage() string {
	if o == nil || o.DetailedMessage == nil {
		var ret string
		return ret
	}
	return *o.DetailedMessage
}

// GetDetailedMessageOk returns a tuple with the DetailedMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckState) GetDetailedMessageOk() (*string, bool) {
	if o == nil || o.DetailedMessage == nil {
		return nil, false
	}
	return o.DetailedMessage, true
}

// HasDetailedMessage returns a boolean if a field has been set.
func (o *CheckState) HasDetailedMessage() bool {
	if o != nil && o.DetailedMessage != nil {
		return true
	}

	return false
}

// SetDetailedMessage gets a reference to the given string and assigns it to the DetailedMessage field.
func (o *CheckState) SetDetailedMessage(v string) {
	o.DetailedMessage = &v
}

// GetShortMessage returns the ShortMessage field value if set, zero value otherwise.
func (o *CheckState) GetShortMessage() string {
	if o == nil || o.ShortMessage == nil {
		var ret string
		return ret
	}
	return *o.ShortMessage
}

// GetShortMessageOk returns a tuple with the ShortMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckState) GetShortMessageOk() (*string, bool) {
	if o == nil || o.ShortMessage == nil {
		return nil, false
	}
	return o.ShortMessage, true
}

// HasShortMessage returns a boolean if a field has been set.
func (o *CheckState) HasShortMessage() bool {
	if o != nil && o.ShortMessage != nil {
		return true
	}

	return false
}

// SetShortMessage gets a reference to the given string and assigns it to the ShortMessage field.
func (o *CheckState) SetShortMessage(v string) {
	o.ShortMessage = &v
}

// GetCausingEvents returns the CausingEvents field value
func (o *CheckState) GetCausingEvents() []EventRef {
	if o == nil {
		var ret []EventRef
		return ret
	}

	return o.CausingEvents
}

// GetCausingEventsOk returns a tuple with the CausingEvents field value
// and a boolean to check if the value has been set.
func (o *CheckState) GetCausingEventsOk() ([]EventRef, bool) {
	if o == nil {
		return nil, false
	}
	return o.CausingEvents, true
}

// SetCausingEvents sets field value
func (o *CheckState) SetCausingEvents(v []EventRef) {
	o.CausingEvents = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *CheckState) GetData() map[string]interface{} {
	if o == nil || o.Data == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckState) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *CheckState) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *CheckState) SetData(v map[string]interface{}) {
	o.Data = v
}

func (o CheckState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTimestamp != nil {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if true {
		toSerialize["state"] = o.State
	}
	if true {
		toSerialize["lastHealthStateChangeTimestamp"] = o.LastHealthStateChangeTimestamp
	}
	if true {
		toSerialize["activeErrors"] = o.ActiveErrors
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if o.StateAcknowledgement != nil {
		toSerialize["stateAcknowledgement"] = o.StateAcknowledgement
	}
	if o.DetailedMessage != nil {
		toSerialize["detailedMessage"] = o.DetailedMessage
	}
	if o.ShortMessage != nil {
		toSerialize["shortMessage"] = o.ShortMessage
	}
	if true {
		toSerialize["causingEvents"] = o.CausingEvents
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableCheckState struct {
	value *CheckState
	isSet bool
}

func (v NullableCheckState) Get() *CheckState {
	return v.value
}

func (v *NullableCheckState) Set(val *CheckState) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckState) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckState(val *CheckState) *NullableCheckState {
	return &NullableCheckState{value: val, isSet: true}
}

func (v NullableCheckState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


