/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// GetCausingEventsServiceUnaivailable - struct for GetCausingEventsServiceUnaivailable
type GetCausingEventsServiceUnaivailable struct {
	GetTopologyTimeout   *GetTopologyTimeout
	TooManyActiveQueries *TooManyActiveQueries
}

// GetTopologyTimeoutAsGetCausingEventsServiceUnaivailable is a convenience function that returns GetTopologyTimeout wrapped in GetCausingEventsServiceUnaivailable
func GetTopologyTimeoutAsGetCausingEventsServiceUnaivailable(v *GetTopologyTimeout) GetCausingEventsServiceUnaivailable {
	return GetCausingEventsServiceUnaivailable{
		GetTopologyTimeout: v,
	}
}

// TooManyActiveQueriesAsGetCausingEventsServiceUnaivailable is a convenience function that returns TooManyActiveQueries wrapped in GetCausingEventsServiceUnaivailable
func TooManyActiveQueriesAsGetCausingEventsServiceUnaivailable(v *TooManyActiveQueries) GetCausingEventsServiceUnaivailable {
	return GetCausingEventsServiceUnaivailable{
		TooManyActiveQueries: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCausingEventsServiceUnaivailable) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'GetTopologyTimeout'
	if jsonDict["_type"] == "GetTopologyTimeout" {
		// try to unmarshal JSON data into GetTopologyTimeout
		err = json.Unmarshal(data, &dst.GetTopologyTimeout)
		if err == nil {
			return nil // data stored in dst.GetTopologyTimeout, return on the first match
		} else {
			dst.GetTopologyTimeout = nil
			return fmt.Errorf("Failed to unmarshal GetCausingEventsServiceUnaivailable as GetTopologyTimeout: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TooManyActiveQueries'
	if jsonDict["_type"] == "TooManyActiveQueries" {
		// try to unmarshal JSON data into TooManyActiveQueries
		err = json.Unmarshal(data, &dst.TooManyActiveQueries)
		if err == nil {
			return nil // data stored in dst.TooManyActiveQueries, return on the first match
		} else {
			dst.TooManyActiveQueries = nil
			return fmt.Errorf("Failed to unmarshal GetCausingEventsServiceUnaivailable as TooManyActiveQueries: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCausingEventsServiceUnaivailable) MarshalJSON() ([]byte, error) {
	if src.GetTopologyTimeout != nil {
		return json.Marshal(&src.GetTopologyTimeout)
	}

	if src.TooManyActiveQueries != nil {
		return json.Marshal(&src.TooManyActiveQueries)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCausingEventsServiceUnaivailable) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.GetTopologyTimeout != nil {
		return obj.GetTopologyTimeout
	}

	if obj.TooManyActiveQueries != nil {
		return obj.TooManyActiveQueries
	}

	// all schemas are nil
	return nil
}

type NullableGetCausingEventsServiceUnaivailable struct {
	value *GetCausingEventsServiceUnaivailable
	isSet bool
}

func (v NullableGetCausingEventsServiceUnaivailable) Get() *GetCausingEventsServiceUnaivailable {
	return v.value
}

func (v *NullableGetCausingEventsServiceUnaivailable) Set(val *GetCausingEventsServiceUnaivailable) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCausingEventsServiceUnaivailable) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCausingEventsServiceUnaivailable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCausingEventsServiceUnaivailable(val *GetCausingEventsServiceUnaivailable) *NullableGetCausingEventsServiceUnaivailable {
	return &NullableGetCausingEventsServiceUnaivailable{value: val, isSet: true}
}

func (v NullableGetCausingEventsServiceUnaivailable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCausingEventsServiceUnaivailable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
