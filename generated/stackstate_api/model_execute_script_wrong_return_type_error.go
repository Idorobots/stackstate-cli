/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// ExecuteScriptWrongReturnTypeError struct for ExecuteScriptWrongReturnTypeError
type ExecuteScriptWrongReturnTypeError struct {
	Type string `json:"_type"`
	Message string `json:"message"`
	ActualReturnType string `json:"actualReturnType"`
	ExpectedReturnType string `json:"expectedReturnType"`
}

// NewExecuteScriptWrongReturnTypeError instantiates a new ExecuteScriptWrongReturnTypeError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteScriptWrongReturnTypeError(type_ string, message string, actualReturnType string, expectedReturnType string) *ExecuteScriptWrongReturnTypeError {
	this := ExecuteScriptWrongReturnTypeError{}
	this.Type = type_
	this.Message = message
	this.ActualReturnType = actualReturnType
	this.ExpectedReturnType = expectedReturnType
	return &this
}

// NewExecuteScriptWrongReturnTypeErrorWithDefaults instantiates a new ExecuteScriptWrongReturnTypeError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteScriptWrongReturnTypeErrorWithDefaults() *ExecuteScriptWrongReturnTypeError {
	this := ExecuteScriptWrongReturnTypeError{}
	return &this
}

// GetType returns the Type field value
func (o *ExecuteScriptWrongReturnTypeError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptWrongReturnTypeError) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExecuteScriptWrongReturnTypeError) SetType(v string) {
	o.Type = v
}

// GetMessage returns the Message field value
func (o *ExecuteScriptWrongReturnTypeError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptWrongReturnTypeError) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ExecuteScriptWrongReturnTypeError) SetMessage(v string) {
	o.Message = v
}

// GetActualReturnType returns the ActualReturnType field value
func (o *ExecuteScriptWrongReturnTypeError) GetActualReturnType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActualReturnType
}

// GetActualReturnTypeOk returns a tuple with the ActualReturnType field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptWrongReturnTypeError) GetActualReturnTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ActualReturnType, true
}

// SetActualReturnType sets field value
func (o *ExecuteScriptWrongReturnTypeError) SetActualReturnType(v string) {
	o.ActualReturnType = v
}

// GetExpectedReturnType returns the ExpectedReturnType field value
func (o *ExecuteScriptWrongReturnTypeError) GetExpectedReturnType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExpectedReturnType
}

// GetExpectedReturnTypeOk returns a tuple with the ExpectedReturnType field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptWrongReturnTypeError) GetExpectedReturnTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ExpectedReturnType, true
}

// SetExpectedReturnType sets field value
func (o *ExecuteScriptWrongReturnTypeError) SetExpectedReturnType(v string) {
	o.ExpectedReturnType = v
}

func (o ExecuteScriptWrongReturnTypeError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["actualReturnType"] = o.ActualReturnType
	}
	if true {
		toSerialize["expectedReturnType"] = o.ExpectedReturnType
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteScriptWrongReturnTypeError struct {
	value *ExecuteScriptWrongReturnTypeError
	isSet bool
}

func (v NullableExecuteScriptWrongReturnTypeError) Get() *ExecuteScriptWrongReturnTypeError {
	return v.value
}

func (v *NullableExecuteScriptWrongReturnTypeError) Set(val *ExecuteScriptWrongReturnTypeError) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteScriptWrongReturnTypeError) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteScriptWrongReturnTypeError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteScriptWrongReturnTypeError(val *ExecuteScriptWrongReturnTypeError) *NullableExecuteScriptWrongReturnTypeError {
	return &NullableExecuteScriptWrongReturnTypeError{value: val, isSet: true}
}

func (v NullableExecuteScriptWrongReturnTypeError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteScriptWrongReturnTypeError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


