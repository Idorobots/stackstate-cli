/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// MonitorStatusValue If a monitor status is set to DISABLED it won't produce any health states but it can still be run manually to inspect it's output
type MonitorStatusValue string

// List of MonitorStatusValue
const (
	MONITORSTATUSVALUE_ENABLED  MonitorStatusValue = "ENABLED"
	MONITORSTATUSVALUE_DISABLED MonitorStatusValue = "DISABLED"
)

// All allowed values of MonitorStatusValue enum
var AllowedMonitorStatusValueEnumValues = []MonitorStatusValue{
	"ENABLED",
	"DISABLED",
}

func (v *MonitorStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitorStatusValue(value)
	for _, existing := range AllowedMonitorStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitorStatusValue", value)
}

// NewMonitorStatusValueFromValue returns a pointer to a valid MonitorStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitorStatusValueFromValue(v string) (*MonitorStatusValue, error) {
	ev := MonitorStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitorStatusValue: valid values are %v", v, AllowedMonitorStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitorStatusValue) IsValid() bool {
	for _, existing := range AllowedMonitorStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitorStatusValue value
func (v MonitorStatusValue) Ptr() *MonitorStatusValue {
	return &v
}

type NullableMonitorStatusValue struct {
	value *MonitorStatusValue
	isSet bool
}

func (v NullableMonitorStatusValue) Get() *MonitorStatusValue {
	return v.value
}

func (v *NullableMonitorStatusValue) Set(val *MonitorStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorStatusValue(val *MonitorStatusValue) *NullableMonitorStatusValue {
	return &NullableMonitorStatusValue{value: val, isSet: true}
}

func (v NullableMonitorStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
