/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// StackPackStepValue struct for StackPackStepValue
type StackPackStepValue struct {
	Type *string `json:"_type,omitempty"`
}

// NewStackPackStepValue instantiates a new StackPackStepValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackPackStepValue() *StackPackStepValue {
	this := StackPackStepValue{}
	return &this
}

// NewStackPackStepValueWithDefaults instantiates a new StackPackStepValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackPackStepValueWithDefaults() *StackPackStepValue {
	this := StackPackStepValue{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *StackPackStepValue) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackPackStepValue) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *StackPackStepValue) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *StackPackStepValue) SetType(v string) {
	o.Type = &v
}

func (o StackPackStepValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["_type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableStackPackStepValue struct {
	value *StackPackStepValue
	isSet bool
}

func (v NullableStackPackStepValue) Get() *StackPackStepValue {
	return v.value
}

func (v *NullableStackPackStepValue) Set(val *StackPackStepValue) {
	v.value = val
	v.isSet = true
}

func (v NullableStackPackStepValue) IsSet() bool {
	return v.isSet
}

func (v *NullableStackPackStepValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackPackStepValue(val *StackPackStepValue) *NullableStackPackStepValue {
	return &NullableStackPackStepValue{value: val, isSet: true}
}

func (v NullableStackPackStepValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackPackStepValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


