/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// EventTag struct for EventTag
type EventTag struct {
	Key string `json:"key"`
	Value string `json:"value"`
}

// NewEventTag instantiates a new EventTag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTag(key string, value string) *EventTag {
	this := EventTag{}
	this.Key = key
	this.Value = value
	return &this
}

// NewEventTagWithDefaults instantiates a new EventTag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTagWithDefaults() *EventTag {
	this := EventTag{}
	return &this
}

// GetKey returns the Key field value
func (o *EventTag) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *EventTag) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *EventTag) SetKey(v string) {
	o.Key = v
}

// GetValue returns the Value field value
func (o *EventTag) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *EventTag) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *EventTag) SetValue(v string) {
	o.Value = v
}

func (o EventTag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableEventTag struct {
	value *EventTag
	isSet bool
}

func (v NullableEventTag) Get() *EventTag {
	return v.value
}

func (v *NullableEventTag) Set(val *EventTag) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTag) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTag(val *EventTag) *NullableEventTag {
	return &NullableEventTag{value: val, isSet: true}
}

func (v NullableEventTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


