/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// Exemplar struct for Exemplar
type Exemplar struct {
	Labels ValueTuple `json:"labels"`
	Value string `json:"value"`
	Timestamp int64 `json:"timestamp"`
}

// NewExemplar instantiates a new Exemplar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExemplar(labels ValueTuple, value string, timestamp int64) *Exemplar {
	this := Exemplar{}
	this.Labels = labels
	this.Value = value
	this.Timestamp = timestamp
	return &this
}

// NewExemplarWithDefaults instantiates a new Exemplar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExemplarWithDefaults() *Exemplar {
	this := Exemplar{}
	return &this
}

// GetLabels returns the Labels field value
func (o *Exemplar) GetLabels() ValueTuple {
	if o == nil {
		var ret ValueTuple
		return ret
	}

	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value
// and a boolean to check if the value has been set.
func (o *Exemplar) GetLabelsOk() (*ValueTuple, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Labels, true
}

// SetLabels sets field value
func (o *Exemplar) SetLabels(v ValueTuple) {
	o.Labels = v
}

// GetValue returns the Value field value
func (o *Exemplar) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *Exemplar) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *Exemplar) SetValue(v string) {
	o.Value = v
}

// GetTimestamp returns the Timestamp field value
func (o *Exemplar) GetTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *Exemplar) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *Exemplar) SetTimestamp(v int64) {
	o.Timestamp = v
}

func (o Exemplar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["labels"] = o.Labels
	}
	if true {
		toSerialize["value"] = o.Value
	}
	if true {
		toSerialize["timestamp"] = o.Timestamp
	}
	return json.Marshal(toSerialize)
}

type NullableExemplar struct {
	value *Exemplar
	isSet bool
}

func (v NullableExemplar) Get() *Exemplar {
	return v.value
}

func (v *NullableExemplar) Set(val *Exemplar) {
	v.value = val
	v.isSet = true
}

func (v NullableExemplar) IsSet() bool {
	return v.isSet
}

func (v *NullableExemplar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExemplar(val *Exemplar) *NullableExemplar {
	return &NullableExemplar{value: val, isSet: true}
}

func (v NullableExemplar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExemplar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


