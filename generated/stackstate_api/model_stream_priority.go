/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// StreamPriority the model 'StreamPriority'
type StreamPriority string

// List of StreamPriority
const (
	STREAMPRIORITY_HIGH   StreamPriority = "HIGH"
	STREAMPRIORITY_MEDIUM StreamPriority = "MEDIUM"
	STREAMPRIORITY_LOW    StreamPriority = "LOW"
)

// All allowed values of StreamPriority enum
var AllowedStreamPriorityEnumValues = []StreamPriority{
	"HIGH",
	"MEDIUM",
	"LOW",
}

func (v *StreamPriority) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StreamPriority(value)
	for _, existing := range AllowedStreamPriorityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StreamPriority", value)
}

// NewStreamPriorityFromValue returns a pointer to a valid StreamPriority
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStreamPriorityFromValue(v string) (*StreamPriority, error) {
	ev := StreamPriority(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StreamPriority: valid values are %v", v, AllowedStreamPriorityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StreamPriority) IsValid() bool {
	for _, existing := range AllowedStreamPriorityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StreamPriority value
func (v StreamPriority) Ptr() *StreamPriority {
	return &v
}

type NullableStreamPriority struct {
	value *StreamPriority
	isSet bool
}

func (v NullableStreamPriority) Get() *StreamPriority {
	return v.value
}

func (v *NullableStreamPriority) Set(val *StreamPriority) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamPriority) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamPriority) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamPriority(val *StreamPriority) *NullableStreamPriority {
	return &NullableStreamPriority{value: val, isSet: true}
}

func (v NullableStreamPriority) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamPriority) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
