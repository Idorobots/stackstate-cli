/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// GetCausingEventsBadRequest - struct for GetCausingEventsBadRequest
type GetCausingEventsBadRequest struct {
	LimitOutOfRange        *LimitOutOfRange
	TopologyTimeOutOfRange *TopologyTimeOutOfRange
}

// LimitOutOfRangeAsGetCausingEventsBadRequest is a convenience function that returns LimitOutOfRange wrapped in GetCausingEventsBadRequest
func LimitOutOfRangeAsGetCausingEventsBadRequest(v *LimitOutOfRange) GetCausingEventsBadRequest {
	return GetCausingEventsBadRequest{
		LimitOutOfRange: v,
	}
}

// TopologyTimeOutOfRangeAsGetCausingEventsBadRequest is a convenience function that returns TopologyTimeOutOfRange wrapped in GetCausingEventsBadRequest
func TopologyTimeOutOfRangeAsGetCausingEventsBadRequest(v *TopologyTimeOutOfRange) GetCausingEventsBadRequest {
	return GetCausingEventsBadRequest{
		TopologyTimeOutOfRange: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCausingEventsBadRequest) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'LimitOutOfRange'
	if jsonDict["_type"] == "LimitOutOfRange" {
		// try to unmarshal JSON data into LimitOutOfRange
		err = json.Unmarshal(data, &dst.LimitOutOfRange)
		if err == nil {
			return nil // data stored in dst.LimitOutOfRange, return on the first match
		} else {
			dst.LimitOutOfRange = nil
			return fmt.Errorf("Failed to unmarshal GetCausingEventsBadRequest as LimitOutOfRange: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TopologyTimeOutOfRange'
	if jsonDict["_type"] == "TopologyTimeOutOfRange" {
		// try to unmarshal JSON data into TopologyTimeOutOfRange
		err = json.Unmarshal(data, &dst.TopologyTimeOutOfRange)
		if err == nil {
			return nil // data stored in dst.TopologyTimeOutOfRange, return on the first match
		} else {
			dst.TopologyTimeOutOfRange = nil
			return fmt.Errorf("Failed to unmarshal GetCausingEventsBadRequest as TopologyTimeOutOfRange: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCausingEventsBadRequest) MarshalJSON() ([]byte, error) {
	if src.LimitOutOfRange != nil {
		return json.Marshal(&src.LimitOutOfRange)
	}

	if src.TopologyTimeOutOfRange != nil {
		return json.Marshal(&src.TopologyTimeOutOfRange)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCausingEventsBadRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.LimitOutOfRange != nil {
		return obj.LimitOutOfRange
	}

	if obj.TopologyTimeOutOfRange != nil {
		return obj.TopologyTimeOutOfRange
	}

	// all schemas are nil
	return nil
}

type NullableGetCausingEventsBadRequest struct {
	value *GetCausingEventsBadRequest
	isSet bool
}

func (v NullableGetCausingEventsBadRequest) Get() *GetCausingEventsBadRequest {
	return v.value
}

func (v *NullableGetCausingEventsBadRequest) Set(val *GetCausingEventsBadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCausingEventsBadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCausingEventsBadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCausingEventsBadRequest(val *GetCausingEventsBadRequest) *NullableGetCausingEventsBadRequest {
	return &NullableGetCausingEventsBadRequest{value: val, isSet: true}
}

func (v NullableGetCausingEventsBadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCausingEventsBadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
