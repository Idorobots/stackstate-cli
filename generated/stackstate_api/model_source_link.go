/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SourceLink struct for SourceLink
type SourceLink struct {
	Title string `json:"title"`
	Url   string `json:"url"`
}

// NewSourceLink instantiates a new SourceLink object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceLink(title string, url string) *SourceLink {
	this := SourceLink{}
	this.Title = title
	this.Url = url
	return &this
}

// NewSourceLinkWithDefaults instantiates a new SourceLink object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceLinkWithDefaults() *SourceLink {
	this := SourceLink{}
	return &this
}

// GetTitle returns the Title field value
func (o *SourceLink) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SourceLink) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SourceLink) SetTitle(v string) {
	o.Title = v
}

// GetUrl returns the Url field value
func (o *SourceLink) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SourceLink) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SourceLink) SetUrl(v string) {
	o.Url = v
}

func (o SourceLink) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["url"] = o.Url
	}
	return json.Marshal(toSerialize)
}

type NullableSourceLink struct {
	value *SourceLink
	isSet bool
}

func (v NullableSourceLink) Get() *SourceLink {
	return v.value
}

func (v *NullableSourceLink) Set(val *SourceLink) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceLink) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceLink) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceLink(val *SourceLink) *NullableSourceLink {
	return &NullableSourceLink{value: val, isSet: true}
}

func (v NullableSourceLink) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceLink) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
