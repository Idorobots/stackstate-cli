/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// HealthSubStreamSnapshot struct for HealthSubStreamSnapshot
type HealthSubStreamSnapshot struct {
	Type             string `json:"_type"`
	ExpiryIntervalMs *int32 `json:"expiryIntervalMs,omitempty"`
	RepeatIntervalMs int32  `json:"repeatIntervalMs"`
}

// NewHealthSubStreamSnapshot instantiates a new HealthSubStreamSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthSubStreamSnapshot(type_ string, repeatIntervalMs int32) *HealthSubStreamSnapshot {
	this := HealthSubStreamSnapshot{}
	this.Type = type_
	this.RepeatIntervalMs = repeatIntervalMs
	return &this
}

// NewHealthSubStreamSnapshotWithDefaults instantiates a new HealthSubStreamSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthSubStreamSnapshotWithDefaults() *HealthSubStreamSnapshot {
	this := HealthSubStreamSnapshot{}
	return &this
}

// GetType returns the Type field value
func (o *HealthSubStreamSnapshot) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HealthSubStreamSnapshot) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HealthSubStreamSnapshot) SetType(v string) {
	o.Type = v
}

// GetExpiryIntervalMs returns the ExpiryIntervalMs field value if set, zero value otherwise.
func (o *HealthSubStreamSnapshot) GetExpiryIntervalMs() int32 {
	if o == nil || o.ExpiryIntervalMs == nil {
		var ret int32
		return ret
	}
	return *o.ExpiryIntervalMs
}

// GetExpiryIntervalMsOk returns a tuple with the ExpiryIntervalMs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthSubStreamSnapshot) GetExpiryIntervalMsOk() (*int32, bool) {
	if o == nil || o.ExpiryIntervalMs == nil {
		return nil, false
	}
	return o.ExpiryIntervalMs, true
}

// HasExpiryIntervalMs returns a boolean if a field has been set.
func (o *HealthSubStreamSnapshot) HasExpiryIntervalMs() bool {
	if o != nil && o.ExpiryIntervalMs != nil {
		return true
	}

	return false
}

// SetExpiryIntervalMs gets a reference to the given int32 and assigns it to the ExpiryIntervalMs field.
func (o *HealthSubStreamSnapshot) SetExpiryIntervalMs(v int32) {
	o.ExpiryIntervalMs = &v
}

// GetRepeatIntervalMs returns the RepeatIntervalMs field value
func (o *HealthSubStreamSnapshot) GetRepeatIntervalMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RepeatIntervalMs
}

// GetRepeatIntervalMsOk returns a tuple with the RepeatIntervalMs field value
// and a boolean to check if the value has been set.
func (o *HealthSubStreamSnapshot) GetRepeatIntervalMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RepeatIntervalMs, true
}

// SetRepeatIntervalMs sets field value
func (o *HealthSubStreamSnapshot) SetRepeatIntervalMs(v int32) {
	o.RepeatIntervalMs = v
}

func (o HealthSubStreamSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if o.ExpiryIntervalMs != nil {
		toSerialize["expiryIntervalMs"] = o.ExpiryIntervalMs
	}
	if true {
		toSerialize["repeatIntervalMs"] = o.RepeatIntervalMs
	}
	return json.Marshal(toSerialize)
}

type NullableHealthSubStreamSnapshot struct {
	value *HealthSubStreamSnapshot
	isSet bool
}

func (v NullableHealthSubStreamSnapshot) Get() *HealthSubStreamSnapshot {
	return v.value
}

func (v *NullableHealthSubStreamSnapshot) Set(val *HealthSubStreamSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthSubStreamSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthSubStreamSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthSubStreamSnapshot(val *HealthSubStreamSnapshot) *NullableHealthSubStreamSnapshot {
	return &NullableHealthSubStreamSnapshot{value: val, isSet: true}
}

func (v NullableHealthSubStreamSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthSubStreamSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
