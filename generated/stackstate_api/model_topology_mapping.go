/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// TopologyMapping - struct for TopologyMapping
type TopologyMapping struct {
	FieldMapping *FieldMapping
}

// FieldMappingAsTopologyMapping is a convenience function that returns FieldMapping wrapped in TopologyMapping
func FieldMappingAsTopologyMapping(v *FieldMapping) TopologyMapping {
	return TopologyMapping{
		FieldMapping: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TopologyMapping) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'FieldMapping'
	if jsonDict["_type"] == "FieldMapping" {
		// try to unmarshal JSON data into FieldMapping
		err = json.Unmarshal(data, &dst.FieldMapping)
		if err == nil {
			return nil // data stored in dst.FieldMapping, return on the first match
		} else {
			dst.FieldMapping = nil
			return fmt.Errorf("Failed to unmarshal TopologyMapping as FieldMapping: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TopologyMapping) MarshalJSON() ([]byte, error) {
	if src.FieldMapping != nil {
		return json.Marshal(&src.FieldMapping)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TopologyMapping) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FieldMapping != nil {
		return obj.FieldMapping
	}

	// all schemas are nil
	return nil
}

type NullableTopologyMapping struct {
	value *TopologyMapping
	isSet bool
}

func (v NullableTopologyMapping) Get() *TopologyMapping {
	return v.value
}

func (v *NullableTopologyMapping) Set(val *TopologyMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologyMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologyMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologyMapping(val *TopologyMapping) *NullableTopologyMapping {
	return &NullableTopologyMapping{value: val, isSet: true}
}

func (v NullableTopologyMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologyMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


