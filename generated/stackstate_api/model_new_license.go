/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// NewLicense struct for NewLicense
type NewLicense struct {
	Key string `json:"key"`
}

// NewNewLicense instantiates a new NewLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewLicense(key string) *NewLicense {
	this := NewLicense{}
	this.Key = key
	return &this
}

// NewNewLicenseWithDefaults instantiates a new NewLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewLicenseWithDefaults() *NewLicense {
	this := NewLicense{}
	return &this
}

// GetKey returns the Key field value
func (o *NewLicense) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *NewLicense) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *NewLicense) SetKey(v string) {
	o.Key = v
}

func (o NewLicense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["key"] = o.Key
	}
	return json.Marshal(toSerialize)
}

type NullableNewLicense struct {
	value *NewLicense
	isSet bool
}

func (v NullableNewLicense) Get() *NewLicense {
	return v.value
}

func (v *NullableNewLicense) Set(val *NewLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableNewLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableNewLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewLicense(val *NewLicense) *NullableNewLicense {
	return &NullableNewLicense{value: val, isSet: true}
}

func (v NullableNewLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


