/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// PromSampleInner - Unix timestamp with sample value (as a string)
type PromSampleInner struct {
	Float32 *float32
	String  *string
}

// float32AsPromSampleInner is a convenience function that returns float32 wrapped in PromSampleInner
func Float32AsPromSampleInner(v *float32) PromSampleInner {
	return PromSampleInner{
		Float32: v,
	}
}

// stringAsPromSampleInner is a convenience function that returns string wrapped in PromSampleInner
func StringAsPromSampleInner(v *string) PromSampleInner {
	return PromSampleInner{
		String: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *PromSampleInner) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Float32
	err = json.Unmarshal(data, &dst.Float32)
	if err == nil {
		jsonfloat32, _ := json.Marshal(dst.Float32)
		if string(jsonfloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = json.Unmarshal(data, &dst.String)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.String)
		if string(jsonstring) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(PromSampleInner)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(PromSampleInner)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PromSampleInner) MarshalJSON() ([]byte, error) {
	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PromSampleInner) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullablePromSampleInner struct {
	value *PromSampleInner
	isSet bool
}

func (v NullablePromSampleInner) Get() *PromSampleInner {
	return v.value
}

func (v *NullablePromSampleInner) Set(val *PromSampleInner) {
	v.value = val
	v.isSet = true
}

func (v NullablePromSampleInner) IsSet() bool {
	return v.isSet
}

func (v *NullablePromSampleInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromSampleInner(val *PromSampleInner) *NullablePromSampleInner {
	return &NullablePromSampleInner{value: val, isSet: true}
}

func (v NullablePromSampleInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromSampleInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
