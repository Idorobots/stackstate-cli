/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ExemplarData struct for ExemplarData
type ExemplarData struct {
	SeriesLabels map[string]string `json:"seriesLabels"`
	Exemplars []Exemplar `json:"exemplars"`
}

// NewExemplarData instantiates a new ExemplarData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExemplarData(seriesLabels map[string]string, exemplars []Exemplar) *ExemplarData {
	this := ExemplarData{}
	this.SeriesLabels = seriesLabels
	this.Exemplars = exemplars
	return &this
}

// NewExemplarDataWithDefaults instantiates a new ExemplarData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExemplarDataWithDefaults() *ExemplarData {
	this := ExemplarData{}
	return &this
}

// GetSeriesLabels returns the SeriesLabels field value
func (o *ExemplarData) GetSeriesLabels() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.SeriesLabels
}

// GetSeriesLabelsOk returns a tuple with the SeriesLabels field value
// and a boolean to check if the value has been set.
func (o *ExemplarData) GetSeriesLabelsOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SeriesLabels, true
}

// SetSeriesLabels sets field value
func (o *ExemplarData) SetSeriesLabels(v map[string]string) {
	o.SeriesLabels = v
}

// GetExemplars returns the Exemplars field value
func (o *ExemplarData) GetExemplars() []Exemplar {
	if o == nil {
		var ret []Exemplar
		return ret
	}

	return o.Exemplars
}

// GetExemplarsOk returns a tuple with the Exemplars field value
// and a boolean to check if the value has been set.
func (o *ExemplarData) GetExemplarsOk() ([]Exemplar, bool) {
	if o == nil {
		return nil, false
	}
	return o.Exemplars, true
}

// SetExemplars sets field value
func (o *ExemplarData) SetExemplars(v []Exemplar) {
	o.Exemplars = v
}

func (o ExemplarData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["seriesLabels"] = o.SeriesLabels
	}
	if true {
		toSerialize["exemplars"] = o.Exemplars
	}
	return json.Marshal(toSerialize)
}

type NullableExemplarData struct {
	value *ExemplarData
	isSet bool
}

func (v NullableExemplarData) Get() *ExemplarData {
	return v.value
}

func (v *NullableExemplarData) Set(val *ExemplarData) {
	v.value = val
	v.isSet = true
}

func (v NullableExemplarData) IsSet() bool {
	return v.isSet
}

func (v *NullableExemplarData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExemplarData(val *ExemplarData) *NullableExemplarData {
	return &NullableExemplarData{value: val, isSet: true}
}

func (v NullableExemplarData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExemplarData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


