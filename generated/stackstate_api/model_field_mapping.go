/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// FieldMapping struct for FieldMapping
type FieldMapping struct {
	Type string `json:"_type"`
	EventField string `json:"eventField"`
	TagKey string `json:"tagKey"`
}

// NewFieldMapping instantiates a new FieldMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldMapping(type_ string, eventField string, tagKey string) *FieldMapping {
	this := FieldMapping{}
	this.Type = type_
	this.EventField = eventField
	this.TagKey = tagKey
	return &this
}

// NewFieldMappingWithDefaults instantiates a new FieldMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldMappingWithDefaults() *FieldMapping {
	this := FieldMapping{}
	return &this
}

// GetType returns the Type field value
func (o *FieldMapping) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FieldMapping) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FieldMapping) SetType(v string) {
	o.Type = v
}

// GetEventField returns the EventField field value
func (o *FieldMapping) GetEventField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventField
}

// GetEventFieldOk returns a tuple with the EventField field value
// and a boolean to check if the value has been set.
func (o *FieldMapping) GetEventFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EventField, true
}

// SetEventField sets field value
func (o *FieldMapping) SetEventField(v string) {
	o.EventField = v
}

// GetTagKey returns the TagKey field value
func (o *FieldMapping) GetTagKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TagKey
}

// GetTagKeyOk returns a tuple with the TagKey field value
// and a boolean to check if the value has been set.
func (o *FieldMapping) GetTagKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TagKey, true
}

// SetTagKey sets field value
func (o *FieldMapping) SetTagKey(v string) {
	o.TagKey = v
}

func (o FieldMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["eventField"] = o.EventField
	}
	if true {
		toSerialize["tagKey"] = o.TagKey
	}
	return json.Marshal(toSerialize)
}

type NullableFieldMapping struct {
	value *FieldMapping
	isSet bool
}

func (v NullableFieldMapping) Get() *FieldMapping {
	return v.value
}

func (v *NullableFieldMapping) Set(val *FieldMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldMapping(val *FieldMapping) *NullableFieldMapping {
	return &NullableFieldMapping{value: val, isSet: true}
}

func (v NullableFieldMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


