/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
	"fmt"
)

// RootCauseMode the model 'RootCauseMode'
type RootCauseMode string

// List of RootCauseMode
const (
	NO_CAUSE RootCauseMode = "no-cause"
	CAUSE_ONLY RootCauseMode = "cause-only"
	FULL_CAUSE_TREE RootCauseMode = "full-cause-tree"
)

// All allowed values of RootCauseMode enum
var AllowedRootCauseModeEnumValues = []RootCauseMode{
	"no-cause",
	"cause-only",
	"full-cause-tree",
}

func (v *RootCauseMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RootCauseMode(value)
	for _, existing := range AllowedRootCauseModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RootCauseMode", value)
}

// NewRootCauseModeFromValue returns a pointer to a valid RootCauseMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRootCauseModeFromValue(v string) (*RootCauseMode, error) {
	ev := RootCauseMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RootCauseMode: valid values are %v", v, AllowedRootCauseModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RootCauseMode) IsValid() bool {
	for _, existing := range AllowedRootCauseModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RootCauseMode value
func (v RootCauseMode) Ptr() *RootCauseMode {
	return &v
}

type NullableRootCauseMode struct {
	value *RootCauseMode
	isSet bool
}

func (v NullableRootCauseMode) Get() *RootCauseMode {
	return v.value
}

func (v *NullableRootCauseMode) Set(val *RootCauseMode) {
	v.value = val
	v.isSet = true
}

func (v NullableRootCauseMode) IsSet() bool {
	return v.isSet
}

func (v *NullableRootCauseMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootCauseMode(val *RootCauseMode) *NullableRootCauseMode {
	return &NullableRootCauseMode{value: val, isSet: true}
}

func (v NullableRootCauseMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootCauseMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

