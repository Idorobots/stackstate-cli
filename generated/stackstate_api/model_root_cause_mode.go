/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// RootCauseMode the model 'RootCauseMode'
type RootCauseMode string

// List of RootCauseMode
const (
	ROOTCAUSEMODE_NO_CAUSE        RootCauseMode = "no-cause"
	ROOTCAUSEMODE_CAUSE_ONLY      RootCauseMode = "cause-only"
	ROOTCAUSEMODE_FULL_CAUSE_TREE RootCauseMode = "full-cause-tree"
)

// All allowed values of RootCauseMode enum
var AllowedRootCauseModeEnumValues = []RootCauseMode{
	"no-cause",
	"cause-only",
	"full-cause-tree",
}

func (v *RootCauseMode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RootCauseMode(value)
	for _, existing := range AllowedRootCauseModeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RootCauseMode", value)
}

// NewRootCauseModeFromValue returns a pointer to a valid RootCauseMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRootCauseModeFromValue(v string) (*RootCauseMode, error) {
	ev := RootCauseMode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RootCauseMode: valid values are %v", v, AllowedRootCauseModeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RootCauseMode) IsValid() bool {
	for _, existing := range AllowedRootCauseModeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RootCauseMode value
func (v RootCauseMode) Ptr() *RootCauseMode {
	return &v
}

type NullableRootCauseMode struct {
	value *RootCauseMode
	isSet bool
}

func (v NullableRootCauseMode) Get() *RootCauseMode {
	return v.value
}

func (v *NullableRootCauseMode) Set(val *RootCauseMode) {
	v.value = val
	v.isSet = true
}

func (v NullableRootCauseMode) IsSet() bool {
	return v.isSet
}

func (v *NullableRootCauseMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRootCauseMode(val *RootCauseMode) *NullableRootCauseMode {
	return &NullableRootCauseMode{value: val, isSet: true}
}

func (v NullableRootCauseMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRootCauseMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
