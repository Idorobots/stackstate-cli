/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// ExecuteScriptError - struct for ExecuteScriptError
type ExecuteScriptError struct {
	ExecuteScriptArgumentsScriptError *ExecuteScriptArgumentsScriptError
	ExecuteScriptExceptionError       *ExecuteScriptExceptionError
	ExecuteScriptExecutionError       *ExecuteScriptExecutionError
	ExecuteScriptGroovyRuntimeError   *ExecuteScriptGroovyRuntimeError
	ExecuteScriptSecurityError        *ExecuteScriptSecurityError
	ExecuteScriptSyntaxErrors         *ExecuteScriptSyntaxErrors
	ExecuteScriptTimeoutError         *ExecuteScriptTimeoutError
	ExecuteScriptWrongReturnTypeError *ExecuteScriptWrongReturnTypeError
}

// ExecuteScriptArgumentsScriptErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptArgumentsScriptError wrapped in ExecuteScriptError
func ExecuteScriptArgumentsScriptErrorAsExecuteScriptError(v *ExecuteScriptArgumentsScriptError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptArgumentsScriptError: v,
	}
}

// ExecuteScriptExceptionErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptExceptionError wrapped in ExecuteScriptError
func ExecuteScriptExceptionErrorAsExecuteScriptError(v *ExecuteScriptExceptionError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptExceptionError: v,
	}
}

// ExecuteScriptExecutionErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptExecutionError wrapped in ExecuteScriptError
func ExecuteScriptExecutionErrorAsExecuteScriptError(v *ExecuteScriptExecutionError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptExecutionError: v,
	}
}

// ExecuteScriptGroovyRuntimeErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptGroovyRuntimeError wrapped in ExecuteScriptError
func ExecuteScriptGroovyRuntimeErrorAsExecuteScriptError(v *ExecuteScriptGroovyRuntimeError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptGroovyRuntimeError: v,
	}
}

// ExecuteScriptSecurityErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptSecurityError wrapped in ExecuteScriptError
func ExecuteScriptSecurityErrorAsExecuteScriptError(v *ExecuteScriptSecurityError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptSecurityError: v,
	}
}

// ExecuteScriptSyntaxErrorsAsExecuteScriptError is a convenience function that returns ExecuteScriptSyntaxErrors wrapped in ExecuteScriptError
func ExecuteScriptSyntaxErrorsAsExecuteScriptError(v *ExecuteScriptSyntaxErrors) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptSyntaxErrors: v,
	}
}

// ExecuteScriptTimeoutErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptTimeoutError wrapped in ExecuteScriptError
func ExecuteScriptTimeoutErrorAsExecuteScriptError(v *ExecuteScriptTimeoutError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptTimeoutError: v,
	}
}

// ExecuteScriptWrongReturnTypeErrorAsExecuteScriptError is a convenience function that returns ExecuteScriptWrongReturnTypeError wrapped in ExecuteScriptError
func ExecuteScriptWrongReturnTypeErrorAsExecuteScriptError(v *ExecuteScriptWrongReturnTypeError) ExecuteScriptError {
	return ExecuteScriptError{
		ExecuteScriptWrongReturnTypeError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *ExecuteScriptError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ExecuteScriptArgumentsScriptError'
	if jsonDict["_type"] == "ExecuteScriptArgumentsScriptError" {
		// try to unmarshal JSON data into ExecuteScriptArgumentsScriptError
		err = json.Unmarshal(data, &dst.ExecuteScriptArgumentsScriptError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptArgumentsScriptError, return on the first match
		} else {
			dst.ExecuteScriptArgumentsScriptError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptArgumentsScriptError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptExceptionError'
	if jsonDict["_type"] == "ExecuteScriptExceptionError" {
		// try to unmarshal JSON data into ExecuteScriptExceptionError
		err = json.Unmarshal(data, &dst.ExecuteScriptExceptionError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptExceptionError, return on the first match
		} else {
			dst.ExecuteScriptExceptionError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptExceptionError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptExecutionError'
	if jsonDict["_type"] == "ExecuteScriptExecutionError" {
		// try to unmarshal JSON data into ExecuteScriptExecutionError
		err = json.Unmarshal(data, &dst.ExecuteScriptExecutionError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptExecutionError, return on the first match
		} else {
			dst.ExecuteScriptExecutionError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptExecutionError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptGroovyRuntimeError'
	if jsonDict["_type"] == "ExecuteScriptGroovyRuntimeError" {
		// try to unmarshal JSON data into ExecuteScriptGroovyRuntimeError
		err = json.Unmarshal(data, &dst.ExecuteScriptGroovyRuntimeError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptGroovyRuntimeError, return on the first match
		} else {
			dst.ExecuteScriptGroovyRuntimeError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptGroovyRuntimeError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptSecurityError'
	if jsonDict["_type"] == "ExecuteScriptSecurityError" {
		// try to unmarshal JSON data into ExecuteScriptSecurityError
		err = json.Unmarshal(data, &dst.ExecuteScriptSecurityError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptSecurityError, return on the first match
		} else {
			dst.ExecuteScriptSecurityError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptSecurityError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptSyntaxErrors'
	if jsonDict["_type"] == "ExecuteScriptSyntaxErrors" {
		// try to unmarshal JSON data into ExecuteScriptSyntaxErrors
		err = json.Unmarshal(data, &dst.ExecuteScriptSyntaxErrors)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptSyntaxErrors, return on the first match
		} else {
			dst.ExecuteScriptSyntaxErrors = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptSyntaxErrors: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptTimeoutError'
	if jsonDict["_type"] == "ExecuteScriptTimeoutError" {
		// try to unmarshal JSON data into ExecuteScriptTimeoutError
		err = json.Unmarshal(data, &dst.ExecuteScriptTimeoutError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptTimeoutError, return on the first match
		} else {
			dst.ExecuteScriptTimeoutError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptTimeoutError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ExecuteScriptWrongReturnTypeError'
	if jsonDict["_type"] == "ExecuteScriptWrongReturnTypeError" {
		// try to unmarshal JSON data into ExecuteScriptWrongReturnTypeError
		err = json.Unmarshal(data, &dst.ExecuteScriptWrongReturnTypeError)
		if err == nil {
			return nil // data stored in dst.ExecuteScriptWrongReturnTypeError, return on the first match
		} else {
			dst.ExecuteScriptWrongReturnTypeError = nil
			return fmt.Errorf("Failed to unmarshal ExecuteScriptError as ExecuteScriptWrongReturnTypeError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ExecuteScriptError) MarshalJSON() ([]byte, error) {
	if src.ExecuteScriptArgumentsScriptError != nil {
		return json.Marshal(&src.ExecuteScriptArgumentsScriptError)
	}

	if src.ExecuteScriptExceptionError != nil {
		return json.Marshal(&src.ExecuteScriptExceptionError)
	}

	if src.ExecuteScriptExecutionError != nil {
		return json.Marshal(&src.ExecuteScriptExecutionError)
	}

	if src.ExecuteScriptGroovyRuntimeError != nil {
		return json.Marshal(&src.ExecuteScriptGroovyRuntimeError)
	}

	if src.ExecuteScriptSecurityError != nil {
		return json.Marshal(&src.ExecuteScriptSecurityError)
	}

	if src.ExecuteScriptSyntaxErrors != nil {
		return json.Marshal(&src.ExecuteScriptSyntaxErrors)
	}

	if src.ExecuteScriptTimeoutError != nil {
		return json.Marshal(&src.ExecuteScriptTimeoutError)
	}

	if src.ExecuteScriptWrongReturnTypeError != nil {
		return json.Marshal(&src.ExecuteScriptWrongReturnTypeError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ExecuteScriptError) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.ExecuteScriptArgumentsScriptError != nil {
		return obj.ExecuteScriptArgumentsScriptError
	}

	if obj.ExecuteScriptExceptionError != nil {
		return obj.ExecuteScriptExceptionError
	}

	if obj.ExecuteScriptExecutionError != nil {
		return obj.ExecuteScriptExecutionError
	}

	if obj.ExecuteScriptGroovyRuntimeError != nil {
		return obj.ExecuteScriptGroovyRuntimeError
	}

	if obj.ExecuteScriptSecurityError != nil {
		return obj.ExecuteScriptSecurityError
	}

	if obj.ExecuteScriptSyntaxErrors != nil {
		return obj.ExecuteScriptSyntaxErrors
	}

	if obj.ExecuteScriptTimeoutError != nil {
		return obj.ExecuteScriptTimeoutError
	}

	if obj.ExecuteScriptWrongReturnTypeError != nil {
		return obj.ExecuteScriptWrongReturnTypeError
	}

	// all schemas are nil
	return nil
}

type NullableExecuteScriptError struct {
	value *ExecuteScriptError
	isSet bool
}

func (v NullableExecuteScriptError) Get() *ExecuteScriptError {
	return v.value
}

func (v *NullableExecuteScriptError) Set(val *ExecuteScriptError) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteScriptError) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteScriptError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteScriptError(val *ExecuteScriptError) *NullableExecuteScriptError {
	return &NullableExecuteScriptError{value: val, isSet: true}
}

func (v NullableExecuteScriptError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteScriptError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
