/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// FAQ struct for FAQ
type FAQ struct {
	Question string `json:"question"`
	Answer   string `json:"answer"`
}

// NewFAQ instantiates a new FAQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFAQ(question string, answer string) *FAQ {
	this := FAQ{}
	this.Question = question
	this.Answer = answer
	return &this
}

// NewFAQWithDefaults instantiates a new FAQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFAQWithDefaults() *FAQ {
	this := FAQ{}
	return &this
}

// GetQuestion returns the Question field value
func (o *FAQ) GetQuestion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *FAQ) GetQuestionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *FAQ) SetQuestion(v string) {
	o.Question = v
}

// GetAnswer returns the Answer field value
func (o *FAQ) GetAnswer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Answer
}

// GetAnswerOk returns a tuple with the Answer field value
// and a boolean to check if the value has been set.
func (o *FAQ) GetAnswerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Answer, true
}

// SetAnswer sets field value
func (o *FAQ) SetAnswer(v string) {
	o.Answer = v
}

func (o FAQ) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["question"] = o.Question
	}
	if true {
		toSerialize["answer"] = o.Answer
	}
	return json.Marshal(toSerialize)
}

type NullableFAQ struct {
	value *FAQ
	isSet bool
}

func (v NullableFAQ) Get() *FAQ {
	return v.value
}

func (v *NullableFAQ) Set(val *FAQ) {
	v.value = val
	v.isSet = true
}

func (v NullableFAQ) IsSet() bool {
	return v.isSet
}

func (v *NullableFAQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFAQ(val *FAQ) *NullableFAQ {
	return &NullableFAQ{value: val, isSet: true}
}

func (v NullableFAQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFAQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
