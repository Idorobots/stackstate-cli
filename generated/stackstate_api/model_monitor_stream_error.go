/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorStreamError struct for MonitorStreamError
type MonitorStreamError struct {
	Error string `json:"error"`
	Count int32 `json:"count"`
}

// NewMonitorStreamError instantiates a new MonitorStreamError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorStreamError(error_ string, count int32) *MonitorStreamError {
	this := MonitorStreamError{}
	this.Error = error_
	this.Count = count
	return &this
}

// NewMonitorStreamErrorWithDefaults instantiates a new MonitorStreamError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorStreamErrorWithDefaults() *MonitorStreamError {
	this := MonitorStreamError{}
	return &this
}

// GetError returns the Error field value
func (o *MonitorStreamError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *MonitorStreamError) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *MonitorStreamError) SetError(v string) {
	o.Error = v
}

// GetCount returns the Count field value
func (o *MonitorStreamError) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *MonitorStreamError) GetCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *MonitorStreamError) SetCount(v int32) {
	o.Count = v
}

func (o MonitorStreamError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorStreamError struct {
	value *MonitorStreamError
	isSet bool
}

func (v NullableMonitorStreamError) Get() *MonitorStreamError {
	return v.value
}

func (v *NullableMonitorStreamError) Set(val *MonitorStreamError) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorStreamError) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorStreamError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorStreamError(val *MonitorStreamError) *NullableMonitorStreamError {
	return &NullableMonitorStreamError{value: val, isSet: true}
}

func (v NullableMonitorStreamError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorStreamError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


