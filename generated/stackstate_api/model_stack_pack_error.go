/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// StackPackError struct for StackPackError
type StackPackError struct {
	Retryable bool                   `json:"retryable"`
	Action    *string                `json:"action,omitempty"`
	Error     map[string]interface{} `json:"error"`
}

// NewStackPackError instantiates a new StackPackError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStackPackError(retryable bool, error_ map[string]interface{}) *StackPackError {
	this := StackPackError{}
	this.Retryable = retryable
	this.Error = error_
	return &this
}

// NewStackPackErrorWithDefaults instantiates a new StackPackError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStackPackErrorWithDefaults() *StackPackError {
	this := StackPackError{}
	return &this
}

// GetRetryable returns the Retryable field value
func (o *StackPackError) GetRetryable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Retryable
}

// GetRetryableOk returns a tuple with the Retryable field value
// and a boolean to check if the value has been set.
func (o *StackPackError) GetRetryableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retryable, true
}

// SetRetryable sets field value
func (o *StackPackError) SetRetryable(v bool) {
	o.Retryable = v
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *StackPackError) GetAction() string {
	if o == nil || o.Action == nil {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StackPackError) GetActionOk() (*string, bool) {
	if o == nil || o.Action == nil {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *StackPackError) HasAction() bool {
	if o != nil && o.Action != nil {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *StackPackError) SetAction(v string) {
	o.Action = &v
}

// GetError returns the Error field value
func (o *StackPackError) GetError() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *StackPackError) GetErrorOk() (map[string]interface{}, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error, true
}

// SetError sets field value
func (o *StackPackError) SetError(v map[string]interface{}) {
	o.Error = v
}

func (o StackPackError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["retryable"] = o.Retryable
	}
	if o.Action != nil {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableStackPackError struct {
	value *StackPackError
	isSet bool
}

func (v NullableStackPackError) Get() *StackPackError {
	return v.value
}

func (v *NullableStackPackError) Set(val *StackPackError) {
	v.value = val
	v.isSet = true
}

func (v NullableStackPackError) IsSet() bool {
	return v.isSet
}

func (v *NullableStackPackError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStackPackError(val *StackPackError) *NullableStackPackError {
	return &NullableStackPackError{value: val, isSet: true}
}

func (v NullableStackPackError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStackPackError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
