/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SubStreamListItem struct for SubStreamListItem
type SubStreamListItem struct {
	SubStreamId     string                          `json:"subStreamId"`
	SubStreamState  HealthSubStreamConsistencyState `json:"subStreamState"`
	CheckStateCount int32                           `json:"checkStateCount"`
}

// NewSubStreamListItem instantiates a new SubStreamListItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubStreamListItem(subStreamId string, subStreamState HealthSubStreamConsistencyState, checkStateCount int32) *SubStreamListItem {
	this := SubStreamListItem{}
	this.SubStreamId = subStreamId
	this.SubStreamState = subStreamState
	this.CheckStateCount = checkStateCount
	return &this
}

// NewSubStreamListItemWithDefaults instantiates a new SubStreamListItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubStreamListItemWithDefaults() *SubStreamListItem {
	this := SubStreamListItem{}
	return &this
}

// GetSubStreamId returns the SubStreamId field value
func (o *SubStreamListItem) GetSubStreamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SubStreamId
}

// GetSubStreamIdOk returns a tuple with the SubStreamId field value
// and a boolean to check if the value has been set.
func (o *SubStreamListItem) GetSubStreamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubStreamId, true
}

// SetSubStreamId sets field value
func (o *SubStreamListItem) SetSubStreamId(v string) {
	o.SubStreamId = v
}

// GetSubStreamState returns the SubStreamState field value
func (o *SubStreamListItem) GetSubStreamState() HealthSubStreamConsistencyState {
	if o == nil {
		var ret HealthSubStreamConsistencyState
		return ret
	}

	return o.SubStreamState
}

// GetSubStreamStateOk returns a tuple with the SubStreamState field value
// and a boolean to check if the value has been set.
func (o *SubStreamListItem) GetSubStreamStateOk() (*HealthSubStreamConsistencyState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SubStreamState, true
}

// SetSubStreamState sets field value
func (o *SubStreamListItem) SetSubStreamState(v HealthSubStreamConsistencyState) {
	o.SubStreamState = v
}

// GetCheckStateCount returns the CheckStateCount field value
func (o *SubStreamListItem) GetCheckStateCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CheckStateCount
}

// GetCheckStateCountOk returns a tuple with the CheckStateCount field value
// and a boolean to check if the value has been set.
func (o *SubStreamListItem) GetCheckStateCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckStateCount, true
}

// SetCheckStateCount sets field value
func (o *SubStreamListItem) SetCheckStateCount(v int32) {
	o.CheckStateCount = v
}

func (o SubStreamListItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subStreamId"] = o.SubStreamId
	}
	if true {
		toSerialize["subStreamState"] = o.SubStreamState
	}
	if true {
		toSerialize["checkStateCount"] = o.CheckStateCount
	}
	return json.Marshal(toSerialize)
}

type NullableSubStreamListItem struct {
	value *SubStreamListItem
	isSet bool
}

func (v NullableSubStreamListItem) Get() *SubStreamListItem {
	return v.value
}

func (v *NullableSubStreamListItem) Set(val *SubStreamListItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSubStreamListItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSubStreamListItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubStreamListItem(val *SubStreamListItem) *NullableSubStreamListItem {
	return &NullableSubStreamListItem{value: val, isSet: true}
}

func (v NullableSubStreamListItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubStreamListItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
