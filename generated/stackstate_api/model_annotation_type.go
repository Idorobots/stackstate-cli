/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// AnnotationType the model 'AnnotationType'
type AnnotationType string

// List of AnnotationType
const (
	ANNOTATIONTYPE_METRIC_STREAM_ANOMALY    AnnotationType = "MetricStreamAnomaly"
	ANNOTATIONTYPE_METRIC_STREAM_NO_ANOMALY AnnotationType = "MetricStreamNoAnomaly"
	ANNOTATIONTYPE_ANOMALY_FEEDBACK         AnnotationType = "AnomalyFeedback"
)

// All allowed values of AnnotationType enum
var AllowedAnnotationTypeEnumValues = []AnnotationType{
	"MetricStreamAnomaly",
	"MetricStreamNoAnomaly",
	"AnomalyFeedback",
}

func (v *AnnotationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AnnotationType(value)
	for _, existing := range AllowedAnnotationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AnnotationType", value)
}

// NewAnnotationTypeFromValue returns a pointer to a valid AnnotationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAnnotationTypeFromValue(v string) (*AnnotationType, error) {
	ev := AnnotationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AnnotationType: valid values are %v", v, AllowedAnnotationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AnnotationType) IsValid() bool {
	for _, existing := range AllowedAnnotationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AnnotationType value
func (v AnnotationType) Ptr() *AnnotationType {
	return &v
}

type NullableAnnotationType struct {
	value *AnnotationType
	isSet bool
}

func (v NullableAnnotationType) Get() *AnnotationType {
	return v.value
}

func (v *NullableAnnotationType) Set(val *AnnotationType) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnotationType) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnotationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnotationType(val *AnnotationType) *NullableAnnotationType {
	return &NullableAnnotationType{value: val, isSet: true}
}

func (v NullableAnnotationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnotationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
