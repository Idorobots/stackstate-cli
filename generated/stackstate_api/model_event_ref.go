/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
)

// EventRef struct for EventRef
type EventRef struct {
	Title string `json:"title"`
	EventId string `json:"eventId"`
	EventTimestamp int64 `json:"eventTimestamp"`
	EventType string `json:"eventType"`
}

// NewEventRef instantiates a new EventRef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventRef(title string, eventId string, eventTimestamp int64, eventType string) *EventRef {
	this := EventRef{}
	this.Title = title
	this.EventId = eventId
	this.EventTimestamp = eventTimestamp
	this.EventType = eventType
	return &this
}

// NewEventRefWithDefaults instantiates a new EventRef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventRefWithDefaults() *EventRef {
	this := EventRef{}
	return &this
}

// GetTitle returns the Title field value
func (o *EventRef) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *EventRef) GetTitleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *EventRef) SetTitle(v string) {
	o.Title = v
}

// GetEventId returns the EventId field value
func (o *EventRef) GetEventId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventId
}

// GetEventIdOk returns a tuple with the EventId field value
// and a boolean to check if the value has been set.
func (o *EventRef) GetEventIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventId, true
}

// SetEventId sets field value
func (o *EventRef) SetEventId(v string) {
	o.EventId = v
}

// GetEventTimestamp returns the EventTimestamp field value
func (o *EventRef) GetEventTimestamp() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EventTimestamp
}

// GetEventTimestampOk returns a tuple with the EventTimestamp field value
// and a boolean to check if the value has been set.
func (o *EventRef) GetEventTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventTimestamp, true
}

// SetEventTimestamp sets field value
func (o *EventRef) SetEventTimestamp(v int64) {
	o.EventTimestamp = v
}

// GetEventType returns the EventType field value
func (o *EventRef) GetEventType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value
// and a boolean to check if the value has been set.
func (o *EventRef) GetEventTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EventType, true
}

// SetEventType sets field value
func (o *EventRef) SetEventType(v string) {
	o.EventType = v
}

func (o EventRef) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["eventId"] = o.EventId
	}
	if true {
		toSerialize["eventTimestamp"] = o.EventTimestamp
	}
	if true {
		toSerialize["eventType"] = o.EventType
	}
	return json.Marshal(toSerialize)
}

type NullableEventRef struct {
	value *EventRef
	isSet bool
}

func (v NullableEventRef) Get() *EventRef {
	return v.value
}

func (v *NullableEventRef) Set(val *EventRef) {
	v.value = val
	v.isSet = true
}

func (v NullableEventRef) IsSet() bool {
	return v.isSet
}

func (v *NullableEventRef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventRef(val *EventRef) *NullableEventRef {
	return &NullableEventRef{value: val, isSet: true}
}

func (v NullableEventRef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventRef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


