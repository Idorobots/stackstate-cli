/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// EventTelemetryQuery struct for EventTelemetryQuery
type EventTelemetryQuery struct {
	Type string `json:"_type"`
	Conditions []TelemetryQueryCondition `json:"conditions"`
	Id *int64 `json:"id,omitempty"`
	LastUpdateTimestamp *int64 `json:"lastUpdateTimestamp,omitempty"`
}

// NewEventTelemetryQuery instantiates a new EventTelemetryQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventTelemetryQuery(type_ string, conditions []TelemetryQueryCondition) *EventTelemetryQuery {
	this := EventTelemetryQuery{}
	this.Type = type_
	this.Conditions = conditions
	return &this
}

// NewEventTelemetryQueryWithDefaults instantiates a new EventTelemetryQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventTelemetryQueryWithDefaults() *EventTelemetryQuery {
	this := EventTelemetryQuery{}
	return &this
}

// GetType returns the Type field value
func (o *EventTelemetryQuery) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventTelemetryQuery) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventTelemetryQuery) SetType(v string) {
	o.Type = v
}

// GetConditions returns the Conditions field value
func (o *EventTelemetryQuery) GetConditions() []TelemetryQueryCondition {
	if o == nil {
		var ret []TelemetryQueryCondition
		return ret
	}

	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value
// and a boolean to check if the value has been set.
func (o *EventTelemetryQuery) GetConditionsOk() ([]TelemetryQueryCondition, bool) {
	if o == nil {
		return nil, false
	}
	return o.Conditions, true
}

// SetConditions sets field value
func (o *EventTelemetryQuery) SetConditions(v []TelemetryQueryCondition) {
	o.Conditions = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventTelemetryQuery) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTelemetryQuery) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventTelemetryQuery) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *EventTelemetryQuery) SetId(v int64) {
	o.Id = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise.
func (o *EventTelemetryQuery) GetLastUpdateTimestamp() int64 {
	if o == nil || o.LastUpdateTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventTelemetryQuery) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimestamp == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp, true
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *EventTelemetryQuery) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given int64 and assigns it to the LastUpdateTimestamp field.
func (o *EventTelemetryQuery) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = &v
}

func (o EventTelemetryQuery) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["conditions"] = o.Conditions
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTimestamp != nil {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	return json.Marshal(toSerialize)
}

type NullableEventTelemetryQuery struct {
	value *EventTelemetryQuery
	isSet bool
}

func (v NullableEventTelemetryQuery) Get() *EventTelemetryQuery {
	return v.value
}

func (v *NullableEventTelemetryQuery) Set(val *EventTelemetryQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableEventTelemetryQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableEventTelemetryQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventTelemetryQuery(val *EventTelemetryQuery) *NullableEventTelemetryQuery {
	return &NullableEventTelemetryQuery{value: val, isSet: true}
}

func (v NullableEventTelemetryQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventTelemetryQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


