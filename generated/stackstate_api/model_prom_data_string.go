/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PromDataString struct for PromDataString
type PromDataString struct {
	ResultType string `json:"resultType"`
	// This is always a tuple represented as an array with in first position the unix timestamp as  a float with precision 3 in seconds) and in second position the sample value as a string.
	Result []PromSampleInner `json:"result"`
}

// NewPromDataString instantiates a new PromDataString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromDataString(resultType string, result []PromSampleInner) *PromDataString {
	this := PromDataString{}
	this.ResultType = resultType
	this.Result = result
	return &this
}

// NewPromDataStringWithDefaults instantiates a new PromDataString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromDataStringWithDefaults() *PromDataString {
	this := PromDataString{}
	return &this
}

// GetResultType returns the ResultType field value
func (o *PromDataString) GetResultType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ResultType
}

// GetResultTypeOk returns a tuple with the ResultType field value
// and a boolean to check if the value has been set.
func (o *PromDataString) GetResultTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResultType, true
}

// SetResultType sets field value
func (o *PromDataString) SetResultType(v string) {
	o.ResultType = v
}

// GetResult returns the Result field value
func (o *PromDataString) GetResult() []PromSampleInner {
	if o == nil {
		var ret []PromSampleInner
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *PromDataString) GetResultOk() ([]PromSampleInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Result, true
}

// SetResult sets field value
func (o *PromDataString) SetResult(v []PromSampleInner) {
	o.Result = v
}

func (o PromDataString) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["resultType"] = o.ResultType
	}
	if true {
		toSerialize["result"] = o.Result
	}
	return json.Marshal(toSerialize)
}

type NullablePromDataString struct {
	value *PromDataString
	isSet bool
}

func (v NullablePromDataString) Get() *PromDataString {
	return v.value
}

func (v *NullablePromDataString) Set(val *PromDataString) {
	v.value = val
	v.isSet = true
}

func (v NullablePromDataString) IsSet() bool {
	return v.isSet
}

func (v *NullablePromDataString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromDataString(val *PromDataString) *NullablePromDataString {
	return &NullablePromDataString{value: val, isSet: true}
}

func (v NullablePromDataString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromDataString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
