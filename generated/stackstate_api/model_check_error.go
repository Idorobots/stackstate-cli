/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// CheckError struct for CheckError
type CheckError struct {
	Type                string          `json:"_type"`
	Id                  *int64          `json:"id,omitempty"`
	LastUpdateTimeStamp *int64          `json:"lastUpdateTimeStamp,omitempty"`
	Message             string          `json:"message"`
	DetailedMessage     string          `json:"detailedMessage"`
	State               ErrorStateValue `json:"state"`
}

// NewCheckError instantiates a new CheckError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckError(type_ string, message string, detailedMessage string, state ErrorStateValue) *CheckError {
	this := CheckError{}
	this.Type = type_
	this.Message = message
	this.DetailedMessage = detailedMessage
	this.State = state
	return &this
}

// NewCheckErrorWithDefaults instantiates a new CheckError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckErrorWithDefaults() *CheckError {
	this := CheckError{}
	return &this
}

// GetType returns the Type field value
func (o *CheckError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CheckError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CheckError) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CheckError) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckError) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CheckError) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *CheckError) SetId(v int64) {
	o.Id = &v
}

// GetLastUpdateTimeStamp returns the LastUpdateTimeStamp field value if set, zero value otherwise.
func (o *CheckError) GetLastUpdateTimeStamp() int64 {
	if o == nil || o.LastUpdateTimeStamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimeStamp
}

// GetLastUpdateTimeStampOk returns a tuple with the LastUpdateTimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckError) GetLastUpdateTimeStampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimeStamp == nil {
		return nil, false
	}
	return o.LastUpdateTimeStamp, true
}

// HasLastUpdateTimeStamp returns a boolean if a field has been set.
func (o *CheckError) HasLastUpdateTimeStamp() bool {
	if o != nil && o.LastUpdateTimeStamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimeStamp gets a reference to the given int64 and assigns it to the LastUpdateTimeStamp field.
func (o *CheckError) SetLastUpdateTimeStamp(v int64) {
	o.LastUpdateTimeStamp = &v
}

// GetMessage returns the Message field value
func (o *CheckError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *CheckError) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *CheckError) SetMessage(v string) {
	o.Message = v
}

// GetDetailedMessage returns the DetailedMessage field value
func (o *CheckError) GetDetailedMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DetailedMessage
}

// GetDetailedMessageOk returns a tuple with the DetailedMessage field value
// and a boolean to check if the value has been set.
func (o *CheckError) GetDetailedMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DetailedMessage, true
}

// SetDetailedMessage sets field value
func (o *CheckError) SetDetailedMessage(v string) {
	o.DetailedMessage = v
}

// GetState returns the State field value
func (o *CheckError) GetState() ErrorStateValue {
	if o == nil {
		var ret ErrorStateValue
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *CheckError) GetStateOk() (*ErrorStateValue, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *CheckError) SetState(v ErrorStateValue) {
	o.State = v
}

func (o CheckError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTimeStamp != nil {
		toSerialize["lastUpdateTimeStamp"] = o.LastUpdateTimeStamp
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["detailedMessage"] = o.DetailedMessage
	}
	if true {
		toSerialize["state"] = o.State
	}
	return json.Marshal(toSerialize)
}

type NullableCheckError struct {
	value *CheckError
	isSet bool
}

func (v NullableCheckError) Get() *CheckError {
	return v.value
}

func (v *NullableCheckError) Set(val *CheckError) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckError) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckError(val *CheckError) *NullableCheckError {
	return &NullableCheckError{value: val, isSet: true}
}

func (v NullableCheckError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
