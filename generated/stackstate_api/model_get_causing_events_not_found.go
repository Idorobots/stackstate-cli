/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// GetCausingEventsNotFound - struct for GetCausingEventsNotFound
type GetCausingEventsNotFound struct {
	DataUnavailable *DataUnavailable
	ProblemNotFound *ProblemNotFound
}

// DataUnavailableAsGetCausingEventsNotFound is a convenience function that returns DataUnavailable wrapped in GetCausingEventsNotFound
func DataUnavailableAsGetCausingEventsNotFound(v *DataUnavailable) GetCausingEventsNotFound {
	return GetCausingEventsNotFound{
		DataUnavailable: v,
	}
}

// ProblemNotFoundAsGetCausingEventsNotFound is a convenience function that returns ProblemNotFound wrapped in GetCausingEventsNotFound
func ProblemNotFoundAsGetCausingEventsNotFound(v *ProblemNotFound) GetCausingEventsNotFound {
	return GetCausingEventsNotFound{
		ProblemNotFound: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetCausingEventsNotFound) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'DataUnavailable'
	if jsonDict["_type"] == "DataUnavailable" {
		// try to unmarshal JSON data into DataUnavailable
		err = json.Unmarshal(data, &dst.DataUnavailable)
		if err == nil {
			return nil // data stored in dst.DataUnavailable, return on the first match
		} else {
			dst.DataUnavailable = nil
			return fmt.Errorf("Failed to unmarshal GetCausingEventsNotFound as DataUnavailable: %s", err.Error())
		}
	}

	// check if the discriminator value is 'ProblemNotFound'
	if jsonDict["_type"] == "ProblemNotFound" {
		// try to unmarshal JSON data into ProblemNotFound
		err = json.Unmarshal(data, &dst.ProblemNotFound)
		if err == nil {
			return nil // data stored in dst.ProblemNotFound, return on the first match
		} else {
			dst.ProblemNotFound = nil
			return fmt.Errorf("Failed to unmarshal GetCausingEventsNotFound as ProblemNotFound: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetCausingEventsNotFound) MarshalJSON() ([]byte, error) {
	if src.DataUnavailable != nil {
		return json.Marshal(&src.DataUnavailable)
	}

	if src.ProblemNotFound != nil {
		return json.Marshal(&src.ProblemNotFound)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetCausingEventsNotFound) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.DataUnavailable != nil {
		return obj.DataUnavailable
	}

	if obj.ProblemNotFound != nil {
		return obj.ProblemNotFound
	}

	// all schemas are nil
	return nil
}

type NullableGetCausingEventsNotFound struct {
	value *GetCausingEventsNotFound
	isSet bool
}

func (v NullableGetCausingEventsNotFound) Get() *GetCausingEventsNotFound {
	return v.value
}

func (v *NullableGetCausingEventsNotFound) Set(val *GetCausingEventsNotFound) {
	v.value = val
	v.isSet = true
}

func (v NullableGetCausingEventsNotFound) IsSet() bool {
	return v.isSet
}

func (v *NullableGetCausingEventsNotFound) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetCausingEventsNotFound(val *GetCausingEventsNotFound) *NullableGetCausingEventsNotFound {
	return &NullableGetCausingEventsNotFound{value: val, isSet: true}
}

func (v NullableGetCausingEventsNotFound) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetCausingEventsNotFound) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


