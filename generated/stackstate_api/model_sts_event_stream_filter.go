/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// StsEventStreamFilter the model 'StsEventStreamFilter'
type StsEventStreamFilter string

// List of StsEventStreamFilter
const (
	STSEVENTSTREAMFILTER_STATE_CHANGES_OR_CREATED_DELETED         StsEventStreamFilter = "STATE_CHANGES_OR_CREATED_DELETED"
	STSEVENTSTREAMFILTER_STATE_CHANGES_OR_CREATED_UPDATED_DELETED StsEventStreamFilter = "STATE_CHANGES_OR_CREATED_UPDATED_DELETED"
	STSEVENTSTREAMFILTER_LIFE_CYCLE_EVENTS                        StsEventStreamFilter = "LIFE_CYCLE_EVENTS"
	STSEVENTSTREAMFILTER_STATE_CHANGES                            StsEventStreamFilter = "STATE_CHANGES"
	STSEVENTSTREAMFILTER_HEALTH_STATE_CHANGES                     StsEventStreamFilter = "HEALTH_STATE_CHANGES"
	STSEVENTSTREAMFILTER_PROPAGATED_HEALTH_STATE_CHANGES          StsEventStreamFilter = "PROPAGATED_HEALTH_STATE_CHANGES"
	STSEVENTSTREAMFILTER_VIEW_HEALTH_STATE_CHANGES                StsEventStreamFilter = "VIEW_HEALTH_STATE_CHANGES"
	STSEVENTSTREAMFILTER_ANOMALY_EVENT                            StsEventStreamFilter = "ANOMALY_EVENT"
	STSEVENTSTREAMFILTER_PROBLEM_EVENT                            StsEventStreamFilter = "PROBLEM_EVENT"
)

// All allowed values of StsEventStreamFilter enum
var AllowedStsEventStreamFilterEnumValues = []StsEventStreamFilter{
	"STATE_CHANGES_OR_CREATED_DELETED",
	"STATE_CHANGES_OR_CREATED_UPDATED_DELETED",
	"LIFE_CYCLE_EVENTS",
	"STATE_CHANGES",
	"HEALTH_STATE_CHANGES",
	"PROPAGATED_HEALTH_STATE_CHANGES",
	"VIEW_HEALTH_STATE_CHANGES",
	"ANOMALY_EVENT",
	"PROBLEM_EVENT",
}

func (v *StsEventStreamFilter) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StsEventStreamFilter(value)
	for _, existing := range AllowedStsEventStreamFilterEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StsEventStreamFilter", value)
}

// NewStsEventStreamFilterFromValue returns a pointer to a valid StsEventStreamFilter
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStsEventStreamFilterFromValue(v string) (*StsEventStreamFilter, error) {
	ev := StsEventStreamFilter(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StsEventStreamFilter: valid values are %v", v, AllowedStsEventStreamFilterEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StsEventStreamFilter) IsValid() bool {
	for _, existing := range AllowedStsEventStreamFilterEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StsEventStreamFilter value
func (v StsEventStreamFilter) Ptr() *StsEventStreamFilter {
	return &v
}

type NullableStsEventStreamFilter struct {
	value *StsEventStreamFilter
	isSet bool
}

func (v NullableStsEventStreamFilter) Get() *StsEventStreamFilter {
	return v.value
}

func (v *NullableStsEventStreamFilter) Set(val *StsEventStreamFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableStsEventStreamFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableStsEventStreamFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStsEventStreamFilter(val *StsEventStreamFilter) *NullableStsEventStreamFilter {
	return &NullableStsEventStreamFilter{value: val, isSet: true}
}

func (v NullableStsEventStreamFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStsEventStreamFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
