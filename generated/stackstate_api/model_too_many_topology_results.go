/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TooManyTopologyResults struct for TooManyTopologyResults
type TooManyTopologyResults struct {
	Type string `json:"_type"`
}

// NewTooManyTopologyResults instantiates a new TooManyTopologyResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTooManyTopologyResults(type_ string) *TooManyTopologyResults {
	this := TooManyTopologyResults{}
	this.Type = type_
	return &this
}

// NewTooManyTopologyResultsWithDefaults instantiates a new TooManyTopologyResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTooManyTopologyResultsWithDefaults() *TooManyTopologyResults {
	this := TooManyTopologyResults{}
	return &this
}

// GetType returns the Type field value
func (o *TooManyTopologyResults) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TooManyTopologyResults) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TooManyTopologyResults) SetType(v string) {
	o.Type = v
}

func (o TooManyTopologyResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableTooManyTopologyResults struct {
	value *TooManyTopologyResults
	isSet bool
}

func (v NullableTooManyTopologyResults) Get() *TooManyTopologyResults {
	return v.value
}

func (v *NullableTooManyTopologyResults) Set(val *TooManyTopologyResults) {
	v.value = val
	v.isSet = true
}

func (v NullableTooManyTopologyResults) IsSet() bool {
	return v.isSet
}

func (v *NullableTooManyTopologyResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTooManyTopologyResults(val *TooManyTopologyResults) *NullableTooManyTopologyResults {
	return &NullableTooManyTopologyResults{value: val, isSet: true}
}

func (v NullableTooManyTopologyResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTooManyTopologyResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


