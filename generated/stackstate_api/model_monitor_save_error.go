/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// MonitorSaveError - struct for MonitorSaveError
type MonitorSaveError struct {
	InvalidMonitorIdentifierError *InvalidMonitorIdentifierError
	MonitorInvalidIntervalError *MonitorInvalidIntervalError
}

// InvalidMonitorIdentifierErrorAsMonitorSaveError is a convenience function that returns InvalidMonitorIdentifierError wrapped in MonitorSaveError
func InvalidMonitorIdentifierErrorAsMonitorSaveError(v *InvalidMonitorIdentifierError) MonitorSaveError {
	return MonitorSaveError{
		InvalidMonitorIdentifierError: v,
	}
}

// MonitorInvalidIntervalErrorAsMonitorSaveError is a convenience function that returns MonitorInvalidIntervalError wrapped in MonitorSaveError
func MonitorInvalidIntervalErrorAsMonitorSaveError(v *MonitorInvalidIntervalError) MonitorSaveError {
	return MonitorSaveError{
		MonitorInvalidIntervalError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *MonitorSaveError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'InvalidMonitorIdentifierError'
	if jsonDict["_type"] == "InvalidMonitorIdentifierError" {
		// try to unmarshal JSON data into InvalidMonitorIdentifierError
		err = json.Unmarshal(data, &dst.InvalidMonitorIdentifierError)
		if err == nil {
			return nil // data stored in dst.InvalidMonitorIdentifierError, return on the first match
		} else {
			dst.InvalidMonitorIdentifierError = nil
			return fmt.Errorf("Failed to unmarshal MonitorSaveError as InvalidMonitorIdentifierError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MonitorInvalidIntervalError'
	if jsonDict["_type"] == "MonitorInvalidIntervalError" {
		// try to unmarshal JSON data into MonitorInvalidIntervalError
		err = json.Unmarshal(data, &dst.MonitorInvalidIntervalError)
		if err == nil {
			return nil // data stored in dst.MonitorInvalidIntervalError, return on the first match
		} else {
			dst.MonitorInvalidIntervalError = nil
			return fmt.Errorf("Failed to unmarshal MonitorSaveError as MonitorInvalidIntervalError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MonitorSaveError) MarshalJSON() ([]byte, error) {
	if src.InvalidMonitorIdentifierError != nil {
		return json.Marshal(&src.InvalidMonitorIdentifierError)
	}

	if src.MonitorInvalidIntervalError != nil {
		return json.Marshal(&src.MonitorInvalidIntervalError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MonitorSaveError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.InvalidMonitorIdentifierError != nil {
		return obj.InvalidMonitorIdentifierError
	}

	if obj.MonitorInvalidIntervalError != nil {
		return obj.MonitorInvalidIntervalError
	}

	// all schemas are nil
	return nil
}

type NullableMonitorSaveError struct {
	value *MonitorSaveError
	isSet bool
}

func (v NullableMonitorSaveError) Get() *MonitorSaveError {
	return v.value
}

func (v *NullableMonitorSaveError) Set(val *MonitorSaveError) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorSaveError) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorSaveError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorSaveError(val *MonitorSaveError) *NullableMonitorSaveError {
	return &NullableMonitorSaveError{value: val, isSet: true}
}

func (v NullableMonitorSaveError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorSaveError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


