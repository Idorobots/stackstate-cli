/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ExecuteScriptArgumentsScriptError struct for ExecuteScriptArgumentsScriptError
type ExecuteScriptArgumentsScriptError struct {
	Type string `json:"_type"`
	Message string `json:"message"`
	Error ExecuteScriptError `json:"error"`
}

// NewExecuteScriptArgumentsScriptError instantiates a new ExecuteScriptArgumentsScriptError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecuteScriptArgumentsScriptError(type_ string, message string, error_ ExecuteScriptError) *ExecuteScriptArgumentsScriptError {
	this := ExecuteScriptArgumentsScriptError{}
	this.Type = type_
	this.Message = message
	this.Error = error_
	return &this
}

// NewExecuteScriptArgumentsScriptErrorWithDefaults instantiates a new ExecuteScriptArgumentsScriptError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecuteScriptArgumentsScriptErrorWithDefaults() *ExecuteScriptArgumentsScriptError {
	this := ExecuteScriptArgumentsScriptError{}
	return &this
}

// GetType returns the Type field value
func (o *ExecuteScriptArgumentsScriptError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptArgumentsScriptError) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ExecuteScriptArgumentsScriptError) SetType(v string) {
	o.Type = v
}

// GetMessage returns the Message field value
func (o *ExecuteScriptArgumentsScriptError) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptArgumentsScriptError) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *ExecuteScriptArgumentsScriptError) SetMessage(v string) {
	o.Message = v
}

// GetError returns the Error field value
func (o *ExecuteScriptArgumentsScriptError) GetError() ExecuteScriptError {
	if o == nil {
		var ret ExecuteScriptError
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *ExecuteScriptArgumentsScriptError) GetErrorOk() (*ExecuteScriptError, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *ExecuteScriptArgumentsScriptError) SetError(v ExecuteScriptError) {
	o.Error = v
}

func (o ExecuteScriptArgumentsScriptError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableExecuteScriptArgumentsScriptError struct {
	value *ExecuteScriptArgumentsScriptError
	isSet bool
}

func (v NullableExecuteScriptArgumentsScriptError) Get() *ExecuteScriptArgumentsScriptError {
	return v.value
}

func (v *NullableExecuteScriptArgumentsScriptError) Set(val *ExecuteScriptArgumentsScriptError) {
	v.value = val
	v.isSet = true
}

func (v NullableExecuteScriptArgumentsScriptError) IsSet() bool {
	return v.isSet
}

func (v *NullableExecuteScriptArgumentsScriptError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecuteScriptArgumentsScriptError(val *ExecuteScriptArgumentsScriptError) *NullableExecuteScriptArgumentsScriptError {
	return &NullableExecuteScriptArgumentsScriptError{value: val, isSet: true}
}

func (v NullableExecuteScriptArgumentsScriptError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecuteScriptArgumentsScriptError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


