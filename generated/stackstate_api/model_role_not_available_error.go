/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// RoleNotAvailableError struct for RoleNotAvailableError
type RoleNotAvailableError struct {
	Type string `json:"_type"`
	Role string `json:"role"`
}

// NewRoleNotAvailableError instantiates a new RoleNotAvailableError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoleNotAvailableError(type_ string, role string) *RoleNotAvailableError {
	this := RoleNotAvailableError{}
	this.Type = type_
	this.Role = role
	return &this
}

// NewRoleNotAvailableErrorWithDefaults instantiates a new RoleNotAvailableError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoleNotAvailableErrorWithDefaults() *RoleNotAvailableError {
	this := RoleNotAvailableError{}
	return &this
}

// GetType returns the Type field value
func (o *RoleNotAvailableError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *RoleNotAvailableError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *RoleNotAvailableError) SetType(v string) {
	o.Type = v
}

// GetRole returns the Role field value
func (o *RoleNotAvailableError) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *RoleNotAvailableError) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *RoleNotAvailableError) SetRole(v string) {
	o.Role = v
}

func (o RoleNotAvailableError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["role"] = o.Role
	}
	return json.Marshal(toSerialize)
}

type NullableRoleNotAvailableError struct {
	value *RoleNotAvailableError
	isSet bool
}

func (v NullableRoleNotAvailableError) Get() *RoleNotAvailableError {
	return v.value
}

func (v *NullableRoleNotAvailableError) Set(val *RoleNotAvailableError) {
	v.value = val
	v.isSet = true
}

func (v NullableRoleNotAvailableError) IsSet() bool {
	return v.isSet
}

func (v *NullableRoleNotAvailableError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoleNotAvailableError(val *RoleNotAvailableError) *NullableRoleNotAvailableError {
	return &NullableRoleNotAvailableError{value: val, isSet: true}
}

func (v NullableRoleNotAvailableError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoleNotAvailableError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
