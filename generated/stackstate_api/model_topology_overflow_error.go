/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// TopologyOverflowError struct for TopologyOverflowError
type TopologyOverflowError struct {
	Type    string `json:"_type"`
	MaxSize int32  `json:"maxSize"`
}

// NewTopologyOverflowError instantiates a new TopologyOverflowError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopologyOverflowError(type_ string, maxSize int32) *TopologyOverflowError {
	this := TopologyOverflowError{}
	this.Type = type_
	this.MaxSize = maxSize
	return &this
}

// NewTopologyOverflowErrorWithDefaults instantiates a new TopologyOverflowError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopologyOverflowErrorWithDefaults() *TopologyOverflowError {
	this := TopologyOverflowError{}
	return &this
}

// GetType returns the Type field value
func (o *TopologyOverflowError) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TopologyOverflowError) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TopologyOverflowError) SetType(v string) {
	o.Type = v
}

// GetMaxSize returns the MaxSize field value
func (o *TopologyOverflowError) GetMaxSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxSize
}

// GetMaxSizeOk returns a tuple with the MaxSize field value
// and a boolean to check if the value has been set.
func (o *TopologyOverflowError) GetMaxSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxSize, true
}

// SetMaxSize sets field value
func (o *TopologyOverflowError) SetMaxSize(v int32) {
	o.MaxSize = v
}

func (o TopologyOverflowError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["maxSize"] = o.MaxSize
	}
	return json.Marshal(toSerialize)
}

type NullableTopologyOverflowError struct {
	value *TopologyOverflowError
	isSet bool
}

func (v NullableTopologyOverflowError) Get() *TopologyOverflowError {
	return v.value
}

func (v *NullableTopologyOverflowError) Set(val *TopologyOverflowError) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologyOverflowError) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologyOverflowError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologyOverflowError(val *TopologyOverflowError) *NullableTopologyOverflowError {
	return &NullableTopologyOverflowError{value: val, isSet: true}
}

func (v NullableTopologyOverflowError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologyOverflowError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
