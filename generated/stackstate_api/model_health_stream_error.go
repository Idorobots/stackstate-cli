/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// HealthStreamError struct for HealthStreamError
type HealthStreamError struct {
	ErrorCode string `json:"errorCode"`
	Level string `json:"level"`
	Error string `json:"error"`
	Count int32 `json:"count"`
}

// NewHealthStreamError instantiates a new HealthStreamError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthStreamError(errorCode string, level string, error_ string, count int32) *HealthStreamError {
	this := HealthStreamError{}
	this.ErrorCode = errorCode
	this.Level = level
	this.Error = error_
	this.Count = count
	return &this
}

// NewHealthStreamErrorWithDefaults instantiates a new HealthStreamError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthStreamErrorWithDefaults() *HealthStreamError {
	this := HealthStreamError{}
	return &this
}

// GetErrorCode returns the ErrorCode field value
func (o *HealthStreamError) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *HealthStreamError) GetErrorCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *HealthStreamError) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetLevel returns the Level field value
func (o *HealthStreamError) GetLevel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Level
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
func (o *HealthStreamError) GetLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Level, true
}

// SetLevel sets field value
func (o *HealthStreamError) SetLevel(v string) {
	o.Level = v
}

// GetError returns the Error field value
func (o *HealthStreamError) GetError() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Error
}

// GetErrorOk returns a tuple with the Error field value
// and a boolean to check if the value has been set.
func (o *HealthStreamError) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Error, true
}

// SetError sets field value
func (o *HealthStreamError) SetError(v string) {
	o.Error = v
}

// GetCount returns the Count field value
func (o *HealthStreamError) GetCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Count
}

// GetCountOk returns a tuple with the Count field value
// and a boolean to check if the value has been set.
func (o *HealthStreamError) GetCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Count, true
}

// SetCount sets field value
func (o *HealthStreamError) SetCount(v int32) {
	o.Count = v
}

func (o HealthStreamError) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if true {
		toSerialize["level"] = o.Level
	}
	if true {
		toSerialize["error"] = o.Error
	}
	if true {
		toSerialize["count"] = o.Count
	}
	return json.Marshal(toSerialize)
}

type NullableHealthStreamError struct {
	value *HealthStreamError
	isSet bool
}

func (v NullableHealthStreamError) Get() *HealthStreamError {
	return v.value
}

func (v *NullableHealthStreamError) Set(val *HealthStreamError) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthStreamError) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthStreamError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthStreamError(val *HealthStreamError) *NullableHealthStreamError {
	return &NullableHealthStreamError{value: val, isSet: true}
}

func (v NullableHealthStreamError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthStreamError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


