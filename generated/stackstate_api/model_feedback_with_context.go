/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// FeedbackWithContext struct for FeedbackWithContext
type FeedbackWithContext struct {
	Anomaly Annotation `json:"anomaly"`
	Data []Point `json:"data"`
	Feedback FeedbackData `json:"feedback"`
}

// NewFeedbackWithContext instantiates a new FeedbackWithContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackWithContext(anomaly Annotation, data []Point, feedback FeedbackData) *FeedbackWithContext {
	this := FeedbackWithContext{}
	this.Anomaly = anomaly
	this.Data = data
	this.Feedback = feedback
	return &this
}

// NewFeedbackWithContextWithDefaults instantiates a new FeedbackWithContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackWithContextWithDefaults() *FeedbackWithContext {
	this := FeedbackWithContext{}
	return &this
}

// GetAnomaly returns the Anomaly field value
func (o *FeedbackWithContext) GetAnomaly() Annotation {
	if o == nil {
		var ret Annotation
		return ret
	}

	return o.Anomaly
}

// GetAnomalyOk returns a tuple with the Anomaly field value
// and a boolean to check if the value has been set.
func (o *FeedbackWithContext) GetAnomalyOk() (*Annotation, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Anomaly, true
}

// SetAnomaly sets field value
func (o *FeedbackWithContext) SetAnomaly(v Annotation) {
	o.Anomaly = v
}

// GetData returns the Data field value
func (o *FeedbackWithContext) GetData() []Point {
	if o == nil {
		var ret []Point
		return ret
	}

	return o.Data
}

// GetDataOk returns a tuple with the Data field value
// and a boolean to check if the value has been set.
func (o *FeedbackWithContext) GetDataOk() (*[]Point, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Data, true
}

// SetData sets field value
func (o *FeedbackWithContext) SetData(v []Point) {
	o.Data = v
}

// GetFeedback returns the Feedback field value
func (o *FeedbackWithContext) GetFeedback() FeedbackData {
	if o == nil {
		var ret FeedbackData
		return ret
	}

	return o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value
// and a boolean to check if the value has been set.
func (o *FeedbackWithContext) GetFeedbackOk() (*FeedbackData, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Feedback, true
}

// SetFeedback sets field value
func (o *FeedbackWithContext) SetFeedback(v FeedbackData) {
	o.Feedback = v
}

func (o FeedbackWithContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["anomaly"] = o.Anomaly
	}
	if true {
		toSerialize["data"] = o.Data
	}
	if true {
		toSerialize["feedback"] = o.Feedback
	}
	return json.Marshal(toSerialize)
}

type NullableFeedbackWithContext struct {
	value *FeedbackWithContext
	isSet bool
}

func (v NullableFeedbackWithContext) Get() *FeedbackWithContext {
	return v.value
}

func (v *NullableFeedbackWithContext) Set(val *FeedbackWithContext) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackWithContext) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackWithContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackWithContext(val *FeedbackWithContext) *NullableFeedbackWithContext {
	return &NullableFeedbackWithContext{value: val, isSet: true}
}

func (v NullableFeedbackWithContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackWithContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


