/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PromExemplarEnvelope struct for PromExemplarEnvelope
type PromExemplarEnvelope struct {
	Status    string             `json:"status"`
	Data      []PromExemplarData `json:"data,omitempty"`
	ErrorType *string            `json:"errorType,omitempty"`
	Error     *string            `json:"error,omitempty"`
	Warnings  []string           `json:"warnings,omitempty"`
}

// NewPromExemplarEnvelope instantiates a new PromExemplarEnvelope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromExemplarEnvelope(status string) *PromExemplarEnvelope {
	this := PromExemplarEnvelope{}
	this.Status = status
	return &this
}

// NewPromExemplarEnvelopeWithDefaults instantiates a new PromExemplarEnvelope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromExemplarEnvelopeWithDefaults() *PromExemplarEnvelope {
	this := PromExemplarEnvelope{}
	return &this
}

// GetStatus returns the Status field value
func (o *PromExemplarEnvelope) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PromExemplarEnvelope) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PromExemplarEnvelope) SetStatus(v string) {
	o.Status = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PromExemplarEnvelope) GetData() []PromExemplarData {
	if o == nil || o.Data == nil {
		var ret []PromExemplarData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromExemplarEnvelope) GetDataOk() ([]PromExemplarData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PromExemplarEnvelope) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []PromExemplarData and assigns it to the Data field.
func (o *PromExemplarEnvelope) SetData(v []PromExemplarData) {
	o.Data = v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *PromExemplarEnvelope) GetErrorType() string {
	if o == nil || o.ErrorType == nil {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromExemplarEnvelope) GetErrorTypeOk() (*string, bool) {
	if o == nil || o.ErrorType == nil {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *PromExemplarEnvelope) HasErrorType() bool {
	if o != nil && o.ErrorType != nil {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *PromExemplarEnvelope) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PromExemplarEnvelope) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromExemplarEnvelope) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PromExemplarEnvelope) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *PromExemplarEnvelope) SetError(v string) {
	o.Error = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PromExemplarEnvelope) GetWarnings() []string {
	if o == nil || o.Warnings == nil {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromExemplarEnvelope) GetWarningsOk() ([]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PromExemplarEnvelope) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *PromExemplarEnvelope) SetWarnings(v []string) {
	o.Warnings = v
}

func (o PromExemplarEnvelope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.ErrorType != nil {
		toSerialize["errorType"] = o.ErrorType
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullablePromExemplarEnvelope struct {
	value *PromExemplarEnvelope
	isSet bool
}

func (v NullablePromExemplarEnvelope) Get() *PromExemplarEnvelope {
	return v.value
}

func (v *NullablePromExemplarEnvelope) Set(val *PromExemplarEnvelope) {
	v.value = val
	v.isSet = true
}

func (v NullablePromExemplarEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullablePromExemplarEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromExemplarEnvelope(val *PromExemplarEnvelope) *NullablePromExemplarEnvelope {
	return &NullablePromExemplarEnvelope{value: val, isSet: true}
}

func (v NullablePromExemplarEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromExemplarEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
