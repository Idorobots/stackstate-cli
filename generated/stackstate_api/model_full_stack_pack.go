/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// FullStackPack struct for FullStackPack
type FullStackPack struct {
	Name                string                   `json:"name"`
	DisplayName         string                   `json:"displayName"`
	Version             string                   `json:"version"`
	Logo                *string                  `json:"logo,omitempty"`
	Categories          []string                 `json:"categories"`
	IsNew               bool                     `json:"isNew"`
	IsMultiConfig       bool                     `json:"isMultiConfig"`
	OverviewUrl         *string                  `json:"overviewUrl,omitempty"`
	DetailedOverviewUrl *string                  `json:"detailedOverviewUrl,omitempty"`
	ResourcesUrl        *string                  `json:"resourcesUrl,omitempty"`
	Faqs                []FAQ                    `json:"faqs"`
	ConfigurationUrls   [][]string               `json:"configurationUrls"`
	ReleaseStatus       ReleaseStatus            `json:"releaseStatus"`
	Steps               []StackPackStep          `json:"steps"`
	Integrations        []StackPackIntegration   `json:"integrations"`
	ReleaseNotes        *string                  `json:"releaseNotes,omitempty"`
	UpgradeInstructions *string                  `json:"upgradeInstructions,omitempty"`
	Configurations      []StackPackConfiguration `json:"configurations"`
	NextVersion         *FullStackPack           `json:"nextVersion,omitempty"`
	LatestVersion       *FullStackPack           `json:"latestVersion,omitempty"`
	CanUninstall        bool                     `json:"canUninstall"`
	IsCompatible        bool                     `json:"isCompatible"`
}

// NewFullStackPack instantiates a new FullStackPack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullStackPack(name string, displayName string, version string, categories []string, isNew bool, isMultiConfig bool, faqs []FAQ, configurationUrls [][]string, releaseStatus ReleaseStatus, steps []StackPackStep, integrations []StackPackIntegration, configurations []StackPackConfiguration, canUninstall bool, isCompatible bool) *FullStackPack {
	this := FullStackPack{}
	this.Name = name
	this.DisplayName = displayName
	this.Version = version
	this.Categories = categories
	this.IsNew = isNew
	this.IsMultiConfig = isMultiConfig
	this.Faqs = faqs
	this.ConfigurationUrls = configurationUrls
	this.ReleaseStatus = releaseStatus
	this.Steps = steps
	this.Integrations = integrations
	this.Configurations = configurations
	this.CanUninstall = canUninstall
	this.IsCompatible = isCompatible
	return &this
}

// NewFullStackPackWithDefaults instantiates a new FullStackPack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullStackPackWithDefaults() *FullStackPack {
	this := FullStackPack{}
	return &this
}

// GetName returns the Name field value
func (o *FullStackPack) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FullStackPack) SetName(v string) {
	o.Name = v
}

// GetDisplayName returns the DisplayName field value
func (o *FullStackPack) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *FullStackPack) SetDisplayName(v string) {
	o.DisplayName = v
}

// GetVersion returns the Version field value
func (o *FullStackPack) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FullStackPack) SetVersion(v string) {
	o.Version = v
}

// GetLogo returns the Logo field value if set, zero value otherwise.
func (o *FullStackPack) GetLogo() string {
	if o == nil || o.Logo == nil {
		var ret string
		return ret
	}
	return *o.Logo
}

// GetLogoOk returns a tuple with the Logo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetLogoOk() (*string, bool) {
	if o == nil || o.Logo == nil {
		return nil, false
	}
	return o.Logo, true
}

// HasLogo returns a boolean if a field has been set.
func (o *FullStackPack) HasLogo() bool {
	if o != nil && o.Logo != nil {
		return true
	}

	return false
}

// SetLogo gets a reference to the given string and assigns it to the Logo field.
func (o *FullStackPack) SetLogo(v string) {
	o.Logo = &v
}

// GetCategories returns the Categories field value
func (o *FullStackPack) GetCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetCategoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *FullStackPack) SetCategories(v []string) {
	o.Categories = v
}

// GetIsNew returns the IsNew field value
func (o *FullStackPack) GetIsNew() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsNew
}

// GetIsNewOk returns a tuple with the IsNew field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetIsNewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsNew, true
}

// SetIsNew sets field value
func (o *FullStackPack) SetIsNew(v bool) {
	o.IsNew = v
}

// GetIsMultiConfig returns the IsMultiConfig field value
func (o *FullStackPack) GetIsMultiConfig() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsMultiConfig
}

// GetIsMultiConfigOk returns a tuple with the IsMultiConfig field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetIsMultiConfigOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMultiConfig, true
}

// SetIsMultiConfig sets field value
func (o *FullStackPack) SetIsMultiConfig(v bool) {
	o.IsMultiConfig = v
}

// GetOverviewUrl returns the OverviewUrl field value if set, zero value otherwise.
func (o *FullStackPack) GetOverviewUrl() string {
	if o == nil || o.OverviewUrl == nil {
		var ret string
		return ret
	}
	return *o.OverviewUrl
}

// GetOverviewUrlOk returns a tuple with the OverviewUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetOverviewUrlOk() (*string, bool) {
	if o == nil || o.OverviewUrl == nil {
		return nil, false
	}
	return o.OverviewUrl, true
}

// HasOverviewUrl returns a boolean if a field has been set.
func (o *FullStackPack) HasOverviewUrl() bool {
	if o != nil && o.OverviewUrl != nil {
		return true
	}

	return false
}

// SetOverviewUrl gets a reference to the given string and assigns it to the OverviewUrl field.
func (o *FullStackPack) SetOverviewUrl(v string) {
	o.OverviewUrl = &v
}

// GetDetailedOverviewUrl returns the DetailedOverviewUrl field value if set, zero value otherwise.
func (o *FullStackPack) GetDetailedOverviewUrl() string {
	if o == nil || o.DetailedOverviewUrl == nil {
		var ret string
		return ret
	}
	return *o.DetailedOverviewUrl
}

// GetDetailedOverviewUrlOk returns a tuple with the DetailedOverviewUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetDetailedOverviewUrlOk() (*string, bool) {
	if o == nil || o.DetailedOverviewUrl == nil {
		return nil, false
	}
	return o.DetailedOverviewUrl, true
}

// HasDetailedOverviewUrl returns a boolean if a field has been set.
func (o *FullStackPack) HasDetailedOverviewUrl() bool {
	if o != nil && o.DetailedOverviewUrl != nil {
		return true
	}

	return false
}

// SetDetailedOverviewUrl gets a reference to the given string and assigns it to the DetailedOverviewUrl field.
func (o *FullStackPack) SetDetailedOverviewUrl(v string) {
	o.DetailedOverviewUrl = &v
}

// GetResourcesUrl returns the ResourcesUrl field value if set, zero value otherwise.
func (o *FullStackPack) GetResourcesUrl() string {
	if o == nil || o.ResourcesUrl == nil {
		var ret string
		return ret
	}
	return *o.ResourcesUrl
}

// GetResourcesUrlOk returns a tuple with the ResourcesUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetResourcesUrlOk() (*string, bool) {
	if o == nil || o.ResourcesUrl == nil {
		return nil, false
	}
	return o.ResourcesUrl, true
}

// HasResourcesUrl returns a boolean if a field has been set.
func (o *FullStackPack) HasResourcesUrl() bool {
	if o != nil && o.ResourcesUrl != nil {
		return true
	}

	return false
}

// SetResourcesUrl gets a reference to the given string and assigns it to the ResourcesUrl field.
func (o *FullStackPack) SetResourcesUrl(v string) {
	o.ResourcesUrl = &v
}

// GetFaqs returns the Faqs field value
func (o *FullStackPack) GetFaqs() []FAQ {
	if o == nil {
		var ret []FAQ
		return ret
	}

	return o.Faqs
}

// GetFaqsOk returns a tuple with the Faqs field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetFaqsOk() ([]FAQ, bool) {
	if o == nil {
		return nil, false
	}
	return o.Faqs, true
}

// SetFaqs sets field value
func (o *FullStackPack) SetFaqs(v []FAQ) {
	o.Faqs = v
}

// GetConfigurationUrls returns the ConfigurationUrls field value
func (o *FullStackPack) GetConfigurationUrls() [][]string {
	if o == nil {
		var ret [][]string
		return ret
	}

	return o.ConfigurationUrls
}

// GetConfigurationUrlsOk returns a tuple with the ConfigurationUrls field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetConfigurationUrlsOk() ([][]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationUrls, true
}

// SetConfigurationUrls sets field value
func (o *FullStackPack) SetConfigurationUrls(v [][]string) {
	o.ConfigurationUrls = v
}

// GetReleaseStatus returns the ReleaseStatus field value
func (o *FullStackPack) GetReleaseStatus() ReleaseStatus {
	if o == nil {
		var ret ReleaseStatus
		return ret
	}

	return o.ReleaseStatus
}

// GetReleaseStatusOk returns a tuple with the ReleaseStatus field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetReleaseStatusOk() (*ReleaseStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReleaseStatus, true
}

// SetReleaseStatus sets field value
func (o *FullStackPack) SetReleaseStatus(v ReleaseStatus) {
	o.ReleaseStatus = v
}

// GetSteps returns the Steps field value
func (o *FullStackPack) GetSteps() []StackPackStep {
	if o == nil {
		var ret []StackPackStep
		return ret
	}

	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetStepsOk() ([]StackPackStep, bool) {
	if o == nil {
		return nil, false
	}
	return o.Steps, true
}

// SetSteps sets field value
func (o *FullStackPack) SetSteps(v []StackPackStep) {
	o.Steps = v
}

// GetIntegrations returns the Integrations field value
func (o *FullStackPack) GetIntegrations() []StackPackIntegration {
	if o == nil {
		var ret []StackPackIntegration
		return ret
	}

	return o.Integrations
}

// GetIntegrationsOk returns a tuple with the Integrations field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetIntegrationsOk() ([]StackPackIntegration, bool) {
	if o == nil {
		return nil, false
	}
	return o.Integrations, true
}

// SetIntegrations sets field value
func (o *FullStackPack) SetIntegrations(v []StackPackIntegration) {
	o.Integrations = v
}

// GetReleaseNotes returns the ReleaseNotes field value if set, zero value otherwise.
func (o *FullStackPack) GetReleaseNotes() string {
	if o == nil || o.ReleaseNotes == nil {
		var ret string
		return ret
	}
	return *o.ReleaseNotes
}

// GetReleaseNotesOk returns a tuple with the ReleaseNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetReleaseNotesOk() (*string, bool) {
	if o == nil || o.ReleaseNotes == nil {
		return nil, false
	}
	return o.ReleaseNotes, true
}

// HasReleaseNotes returns a boolean if a field has been set.
func (o *FullStackPack) HasReleaseNotes() bool {
	if o != nil && o.ReleaseNotes != nil {
		return true
	}

	return false
}

// SetReleaseNotes gets a reference to the given string and assigns it to the ReleaseNotes field.
func (o *FullStackPack) SetReleaseNotes(v string) {
	o.ReleaseNotes = &v
}

// GetUpgradeInstructions returns the UpgradeInstructions field value if set, zero value otherwise.
func (o *FullStackPack) GetUpgradeInstructions() string {
	if o == nil || o.UpgradeInstructions == nil {
		var ret string
		return ret
	}
	return *o.UpgradeInstructions
}

// GetUpgradeInstructionsOk returns a tuple with the UpgradeInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetUpgradeInstructionsOk() (*string, bool) {
	if o == nil || o.UpgradeInstructions == nil {
		return nil, false
	}
	return o.UpgradeInstructions, true
}

// HasUpgradeInstructions returns a boolean if a field has been set.
func (o *FullStackPack) HasUpgradeInstructions() bool {
	if o != nil && o.UpgradeInstructions != nil {
		return true
	}

	return false
}

// SetUpgradeInstructions gets a reference to the given string and assigns it to the UpgradeInstructions field.
func (o *FullStackPack) SetUpgradeInstructions(v string) {
	o.UpgradeInstructions = &v
}

// GetConfigurations returns the Configurations field value
func (o *FullStackPack) GetConfigurations() []StackPackConfiguration {
	if o == nil {
		var ret []StackPackConfiguration
		return ret
	}

	return o.Configurations
}

// GetConfigurationsOk returns a tuple with the Configurations field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetConfigurationsOk() ([]StackPackConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return o.Configurations, true
}

// SetConfigurations sets field value
func (o *FullStackPack) SetConfigurations(v []StackPackConfiguration) {
	o.Configurations = v
}

// GetNextVersion returns the NextVersion field value if set, zero value otherwise.
func (o *FullStackPack) GetNextVersion() FullStackPack {
	if o == nil || o.NextVersion == nil {
		var ret FullStackPack
		return ret
	}
	return *o.NextVersion
}

// GetNextVersionOk returns a tuple with the NextVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetNextVersionOk() (*FullStackPack, bool) {
	if o == nil || o.NextVersion == nil {
		return nil, false
	}
	return o.NextVersion, true
}

// HasNextVersion returns a boolean if a field has been set.
func (o *FullStackPack) HasNextVersion() bool {
	if o != nil && o.NextVersion != nil {
		return true
	}

	return false
}

// SetNextVersion gets a reference to the given FullStackPack and assigns it to the NextVersion field.
func (o *FullStackPack) SetNextVersion(v FullStackPack) {
	o.NextVersion = &v
}

// GetLatestVersion returns the LatestVersion field value if set, zero value otherwise.
func (o *FullStackPack) GetLatestVersion() FullStackPack {
	if o == nil || o.LatestVersion == nil {
		var ret FullStackPack
		return ret
	}
	return *o.LatestVersion
}

// GetLatestVersionOk returns a tuple with the LatestVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetLatestVersionOk() (*FullStackPack, bool) {
	if o == nil || o.LatestVersion == nil {
		return nil, false
	}
	return o.LatestVersion, true
}

// HasLatestVersion returns a boolean if a field has been set.
func (o *FullStackPack) HasLatestVersion() bool {
	if o != nil && o.LatestVersion != nil {
		return true
	}

	return false
}

// SetLatestVersion gets a reference to the given FullStackPack and assigns it to the LatestVersion field.
func (o *FullStackPack) SetLatestVersion(v FullStackPack) {
	o.LatestVersion = &v
}

// GetCanUninstall returns the CanUninstall field value
func (o *FullStackPack) GetCanUninstall() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.CanUninstall
}

// GetCanUninstallOk returns a tuple with the CanUninstall field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetCanUninstallOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CanUninstall, true
}

// SetCanUninstall sets field value
func (o *FullStackPack) SetCanUninstall(v bool) {
	o.CanUninstall = v
}

// GetIsCompatible returns the IsCompatible field value
func (o *FullStackPack) GetIsCompatible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsCompatible
}

// GetIsCompatibleOk returns a tuple with the IsCompatible field value
// and a boolean to check if the value has been set.
func (o *FullStackPack) GetIsCompatibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsCompatible, true
}

// SetIsCompatible sets field value
func (o *FullStackPack) SetIsCompatible(v bool) {
	o.IsCompatible = v
}

func (o FullStackPack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["displayName"] = o.DisplayName
	}
	if true {
		toSerialize["version"] = o.Version
	}
	if o.Logo != nil {
		toSerialize["logo"] = o.Logo
	}
	if true {
		toSerialize["categories"] = o.Categories
	}
	if true {
		toSerialize["isNew"] = o.IsNew
	}
	if true {
		toSerialize["isMultiConfig"] = o.IsMultiConfig
	}
	if o.OverviewUrl != nil {
		toSerialize["overviewUrl"] = o.OverviewUrl
	}
	if o.DetailedOverviewUrl != nil {
		toSerialize["detailedOverviewUrl"] = o.DetailedOverviewUrl
	}
	if o.ResourcesUrl != nil {
		toSerialize["resourcesUrl"] = o.ResourcesUrl
	}
	if true {
		toSerialize["faqs"] = o.Faqs
	}
	if true {
		toSerialize["configurationUrls"] = o.ConfigurationUrls
	}
	if true {
		toSerialize["releaseStatus"] = o.ReleaseStatus
	}
	if true {
		toSerialize["steps"] = o.Steps
	}
	if true {
		toSerialize["integrations"] = o.Integrations
	}
	if o.ReleaseNotes != nil {
		toSerialize["releaseNotes"] = o.ReleaseNotes
	}
	if o.UpgradeInstructions != nil {
		toSerialize["upgradeInstructions"] = o.UpgradeInstructions
	}
	if true {
		toSerialize["configurations"] = o.Configurations
	}
	if o.NextVersion != nil {
		toSerialize["nextVersion"] = o.NextVersion
	}
	if o.LatestVersion != nil {
		toSerialize["latestVersion"] = o.LatestVersion
	}
	if true {
		toSerialize["canUninstall"] = o.CanUninstall
	}
	if true {
		toSerialize["isCompatible"] = o.IsCompatible
	}
	return json.Marshal(toSerialize)
}

type NullableFullStackPack struct {
	value *FullStackPack
	isSet bool
}

func (v NullableFullStackPack) Get() *FullStackPack {
	return v.value
}

func (v *NullableFullStackPack) Set(val *FullStackPack) {
	v.value = val
	v.isSet = true
}

func (v NullableFullStackPack) IsSet() bool {
	return v.isSet
}

func (v *NullableFullStackPack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullStackPack(val *FullStackPack) *NullableFullStackPack {
	return &NullableFullStackPack{value: val, isSet: true}
}

func (v NullableFullStackPack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullStackPack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
