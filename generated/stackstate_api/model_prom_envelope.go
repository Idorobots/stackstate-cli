/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// PromEnvelope struct for PromEnvelope
type PromEnvelope struct {
	Status    string    `json:"status"`
	Data      *PromData `json:"data,omitempty"`
	ErrorType *string   `json:"errorType,omitempty"`
	Error     *string   `json:"error,omitempty"`
	Warnings  []string  `json:"warnings,omitempty"`
}

// NewPromEnvelope instantiates a new PromEnvelope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPromEnvelope(status string) *PromEnvelope {
	this := PromEnvelope{}
	this.Status = status
	return &this
}

// NewPromEnvelopeWithDefaults instantiates a new PromEnvelope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPromEnvelopeWithDefaults() *PromEnvelope {
	this := PromEnvelope{}
	return &this
}

// GetStatus returns the Status field value
func (o *PromEnvelope) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *PromEnvelope) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *PromEnvelope) SetStatus(v string) {
	o.Status = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PromEnvelope) GetData() PromData {
	if o == nil || o.Data == nil {
		var ret PromData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromEnvelope) GetDataOk() (*PromData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PromEnvelope) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given PromData and assigns it to the Data field.
func (o *PromEnvelope) SetData(v PromData) {
	o.Data = &v
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise.
func (o *PromEnvelope) GetErrorType() string {
	if o == nil || o.ErrorType == nil {
		var ret string
		return ret
	}
	return *o.ErrorType
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromEnvelope) GetErrorTypeOk() (*string, bool) {
	if o == nil || o.ErrorType == nil {
		return nil, false
	}
	return o.ErrorType, true
}

// HasErrorType returns a boolean if a field has been set.
func (o *PromEnvelope) HasErrorType() bool {
	if o != nil && o.ErrorType != nil {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given string and assigns it to the ErrorType field.
func (o *PromEnvelope) SetErrorType(v string) {
	o.ErrorType = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *PromEnvelope) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromEnvelope) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *PromEnvelope) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *PromEnvelope) SetError(v string) {
	o.Error = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *PromEnvelope) GetWarnings() []string {
	if o == nil || o.Warnings == nil {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PromEnvelope) GetWarningsOk() ([]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *PromEnvelope) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *PromEnvelope) SetWarnings(v []string) {
	o.Warnings = v
}

func (o PromEnvelope) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.ErrorType != nil {
		toSerialize["errorType"] = o.ErrorType
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullablePromEnvelope struct {
	value *PromEnvelope
	isSet bool
}

func (v NullablePromEnvelope) Get() *PromEnvelope {
	return v.value
}

func (v *NullablePromEnvelope) Set(val *PromEnvelope) {
	v.value = val
	v.isSet = true
}

func (v NullablePromEnvelope) IsSet() bool {
	return v.isSet
}

func (v *NullablePromEnvelope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePromEnvelope(val *PromEnvelope) *NullablePromEnvelope {
	return &NullablePromEnvelope{value: val, isSet: true}
}

func (v NullablePromEnvelope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePromEnvelope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
