/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// ServiceTokenCreateError - struct for ServiceTokenCreateError
type ServiceTokenCreateError struct {
	ServiceTokenInvalidExpiryError *ServiceTokenInvalidExpiryError
}

// ServiceTokenInvalidExpiryErrorAsServiceTokenCreateError is a convenience function that returns ServiceTokenInvalidExpiryError wrapped in ServiceTokenCreateError
func ServiceTokenInvalidExpiryErrorAsServiceTokenCreateError(v *ServiceTokenInvalidExpiryError) ServiceTokenCreateError {
	return ServiceTokenCreateError{
		ServiceTokenInvalidExpiryError: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ServiceTokenCreateError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'ServiceTokenInvalidExpiryError'
	if jsonDict["_type"] == "ServiceTokenInvalidExpiryError" {
		// try to unmarshal JSON data into ServiceTokenInvalidExpiryError
		err = json.Unmarshal(data, &dst.ServiceTokenInvalidExpiryError)
		if err == nil {
			return nil // data stored in dst.ServiceTokenInvalidExpiryError, return on the first match
		} else {
			dst.ServiceTokenInvalidExpiryError = nil
			return fmt.Errorf("Failed to unmarshal ServiceTokenCreateError as ServiceTokenInvalidExpiryError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ServiceTokenCreateError) MarshalJSON() ([]byte, error) {
	if src.ServiceTokenInvalidExpiryError != nil {
		return json.Marshal(&src.ServiceTokenInvalidExpiryError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ServiceTokenCreateError) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ServiceTokenInvalidExpiryError != nil {
		return obj.ServiceTokenInvalidExpiryError
	}

	// all schemas are nil
	return nil
}

type NullableServiceTokenCreateError struct {
	value *ServiceTokenCreateError
	isSet bool
}

func (v NullableServiceTokenCreateError) Get() *ServiceTokenCreateError {
	return v.value
}

func (v *NullableServiceTokenCreateError) Set(val *ServiceTokenCreateError) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceTokenCreateError) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceTokenCreateError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceTokenCreateError(val *ServiceTokenCreateError) *NullableServiceTokenCreateError {
	return &NullableServiceTokenCreateError{value: val, isSet: true}
}

func (v NullableServiceTokenCreateError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceTokenCreateError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


