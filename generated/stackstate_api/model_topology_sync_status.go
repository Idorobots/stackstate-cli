/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_client

import (
	"encoding/json"
	"fmt"
)

// TopologySyncStatus the model 'TopologySyncStatus'
type TopologySyncStatus string

// List of TopologySyncStatus
const (
	RUNNING TopologySyncStatus = "Running"
	RESETTING TopologySyncStatus = "Resetting"
	DELETING TopologySyncStatus = "Deleting"
	DELETE_FAILED TopologySyncStatus = "DeleteFailed"
)

// All allowed values of TopologySyncStatus enum
var AllowedTopologySyncStatusEnumValues = []TopologySyncStatus{
	"Running",
	"Resetting",
	"Deleting",
	"DeleteFailed",
}

func (v *TopologySyncStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TopologySyncStatus(value)
	for _, existing := range AllowedTopologySyncStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TopologySyncStatus", value)
}

// NewTopologySyncStatusFromValue returns a pointer to a valid TopologySyncStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTopologySyncStatusFromValue(v string) (*TopologySyncStatus, error) {
	ev := TopologySyncStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TopologySyncStatus: valid values are %v", v, AllowedTopologySyncStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TopologySyncStatus) IsValid() bool {
	for _, existing := range AllowedTopologySyncStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TopologySyncStatus value
func (v TopologySyncStatus) Ptr() *TopologySyncStatus {
	return &v
}

type NullableTopologySyncStatus struct {
	value *TopologySyncStatus
	isSet bool
}

func (v NullableTopologySyncStatus) Get() *TopologySyncStatus {
	return v.value
}

func (v *NullableTopologySyncStatus) Set(val *TopologySyncStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableTopologySyncStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableTopologySyncStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopologySyncStatus(val *TopologySyncStatus) *NullableTopologySyncStatus {
	return &NullableTopologySyncStatus{value: val, isSet: true}
}

func (v NullableTopologySyncStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopologySyncStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

