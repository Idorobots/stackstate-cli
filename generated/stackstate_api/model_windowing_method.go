/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// WindowingMethod the model 'WindowingMethod'
type WindowingMethod string

// List of WindowingMethod
const (
	WINDOWINGMETHOD_SLIDING  WindowingMethod = "SLIDING"
	WINDOWINGMETHOD_BATCHING WindowingMethod = "BATCHING"
)

// All allowed values of WindowingMethod enum
var AllowedWindowingMethodEnumValues = []WindowingMethod{
	"SLIDING",
	"BATCHING",
}

func (v *WindowingMethod) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WindowingMethod(value)
	for _, existing := range AllowedWindowingMethodEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WindowingMethod", value)
}

// NewWindowingMethodFromValue returns a pointer to a valid WindowingMethod
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWindowingMethodFromValue(v string) (*WindowingMethod, error) {
	ev := WindowingMethod(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WindowingMethod: valid values are %v", v, AllowedWindowingMethodEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WindowingMethod) IsValid() bool {
	for _, existing := range AllowedWindowingMethodEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WindowingMethod value
func (v WindowingMethod) Ptr() *WindowingMethod {
	return &v
}

type NullableWindowingMethod struct {
	value *WindowingMethod
	isSet bool
}

func (v NullableWindowingMethod) Get() *WindowingMethod {
	return v.value
}

func (v *NullableWindowingMethod) Set(val *WindowingMethod) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowingMethod) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowingMethod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowingMethod(val *WindowingMethod) *NullableWindowingMethod {
	return &NullableWindowingMethod{value: val, isSet: true}
}

func (v NullableWindowingMethod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowingMethod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
