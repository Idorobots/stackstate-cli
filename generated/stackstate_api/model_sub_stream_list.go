/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// SubStreamList struct for SubStreamList
type SubStreamList struct {
	SubStreams []SubStreamListItem `json:"subStreams"`
}

// NewSubStreamList instantiates a new SubStreamList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubStreamList(subStreams []SubStreamListItem) *SubStreamList {
	this := SubStreamList{}
	this.SubStreams = subStreams
	return &this
}

// NewSubStreamListWithDefaults instantiates a new SubStreamList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubStreamListWithDefaults() *SubStreamList {
	this := SubStreamList{}
	return &this
}

// GetSubStreams returns the SubStreams field value
func (o *SubStreamList) GetSubStreams() []SubStreamListItem {
	if o == nil {
		var ret []SubStreamListItem
		return ret
	}

	return o.SubStreams
}

// GetSubStreamsOk returns a tuple with the SubStreams field value
// and a boolean to check if the value has been set.
func (o *SubStreamList) GetSubStreamsOk() ([]SubStreamListItem, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubStreams, true
}

// SetSubStreams sets field value
func (o *SubStreamList) SetSubStreams(v []SubStreamListItem) {
	o.SubStreams = v
}

func (o SubStreamList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["subStreams"] = o.SubStreams
	}
	return json.Marshal(toSerialize)
}

type NullableSubStreamList struct {
	value *SubStreamList
	isSet bool
}

func (v NullableSubStreamList) Get() *SubStreamList {
	return v.value
}

func (v *NullableSubStreamList) Set(val *SubStreamList) {
	v.value = val
	v.isSet = true
}

func (v NullableSubStreamList) IsSet() bool {
	return v.isSet
}

func (v *NullableSubStreamList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubStreamList(val *SubStreamList) *NullableSubStreamList {
	return &NullableSubStreamList{value: val, isSet: true}
}

func (v NullableSubStreamList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubStreamList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


