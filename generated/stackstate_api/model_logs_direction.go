/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// LogsDirection the model 'LogsDirection'
type LogsDirection string

// List of LogsDirection
const (
	LOGSDIRECTION_NEWEST LogsDirection = "NEWEST"
	LOGSDIRECTION_OLDEST LogsDirection = "OLDEST"
)

// All allowed values of LogsDirection enum
var AllowedLogsDirectionEnumValues = []LogsDirection{
	"NEWEST",
	"OLDEST",
}

func (v *LogsDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LogsDirection(value)
	for _, existing := range AllowedLogsDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LogsDirection", value)
}

// NewLogsDirectionFromValue returns a pointer to a valid LogsDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogsDirectionFromValue(v string) (*LogsDirection, error) {
	ev := LogsDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LogsDirection: valid values are %v", v, AllowedLogsDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogsDirection) IsValid() bool {
	for _, existing := range AllowedLogsDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LogsDirection value
func (v LogsDirection) Ptr() *LogsDirection {
	return &v
}

type NullableLogsDirection struct {
	value *LogsDirection
	isSet bool
}

func (v NullableLogsDirection) Get() *LogsDirection {
	return v.value
}

func (v *NullableLogsDirection) Set(val *LogsDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableLogsDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableLogsDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogsDirection(val *LogsDirection) *NullableLogsDirection {
	return &NullableLogsDirection{value: val, isSet: true}
}

func (v NullableLogsDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogsDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
