/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// EventStream struct for EventStream
type EventStream struct {
	Type string `json:"_type"`
	DataSource int64 `json:"dataSource"`
	DataType DataType `json:"dataType"`
	Description *string `json:"description,omitempty"`
	Id *int64 `json:"id,omitempty"`
	LastUpdateTimestamp *int64 `json:"lastUpdateTimestamp,omitempty"`
	Name string `json:"name"`
	Priority *StreamPriority `json:"priority,omitempty"`
	Query EventTelemetryQuery `json:"query"`
	SyncCreated bool `json:"syncCreated"`
}

// NewEventStream instantiates a new EventStream object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventStream(type_ string, dataSource int64, dataType DataType, name string, query EventTelemetryQuery, syncCreated bool) *EventStream {
	this := EventStream{}
	this.Type = type_
	this.DataSource = dataSource
	this.DataType = dataType
	this.Name = name
	this.Query = query
	this.SyncCreated = syncCreated
	return &this
}

// NewEventStreamWithDefaults instantiates a new EventStream object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventStreamWithDefaults() *EventStream {
	this := EventStream{}
	return &this
}

// GetType returns the Type field value
func (o *EventStream) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *EventStream) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *EventStream) SetType(v string) {
	o.Type = v
}

// GetDataSource returns the DataSource field value
func (o *EventStream) GetDataSource() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.DataSource
}

// GetDataSourceOk returns a tuple with the DataSource field value
// and a boolean to check if the value has been set.
func (o *EventStream) GetDataSourceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataSource, true
}

// SetDataSource sets field value
func (o *EventStream) SetDataSource(v int64) {
	o.DataSource = v
}

// GetDataType returns the DataType field value
func (o *EventStream) GetDataType() DataType {
	if o == nil {
		var ret DataType
		return ret
	}

	return o.DataType
}

// GetDataTypeOk returns a tuple with the DataType field value
// and a boolean to check if the value has been set.
func (o *EventStream) GetDataTypeOk() (*DataType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DataType, true
}

// SetDataType sets field value
func (o *EventStream) SetDataType(v DataType) {
	o.DataType = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *EventStream) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStream) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *EventStream) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *EventStream) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventStream) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStream) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventStream) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *EventStream) SetId(v int64) {
	o.Id = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise.
func (o *EventStream) GetLastUpdateTimestamp() int64 {
	if o == nil || o.LastUpdateTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStream) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimestamp == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp, true
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *EventStream) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given int64 and assigns it to the LastUpdateTimestamp field.
func (o *EventStream) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = &v
}

// GetName returns the Name field value
func (o *EventStream) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EventStream) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EventStream) SetName(v string) {
	o.Name = v
}

// GetPriority returns the Priority field value if set, zero value otherwise.
func (o *EventStream) GetPriority() StreamPriority {
	if o == nil || o.Priority == nil {
		var ret StreamPriority
		return ret
	}
	return *o.Priority
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventStream) GetPriorityOk() (*StreamPriority, bool) {
	if o == nil || o.Priority == nil {
		return nil, false
	}
	return o.Priority, true
}

// HasPriority returns a boolean if a field has been set.
func (o *EventStream) HasPriority() bool {
	if o != nil && o.Priority != nil {
		return true
	}

	return false
}

// SetPriority gets a reference to the given StreamPriority and assigns it to the Priority field.
func (o *EventStream) SetPriority(v StreamPriority) {
	o.Priority = &v
}

// GetQuery returns the Query field value
func (o *EventStream) GetQuery() EventTelemetryQuery {
	if o == nil {
		var ret EventTelemetryQuery
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *EventStream) GetQueryOk() (*EventTelemetryQuery, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *EventStream) SetQuery(v EventTelemetryQuery) {
	o.Query = v
}

// GetSyncCreated returns the SyncCreated field value
func (o *EventStream) GetSyncCreated() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SyncCreated
}

// GetSyncCreatedOk returns a tuple with the SyncCreated field value
// and a boolean to check if the value has been set.
func (o *EventStream) GetSyncCreatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SyncCreated, true
}

// SetSyncCreated sets field value
func (o *EventStream) SetSyncCreated(v bool) {
	o.SyncCreated = v
}

func (o EventStream) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["dataSource"] = o.DataSource
	}
	if true {
		toSerialize["dataType"] = o.DataType
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTimestamp != nil {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Priority != nil {
		toSerialize["priority"] = o.Priority
	}
	if true {
		toSerialize["query"] = o.Query
	}
	if true {
		toSerialize["syncCreated"] = o.SyncCreated
	}
	return json.Marshal(toSerialize)
}

type NullableEventStream struct {
	value *EventStream
	isSet bool
}

func (v NullableEventStream) Get() *EventStream {
	return v.value
}

func (v *NullableEventStream) Set(val *EventStream) {
	v.value = val
	v.isSet = true
}

func (v NullableEventStream) IsSet() bool {
	return v.isSet
}

func (v *NullableEventStream) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventStream(val *EventStream) *NullableEventStream {
	return &NullableEventStream{value: val, isSet: true}
}

func (v NullableEventStream) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventStream) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


