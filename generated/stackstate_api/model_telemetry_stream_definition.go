/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// TelemetryStreamDefinition - struct for TelemetryStreamDefinition
type TelemetryStreamDefinition struct {
	EventTelemetryStreamDefinition *EventTelemetryStreamDefinition
	MetricTelemetryStreamDefinition *MetricTelemetryStreamDefinition
}

// EventTelemetryStreamDefinitionAsTelemetryStreamDefinition is a convenience function that returns EventTelemetryStreamDefinition wrapped in TelemetryStreamDefinition
func EventTelemetryStreamDefinitionAsTelemetryStreamDefinition(v *EventTelemetryStreamDefinition) TelemetryStreamDefinition {
	return TelemetryStreamDefinition{
		EventTelemetryStreamDefinition: v,
	}
}

// MetricTelemetryStreamDefinitionAsTelemetryStreamDefinition is a convenience function that returns MetricTelemetryStreamDefinition wrapped in TelemetryStreamDefinition
func MetricTelemetryStreamDefinitionAsTelemetryStreamDefinition(v *MetricTelemetryStreamDefinition) TelemetryStreamDefinition {
	return TelemetryStreamDefinition{
		MetricTelemetryStreamDefinition: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TelemetryStreamDefinition) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'EventTelemetryStreamDefinition'
	if jsonDict["_type"] == "EventTelemetryStreamDefinition" {
		// try to unmarshal JSON data into EventTelemetryStreamDefinition
		err = json.Unmarshal(data, &dst.EventTelemetryStreamDefinition)
		if err == nil {
			return nil // data stored in dst.EventTelemetryStreamDefinition, return on the first match
		} else {
			dst.EventTelemetryStreamDefinition = nil
			return fmt.Errorf("Failed to unmarshal TelemetryStreamDefinition as EventTelemetryStreamDefinition: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MetricTelemetryStreamDefinition'
	if jsonDict["_type"] == "MetricTelemetryStreamDefinition" {
		// try to unmarshal JSON data into MetricTelemetryStreamDefinition
		err = json.Unmarshal(data, &dst.MetricTelemetryStreamDefinition)
		if err == nil {
			return nil // data stored in dst.MetricTelemetryStreamDefinition, return on the first match
		} else {
			dst.MetricTelemetryStreamDefinition = nil
			return fmt.Errorf("Failed to unmarshal TelemetryStreamDefinition as MetricTelemetryStreamDefinition: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TelemetryStreamDefinition) MarshalJSON() ([]byte, error) {
	if src.EventTelemetryStreamDefinition != nil {
		return json.Marshal(&src.EventTelemetryStreamDefinition)
	}

	if src.MetricTelemetryStreamDefinition != nil {
		return json.Marshal(&src.MetricTelemetryStreamDefinition)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TelemetryStreamDefinition) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.EventTelemetryStreamDefinition != nil {
		return obj.EventTelemetryStreamDefinition
	}

	if obj.MetricTelemetryStreamDefinition != nil {
		return obj.MetricTelemetryStreamDefinition
	}

	// all schemas are nil
	return nil
}

type NullableTelemetryStreamDefinition struct {
	value *TelemetryStreamDefinition
	isSet bool
}

func (v NullableTelemetryStreamDefinition) Get() *TelemetryStreamDefinition {
	return v.value
}

func (v *NullableTelemetryStreamDefinition) Set(val *TelemetryStreamDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTelemetryStreamDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTelemetryStreamDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTelemetryStreamDefinition(val *TelemetryStreamDefinition) *NullableTelemetryStreamDefinition {
	return &NullableTelemetryStreamDefinition{value: val, isSet: true}
}

func (v NullableTelemetryStreamDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTelemetryStreamDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


