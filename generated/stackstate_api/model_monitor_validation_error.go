/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// MonitorValidationError - struct for MonitorValidationError
type MonitorValidationError struct {
	InvalidMonitorIdentifierError *InvalidMonitorIdentifierError
	MonitorInvalidIntervalError   *MonitorInvalidIntervalError
}

// InvalidMonitorIdentifierErrorAsMonitorValidationError is a convenience function that returns InvalidMonitorIdentifierError wrapped in MonitorValidationError
func InvalidMonitorIdentifierErrorAsMonitorValidationError(v *InvalidMonitorIdentifierError) MonitorValidationError {
	return MonitorValidationError{
		InvalidMonitorIdentifierError: v,
	}
}

// MonitorInvalidIntervalErrorAsMonitorValidationError is a convenience function that returns MonitorInvalidIntervalError wrapped in MonitorValidationError
func MonitorInvalidIntervalErrorAsMonitorValidationError(v *MonitorInvalidIntervalError) MonitorValidationError {
	return MonitorValidationError{
		MonitorInvalidIntervalError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *MonitorValidationError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'InvalidMonitorIdentifierError'
	if jsonDict["_type"] == "InvalidMonitorIdentifierError" {
		// try to unmarshal JSON data into InvalidMonitorIdentifierError
		err = json.Unmarshal(data, &dst.InvalidMonitorIdentifierError)
		if err == nil {
			return nil // data stored in dst.InvalidMonitorIdentifierError, return on the first match
		} else {
			dst.InvalidMonitorIdentifierError = nil
			return fmt.Errorf("Failed to unmarshal MonitorValidationError as InvalidMonitorIdentifierError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'MonitorInvalidIntervalError'
	if jsonDict["_type"] == "MonitorInvalidIntervalError" {
		// try to unmarshal JSON data into MonitorInvalidIntervalError
		err = json.Unmarshal(data, &dst.MonitorInvalidIntervalError)
		if err == nil {
			return nil // data stored in dst.MonitorInvalidIntervalError, return on the first match
		} else {
			dst.MonitorInvalidIntervalError = nil
			return fmt.Errorf("Failed to unmarshal MonitorValidationError as MonitorInvalidIntervalError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src MonitorValidationError) MarshalJSON() ([]byte, error) {
	if src.InvalidMonitorIdentifierError != nil {
		return json.Marshal(&src.InvalidMonitorIdentifierError)
	}

	if src.MonitorInvalidIntervalError != nil {
		return json.Marshal(&src.MonitorInvalidIntervalError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *MonitorValidationError) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.InvalidMonitorIdentifierError != nil {
		return obj.InvalidMonitorIdentifierError
	}

	if obj.MonitorInvalidIntervalError != nil {
		return obj.MonitorInvalidIntervalError
	}

	// all schemas are nil
	return nil
}

type NullableMonitorValidationError struct {
	value *MonitorValidationError
	isSet bool
}

func (v NullableMonitorValidationError) Get() *MonitorValidationError {
	return v.value
}

func (v *NullableMonitorValidationError) Set(val *MonitorValidationError) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorValidationError) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorValidationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorValidationError(val *MonitorValidationError) *NullableMonitorValidationError {
	return &NullableMonitorValidationError{value: val, isSet: true}
}

func (v NullableMonitorValidationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorValidationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
