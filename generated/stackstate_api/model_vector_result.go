/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// VectorResult struct for VectorResult
type VectorResult struct {
	Metric map[string]string `json:"metric"`
	Value ValueTuple `json:"value"`
}

// NewVectorResult instantiates a new VectorResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVectorResult(metric map[string]string, value ValueTuple) *VectorResult {
	this := VectorResult{}
	this.Metric = metric
	this.Value = value
	return &this
}

// NewVectorResultWithDefaults instantiates a new VectorResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVectorResultWithDefaults() *VectorResult {
	this := VectorResult{}
	return &this
}

// GetMetric returns the Metric field value
func (o *VectorResult) GetMetric() map[string]string {
	if o == nil {
		var ret map[string]string
		return ret
	}

	return o.Metric
}

// GetMetricOk returns a tuple with the Metric field value
// and a boolean to check if the value has been set.
func (o *VectorResult) GetMetricOk() (*map[string]string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metric, true
}

// SetMetric sets field value
func (o *VectorResult) SetMetric(v map[string]string) {
	o.Metric = v
}

// GetValue returns the Value field value
func (o *VectorResult) GetValue() ValueTuple {
	if o == nil {
		var ret ValueTuple
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *VectorResult) GetValueOk() (*ValueTuple, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *VectorResult) SetValue(v ValueTuple) {
	o.Value = v
}

func (o VectorResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["metric"] = o.Metric
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableVectorResult struct {
	value *VectorResult
	isSet bool
}

func (v NullableVectorResult) Get() *VectorResult {
	return v.value
}

func (v *NullableVectorResult) Set(val *VectorResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVectorResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVectorResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVectorResult(val *VectorResult) *NullableVectorResult {
	return &NullableVectorResult{value: val, isSet: true}
}

func (v NullableVectorResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVectorResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


