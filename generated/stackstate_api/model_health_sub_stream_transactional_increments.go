/*
StackState API

This API documentation page describes the StackState server API. The StackState UI and CLI use the StackState server API to configure and query StackState.  You can use the API for similar purposes.  Each request sent to the StackState server API must be authenticated using one of the available authentication methods.   *Note that the StackState receiver API, used to send topology, telemetry and traces to StackState, is not described on this page and requires a different authentication method.*  For more information on StackState, refer to the [StackState documentation](https://docs.stackstate.com).

API version: 5.2.0
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// HealthSubStreamTransactionalIncrements struct for HealthSubStreamTransactionalIncrements
type HealthSubStreamTransactionalIncrements struct {
	Type       string `json:"_type"`
	Offset     int64  `json:"offset"`
	BatchIndex *int64 `json:"batchIndex,omitempty"`
}

// NewHealthSubStreamTransactionalIncrements instantiates a new HealthSubStreamTransactionalIncrements object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthSubStreamTransactionalIncrements(type_ string, offset int64) *HealthSubStreamTransactionalIncrements {
	this := HealthSubStreamTransactionalIncrements{}
	this.Type = type_
	this.Offset = offset
	return &this
}

// NewHealthSubStreamTransactionalIncrementsWithDefaults instantiates a new HealthSubStreamTransactionalIncrements object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthSubStreamTransactionalIncrementsWithDefaults() *HealthSubStreamTransactionalIncrements {
	this := HealthSubStreamTransactionalIncrements{}
	return &this
}

// GetType returns the Type field value
func (o *HealthSubStreamTransactionalIncrements) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *HealthSubStreamTransactionalIncrements) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *HealthSubStreamTransactionalIncrements) SetType(v string) {
	o.Type = v
}

// GetOffset returns the Offset field value
func (o *HealthSubStreamTransactionalIncrements) GetOffset() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *HealthSubStreamTransactionalIncrements) GetOffsetOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *HealthSubStreamTransactionalIncrements) SetOffset(v int64) {
	o.Offset = v
}

// GetBatchIndex returns the BatchIndex field value if set, zero value otherwise.
func (o *HealthSubStreamTransactionalIncrements) GetBatchIndex() int64 {
	if o == nil || o.BatchIndex == nil {
		var ret int64
		return ret
	}
	return *o.BatchIndex
}

// GetBatchIndexOk returns a tuple with the BatchIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthSubStreamTransactionalIncrements) GetBatchIndexOk() (*int64, bool) {
	if o == nil || o.BatchIndex == nil {
		return nil, false
	}
	return o.BatchIndex, true
}

// HasBatchIndex returns a boolean if a field has been set.
func (o *HealthSubStreamTransactionalIncrements) HasBatchIndex() bool {
	if o != nil && o.BatchIndex != nil {
		return true
	}

	return false
}

// SetBatchIndex gets a reference to the given int64 and assigns it to the BatchIndex field.
func (o *HealthSubStreamTransactionalIncrements) SetBatchIndex(v int64) {
	o.BatchIndex = &v
}

func (o HealthSubStreamTransactionalIncrements) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["offset"] = o.Offset
	}
	if o.BatchIndex != nil {
		toSerialize["batchIndex"] = o.BatchIndex
	}
	return json.Marshal(toSerialize)
}

type NullableHealthSubStreamTransactionalIncrements struct {
	value *HealthSubStreamTransactionalIncrements
	isSet bool
}

func (v NullableHealthSubStreamTransactionalIncrements) Get() *HealthSubStreamTransactionalIncrements {
	return v.value
}

func (v *NullableHealthSubStreamTransactionalIncrements) Set(val *HealthSubStreamTransactionalIncrements) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthSubStreamTransactionalIncrements) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthSubStreamTransactionalIncrements) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthSubStreamTransactionalIncrements(val *HealthSubStreamTransactionalIncrements) *NullableHealthSubStreamTransactionalIncrements {
	return &NullableHealthSubStreamTransactionalIncrements{value: val, isSet: true}
}

func (v NullableHealthSubStreamTransactionalIncrements) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthSubStreamTransactionalIncrements) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
