/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MetricStreamReference struct for MetricStreamReference
type MetricStreamReference struct {
	Type               string   `json:"_type"`
	StreamNodeId       int64    `json:"streamNodeId"`
	ElementIdentifiers []string `json:"elementIdentifiers"`
}

// NewMetricStreamReference instantiates a new MetricStreamReference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetricStreamReference(type_ string, streamNodeId int64, elementIdentifiers []string) *MetricStreamReference {
	this := MetricStreamReference{}
	this.Type = type_
	this.StreamNodeId = streamNodeId
	this.ElementIdentifiers = elementIdentifiers
	return &this
}

// NewMetricStreamReferenceWithDefaults instantiates a new MetricStreamReference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricStreamReferenceWithDefaults() *MetricStreamReference {
	this := MetricStreamReference{}
	return &this
}

// GetType returns the Type field value
func (o *MetricStreamReference) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *MetricStreamReference) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *MetricStreamReference) SetType(v string) {
	o.Type = v
}

// GetStreamNodeId returns the StreamNodeId field value
func (o *MetricStreamReference) GetStreamNodeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.StreamNodeId
}

// GetStreamNodeIdOk returns a tuple with the StreamNodeId field value
// and a boolean to check if the value has been set.
func (o *MetricStreamReference) GetStreamNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamNodeId, true
}

// SetStreamNodeId sets field value
func (o *MetricStreamReference) SetStreamNodeId(v int64) {
	o.StreamNodeId = v
}

// GetElementIdentifiers returns the ElementIdentifiers field value
func (o *MetricStreamReference) GetElementIdentifiers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ElementIdentifiers
}

// GetElementIdentifiersOk returns a tuple with the ElementIdentifiers field value
// and a boolean to check if the value has been set.
func (o *MetricStreamReference) GetElementIdentifiersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ElementIdentifiers, true
}

// SetElementIdentifiers sets field value
func (o *MetricStreamReference) SetElementIdentifiers(v []string) {
	o.ElementIdentifiers = v
}

func (o MetricStreamReference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["streamNodeId"] = o.StreamNodeId
	}
	if true {
		toSerialize["elementIdentifiers"] = o.ElementIdentifiers
	}
	return json.Marshal(toSerialize)
}

type NullableMetricStreamReference struct {
	value *MetricStreamReference
	isSet bool
}

func (v NullableMetricStreamReference) Get() *MetricStreamReference {
	return v.value
}

func (v *NullableMetricStreamReference) Set(val *MetricStreamReference) {
	v.value = val
	v.isSet = true
}

func (v NullableMetricStreamReference) IsSet() bool {
	return v.isSet
}

func (v *NullableMetricStreamReference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetricStreamReference(val *MetricStreamReference) *NullableMetricStreamReference {
	return &NullableMetricStreamReference{value: val, isSet: true}
}

func (v NullableMetricStreamReference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetricStreamReference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
