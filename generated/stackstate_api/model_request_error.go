/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// RequestError - struct for RequestError
type RequestError struct {
	RequestValidationError *RequestValidationError
	TopologyOverflowError  *TopologyOverflowError
}

// RequestValidationErrorAsRequestError is a convenience function that returns RequestValidationError wrapped in RequestError
func RequestValidationErrorAsRequestError(v *RequestValidationError) RequestError {
	return RequestError{
		RequestValidationError: v,
	}
}

// TopologyOverflowErrorAsRequestError is a convenience function that returns TopologyOverflowError wrapped in RequestError
func TopologyOverflowErrorAsRequestError(v *TopologyOverflowError) RequestError {
	return RequestError{
		TopologyOverflowError: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *RequestError) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = newStrictDecoder(data).Decode(&jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'RequestValidationError'
	if jsonDict["_type"] == "RequestValidationError" {
		// try to unmarshal JSON data into RequestValidationError
		err = json.Unmarshal(data, &dst.RequestValidationError)
		if err == nil {
			return nil // data stored in dst.RequestValidationError, return on the first match
		} else {
			dst.RequestValidationError = nil
			return fmt.Errorf("Failed to unmarshal RequestError as RequestValidationError: %s", err.Error())
		}
	}

	// check if the discriminator value is 'TopologyOverflowError'
	if jsonDict["_type"] == "TopologyOverflowError" {
		// try to unmarshal JSON data into TopologyOverflowError
		err = json.Unmarshal(data, &dst.TopologyOverflowError)
		if err == nil {
			return nil // data stored in dst.TopologyOverflowError, return on the first match
		} else {
			dst.TopologyOverflowError = nil
			return fmt.Errorf("Failed to unmarshal RequestError as TopologyOverflowError: %s", err.Error())
		}
	}

	return nil
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RequestError) MarshalJSON() ([]byte, error) {
	if src.RequestValidationError != nil {
		return json.Marshal(&src.RequestValidationError)
	}

	if src.TopologyOverflowError != nil {
		return json.Marshal(&src.TopologyOverflowError)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RequestError) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.RequestValidationError != nil {
		return obj.RequestValidationError
	}

	if obj.TopologyOverflowError != nil {
		return obj.TopologyOverflowError
	}

	// all schemas are nil
	return nil
}

type NullableRequestError struct {
	value *RequestError
	isSet bool
}

func (v NullableRequestError) Get() *RequestError {
	return v.value
}

func (v *NullableRequestError) Set(val *RequestError) {
	v.value = val
	v.isSet = true
}

func (v NullableRequestError) IsSet() bool {
	return v.isSet
}

func (v *NullableRequestError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequestError(val *RequestError) *NullableRequestError {
	return &NullableRequestError{value: val, isSet: true}
}

func (v NullableRequestError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequestError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
