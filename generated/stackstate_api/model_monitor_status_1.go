/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// MonitorStatus1 struct for MonitorStatus1
type MonitorStatus1 struct {
	Monitor Monitor1 `json:"monitor"`
	Status HealthStreamStatus1 `json:"status"`
	TopologyMatchResult TopologyMatchResult `json:"topologyMatchResult"`
}

// NewMonitorStatus1 instantiates a new MonitorStatus1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonitorStatus1(monitor Monitor1, status HealthStreamStatus1, topologyMatchResult TopologyMatchResult) *MonitorStatus1 {
	this := MonitorStatus1{}
	this.Monitor = monitor
	this.Status = status
	this.TopologyMatchResult = topologyMatchResult
	return &this
}

// NewMonitorStatus1WithDefaults instantiates a new MonitorStatus1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonitorStatus1WithDefaults() *MonitorStatus1 {
	this := MonitorStatus1{}
	return &this
}

// GetMonitor returns the Monitor field value
func (o *MonitorStatus1) GetMonitor() Monitor1 {
	if o == nil {
		var ret Monitor1
		return ret
	}

	return o.Monitor
}

// GetMonitorOk returns a tuple with the Monitor field value
// and a boolean to check if the value has been set.
func (o *MonitorStatus1) GetMonitorOk() (*Monitor1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Monitor, true
}

// SetMonitor sets field value
func (o *MonitorStatus1) SetMonitor(v Monitor1) {
	o.Monitor = v
}

// GetStatus returns the Status field value
func (o *MonitorStatus1) GetStatus() HealthStreamStatus1 {
	if o == nil {
		var ret HealthStreamStatus1
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *MonitorStatus1) GetStatusOk() (*HealthStreamStatus1, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *MonitorStatus1) SetStatus(v HealthStreamStatus1) {
	o.Status = v
}

// GetTopologyMatchResult returns the TopologyMatchResult field value
func (o *MonitorStatus1) GetTopologyMatchResult() TopologyMatchResult {
	if o == nil {
		var ret TopologyMatchResult
		return ret
	}

	return o.TopologyMatchResult
}

// GetTopologyMatchResultOk returns a tuple with the TopologyMatchResult field value
// and a boolean to check if the value has been set.
func (o *MonitorStatus1) GetTopologyMatchResultOk() (*TopologyMatchResult, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TopologyMatchResult, true
}

// SetTopologyMatchResult sets field value
func (o *MonitorStatus1) SetTopologyMatchResult(v TopologyMatchResult) {
	o.TopologyMatchResult = v
}

func (o MonitorStatus1) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["monitor"] = o.Monitor
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["topologyMatchResult"] = o.TopologyMatchResult
	}
	return json.Marshal(toSerialize)
}

type NullableMonitorStatus1 struct {
	value *MonitorStatus1
	isSet bool
}

func (v NullableMonitorStatus1) Get() *MonitorStatus1 {
	return v.value
}

func (v *NullableMonitorStatus1) Set(val *MonitorStatus1) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorStatus1) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorStatus1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorStatus1(val *MonitorStatus1) *NullableMonitorStatus1 {
	return &NullableMonitorStatus1{value: val, isSet: true}
}

func (v NullableMonitorStatus1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorStatus1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


