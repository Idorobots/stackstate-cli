/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// ArgumentDoubleVal struct for ArgumentDoubleVal
type ArgumentDoubleVal struct {
	Type                string  `json:"_type"`
	Id                  *int64  `json:"id,omitempty"`
	LastUpdateTimestamp *int64  `json:"lastUpdateTimestamp,omitempty"`
	Parameter           int64   `json:"parameter"`
	Value               float64 `json:"value"`
}

// NewArgumentDoubleVal instantiates a new ArgumentDoubleVal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArgumentDoubleVal(type_ string, parameter int64, value float64) *ArgumentDoubleVal {
	this := ArgumentDoubleVal{}
	this.Type = type_
	this.Parameter = parameter
	this.Value = value
	return &this
}

// NewArgumentDoubleValWithDefaults instantiates a new ArgumentDoubleVal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArgumentDoubleValWithDefaults() *ArgumentDoubleVal {
	this := ArgumentDoubleVal{}
	return &this
}

// GetType returns the Type field value
func (o *ArgumentDoubleVal) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ArgumentDoubleVal) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ArgumentDoubleVal) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ArgumentDoubleVal) GetId() int64 {
	if o == nil || o.Id == nil {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArgumentDoubleVal) GetIdOk() (*int64, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ArgumentDoubleVal) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *ArgumentDoubleVal) SetId(v int64) {
	o.Id = &v
}

// GetLastUpdateTimestamp returns the LastUpdateTimestamp field value if set, zero value otherwise.
func (o *ArgumentDoubleVal) GetLastUpdateTimestamp() int64 {
	if o == nil || o.LastUpdateTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdateTimestamp
}

// GetLastUpdateTimestampOk returns a tuple with the LastUpdateTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArgumentDoubleVal) GetLastUpdateTimestampOk() (*int64, bool) {
	if o == nil || o.LastUpdateTimestamp == nil {
		return nil, false
	}
	return o.LastUpdateTimestamp, true
}

// HasLastUpdateTimestamp returns a boolean if a field has been set.
func (o *ArgumentDoubleVal) HasLastUpdateTimestamp() bool {
	if o != nil && o.LastUpdateTimestamp != nil {
		return true
	}

	return false
}

// SetLastUpdateTimestamp gets a reference to the given int64 and assigns it to the LastUpdateTimestamp field.
func (o *ArgumentDoubleVal) SetLastUpdateTimestamp(v int64) {
	o.LastUpdateTimestamp = &v
}

// GetParameter returns the Parameter field value
func (o *ArgumentDoubleVal) GetParameter() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value
// and a boolean to check if the value has been set.
func (o *ArgumentDoubleVal) GetParameterOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parameter, true
}

// SetParameter sets field value
func (o *ArgumentDoubleVal) SetParameter(v int64) {
	o.Parameter = v
}

// GetValue returns the Value field value
func (o *ArgumentDoubleVal) GetValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ArgumentDoubleVal) GetValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ArgumentDoubleVal) SetValue(v float64) {
	o.Value = v
}

func (o ArgumentDoubleVal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.LastUpdateTimestamp != nil {
		toSerialize["lastUpdateTimestamp"] = o.LastUpdateTimestamp
	}
	if true {
		toSerialize["parameter"] = o.Parameter
	}
	if true {
		toSerialize["value"] = o.Value
	}
	return json.Marshal(toSerialize)
}

type NullableArgumentDoubleVal struct {
	value *ArgumentDoubleVal
	isSet bool
}

func (v NullableArgumentDoubleVal) Get() *ArgumentDoubleVal {
	return v.value
}

func (v *NullableArgumentDoubleVal) Set(val *ArgumentDoubleVal) {
	v.value = val
	v.isSet = true
}

func (v NullableArgumentDoubleVal) IsSet() bool {
	return v.isSet
}

func (v *NullableArgumentDoubleVal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArgumentDoubleVal(val *ArgumentDoubleVal) *NullableArgumentDoubleVal {
	return &NullableArgumentDoubleVal{value: val, isSet: true}
}

func (v NullableArgumentDoubleVal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArgumentDoubleVal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
