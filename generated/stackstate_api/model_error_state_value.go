/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// ErrorStateValue the model 'ErrorStateValue'
type ErrorStateValue string

// List of ErrorStateValue
const (
	ERRORSTATEVALUE_UNKNOWN                  ErrorStateValue = "UNKNOWN"
	ERRORSTATEVALUE_STALE_DATA_STREAM        ErrorStateValue = "STALE_DATA_STREAM"
	ERRORSTATEVALUE_STREAM_DATA_NOT_FOUND    ErrorStateValue = "STREAM_DATA_NOT_FOUND"
	ERRORSTATEVALUE_DATA_SOURCE_UNREACHABLE  ErrorStateValue = "DATA_SOURCE_UNREACHABLE"
	ERRORSTATEVALUE_DATA_STREAM_ERROR        ErrorStateValue = "DATA_STREAM_ERROR"
	ERRORSTATEVALUE_CHECK_ERROR              ErrorStateValue = "CHECK_ERROR"
	ERRORSTATEVALUE_CHECK_LIMITED            ErrorStateValue = "CHECK_LIMITED"
	ERRORSTATEVALUE_BASELINES_ARE_DEPRECATED ErrorStateValue = "BASELINES_ARE_DEPRECATED"
)

// All allowed values of ErrorStateValue enum
var AllowedErrorStateValueEnumValues = []ErrorStateValue{
	"UNKNOWN",
	"STALE_DATA_STREAM",
	"STREAM_DATA_NOT_FOUND",
	"DATA_SOURCE_UNREACHABLE",
	"DATA_STREAM_ERROR",
	"CHECK_ERROR",
	"CHECK_LIMITED",
	"BASELINES_ARE_DEPRECATED",
}

func (v *ErrorStateValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ErrorStateValue(value)
	for _, existing := range AllowedErrorStateValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ErrorStateValue", value)
}

// NewErrorStateValueFromValue returns a pointer to a valid ErrorStateValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorStateValueFromValue(v string) (*ErrorStateValue, error) {
	ev := ErrorStateValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ErrorStateValue: valid values are %v", v, AllowedErrorStateValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorStateValue) IsValid() bool {
	for _, existing := range AllowedErrorStateValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ErrorStateValue value
func (v ErrorStateValue) Ptr() *ErrorStateValue {
	return &v
}

type NullableErrorStateValue struct {
	value *ErrorStateValue
	isSet bool
}

func (v NullableErrorStateValue) Get() *ErrorStateValue {
	return v.value
}

func (v *NullableErrorStateValue) Set(val *ErrorStateValue) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorStateValue) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorStateValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorStateValue(val *ErrorStateValue) *NullableErrorStateValue {
	return &NullableErrorStateValue{value: val, isSet: true}
}

func (v NullableErrorStateValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorStateValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
