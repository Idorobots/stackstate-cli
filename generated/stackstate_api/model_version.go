/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// Version the model 'Version'
type Version string

// List of Version
const (
	VERSION__0_0_1 Version = "0.0.1"
)

// All allowed values of Version enum
var AllowedVersionEnumValues = []Version{
	"0.0.1",
}

func (v *Version) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Version(value)
	for _, existing := range AllowedVersionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Version", value)
}

// NewVersionFromValue returns a pointer to a valid Version
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVersionFromValue(v string) (*Version, error) {
	ev := Version(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Version: valid values are %v", v, AllowedVersionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Version) IsValid() bool {
	for _, existing := range AllowedVersionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Version value
func (v Version) Ptr() *Version {
	return &v
}

type NullableVersion struct {
	value *Version
	isSet bool
}

func (v NullableVersion) Get() *Version {
	return v.value
}

func (v *NullableVersion) Set(val *Version) {
	v.value = val
	v.isSet = true
}

func (v NullableVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersion(val *Version) *NullableVersion {
	return &NullableVersion{value: val, isSet: true}
}

func (v NullableVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
