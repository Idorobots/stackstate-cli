/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
	"fmt"
)

// MonitorRuntimeStatusValue the model 'MonitorRuntimeStatusValue'
type MonitorRuntimeStatusValue string

// List of MonitorRuntimeStatusValue
const (
	MONITORRUNTIMESTATUSVALUE_ENABLED  MonitorRuntimeStatusValue = "ENABLED"
	MONITORRUNTIMESTATUSVALUE_DISABLED MonitorRuntimeStatusValue = "DISABLED"
	MONITORRUNTIMESTATUSVALUE_ERROR    MonitorRuntimeStatusValue = "ERROR"
	MONITORRUNTIMESTATUSVALUE_WARNING  MonitorRuntimeStatusValue = "WARNING"
)

// All allowed values of MonitorRuntimeStatusValue enum
var AllowedMonitorRuntimeStatusValueEnumValues = []MonitorRuntimeStatusValue{
	"ENABLED",
	"DISABLED",
	"ERROR",
	"WARNING",
}

func (v *MonitorRuntimeStatusValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MonitorRuntimeStatusValue(value)
	for _, existing := range AllowedMonitorRuntimeStatusValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MonitorRuntimeStatusValue", value)
}

// NewMonitorRuntimeStatusValueFromValue returns a pointer to a valid MonitorRuntimeStatusValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMonitorRuntimeStatusValueFromValue(v string) (*MonitorRuntimeStatusValue, error) {
	ev := MonitorRuntimeStatusValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MonitorRuntimeStatusValue: valid values are %v", v, AllowedMonitorRuntimeStatusValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MonitorRuntimeStatusValue) IsValid() bool {
	for _, existing := range AllowedMonitorRuntimeStatusValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MonitorRuntimeStatusValue value
func (v MonitorRuntimeStatusValue) Ptr() *MonitorRuntimeStatusValue {
	return &v
}

type NullableMonitorRuntimeStatusValue struct {
	value *MonitorRuntimeStatusValue
	isSet bool
}

func (v NullableMonitorRuntimeStatusValue) Get() *MonitorRuntimeStatusValue {
	return v.value
}

func (v *NullableMonitorRuntimeStatusValue) Set(val *MonitorRuntimeStatusValue) {
	v.value = val
	v.isSet = true
}

func (v NullableMonitorRuntimeStatusValue) IsSet() bool {
	return v.isSet
}

func (v *NullableMonitorRuntimeStatusValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonitorRuntimeStatusValue(val *MonitorRuntimeStatusValue) *NullableMonitorRuntimeStatusValue {
	return &NullableMonitorRuntimeStatusValue{value: val, isSet: true}
}

func (v NullableMonitorRuntimeStatusValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonitorRuntimeStatusValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
