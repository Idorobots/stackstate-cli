/*
StackState API

StackState's API specification

API version: 0.0.1
Contact: info@stackstate.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package stackstate_api

import (
	"encoding/json"
)

// DataUnavailable struct for DataUnavailable
type DataUnavailable struct {
	Type string `json:"_type"`
	Message string `json:"message"`
	RequestTimeMs int32 `json:"requestTimeMs"`
	AvailableSinceMs int32 `json:"availableSinceMs"`
}

// NewDataUnavailable instantiates a new DataUnavailable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataUnavailable(type_ string, message string, requestTimeMs int32, availableSinceMs int32) *DataUnavailable {
	this := DataUnavailable{}
	this.Type = type_
	this.Message = message
	this.RequestTimeMs = requestTimeMs
	this.AvailableSinceMs = availableSinceMs
	return &this
}

// NewDataUnavailableWithDefaults instantiates a new DataUnavailable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataUnavailableWithDefaults() *DataUnavailable {
	this := DataUnavailable{}
	return &this
}

// GetType returns the Type field value
func (o *DataUnavailable) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DataUnavailable) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DataUnavailable) SetType(v string) {
	o.Type = v
}

// GetMessage returns the Message field value
func (o *DataUnavailable) GetMessage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Message
}

// GetMessageOk returns a tuple with the Message field value
// and a boolean to check if the value has been set.
func (o *DataUnavailable) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Message, true
}

// SetMessage sets field value
func (o *DataUnavailable) SetMessage(v string) {
	o.Message = v
}

// GetRequestTimeMs returns the RequestTimeMs field value
func (o *DataUnavailable) GetRequestTimeMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RequestTimeMs
}

// GetRequestTimeMsOk returns a tuple with the RequestTimeMs field value
// and a boolean to check if the value has been set.
func (o *DataUnavailable) GetRequestTimeMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestTimeMs, true
}

// SetRequestTimeMs sets field value
func (o *DataUnavailable) SetRequestTimeMs(v int32) {
	o.RequestTimeMs = v
}

// GetAvailableSinceMs returns the AvailableSinceMs field value
func (o *DataUnavailable) GetAvailableSinceMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AvailableSinceMs
}

// GetAvailableSinceMsOk returns a tuple with the AvailableSinceMs field value
// and a boolean to check if the value has been set.
func (o *DataUnavailable) GetAvailableSinceMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AvailableSinceMs, true
}

// SetAvailableSinceMs sets field value
func (o *DataUnavailable) SetAvailableSinceMs(v int32) {
	o.AvailableSinceMs = v
}

func (o DataUnavailable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["_type"] = o.Type
	}
	if true {
		toSerialize["message"] = o.Message
	}
	if true {
		toSerialize["requestTimeMs"] = o.RequestTimeMs
	}
	if true {
		toSerialize["availableSinceMs"] = o.AvailableSinceMs
	}
	return json.Marshal(toSerialize)
}

type NullableDataUnavailable struct {
	value *DataUnavailable
	isSet bool
}

func (v NullableDataUnavailable) Get() *DataUnavailable {
	return v.value
}

func (v *NullableDataUnavailable) Set(val *DataUnavailable) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUnavailable) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUnavailable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUnavailable(val *DataUnavailable) *NullableDataUnavailable {
	return &NullableDataUnavailable{value: val, isSet: true}
}

func (v NullableDataUnavailable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUnavailable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


