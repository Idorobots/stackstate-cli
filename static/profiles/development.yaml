# The default values define a production setup
# Use this file to override them for the smallest possible test environment (this is not an officially supported setup)
# NOTE: This still requires the generated values.yaml containing license key, api key etc...
elasticsearch:
  minimumMasterNodes: 1
  replicas: 1
  volumeClaimTemplate:
    accessModes:
      - "ReadWriteOnce"
    resources:
      requests:
        storage: 75Gi
        cpu: "500m"
        memory: "1500Mi"
zookeeper:
  replicaCount: 1
  resources:
        requests: 
          cpu: 100m
          memory: 500Mi
kafka:
  replicaCount: 1
  defaultReplicationFactor: 1
  offsetsTopicReplicationFactor: 1
  transactionStateLogReplicationFactor: 1
  persistence:
    size: 30Gi
  resources:
        requests: 
          cpu: 100m
          memory: 500Mi
hbase:
  hbase:
    master:
      replicaCount: 1
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    regionserver:
      replicaCount: 1
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
  hdfs:
    minReplication: 1
    datanode:
      persistence:
        size: 10Gi
      replicaCount: 1
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    namenode:
      persistence:
        size: 5Gi
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    secondarynamenode:
      enabled: false
  tephra:
    replicaCount: 1
    resources:
        requests: 
          cpu: 100m
          memory: 500Mi
stackstate:
  experimental:
    server:
      # Production runs with split: true, but split: false requires quite a lot less memory. Depending on testing requirements flip this to true to get
      # separate services split out
      split: false
  components:
    api:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    correlate:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    checks:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    initializer:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    e2es:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    mm2es:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    trace2es:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    problemProducer:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    receiver:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    state:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    sync:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    slicing:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    ui:
      replicaCount: 1
    viewHealth:
      resources:
        requests: 
          cpu: 100m
          memory: 500Mi
    healthSync:
      resources:
        requests:
          cpu: "100m"
          memory: "500Mi"
    server:
      resources:
        requests: 
          cpu: 2
          memory: 4Gi
anomaly-detection:
  enabled: false
